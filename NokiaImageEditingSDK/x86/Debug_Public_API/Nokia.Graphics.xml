<?xml version="1.0"?>
<doc>
    <assembly>
        "Nokia.Graphics.WinRT"
    </assembly>
    <members>
        <member name="M:ctstream_createBufferStreamEx(CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void*,=FUNC:System.Void(System.Void*),CTStream**)">
    @brief
    Create a stream from a buffer.

    This function will create a stream object that uses a @c CTBuffer as 
    underlying resource. 

    For output streams, the buffer can grow to a max size expecified as a 
    parameter, which means that the internal pointer in the @c CTBuffer 
    object ( @c data member ), can be freed and allocated internally multiple 
    times.

    @param pBuffer The input buffer that will be used to read or write data to.
    The CTBuffer struct that pBuffer points to must be valid during the whole
    life time of the CTStream.
    @param maxBuffer max size the buffer can become when writing data to it. 
    Zero means that it can grow as much as needed. Initial buffer size is fetched
    from the input buffer.
    @param pExtraContext Extra context sent to the buffer. This context will
    be sent as an argument to destroyFunc. If set to null, a null parameter
    is passed to destroyFunc (if one is provided).
    @param destroyFunc Extra destroy function called when the buffer stream
    is destroyed. pExtraContext is sent as an argument to this function. The
    function is called after all other destruction has been processed. If set
    to null, the function will not be called.

    @param[out] ppStream Pointer to an stream object.

    When the stream object (returned by this function) is no longer needed, it
    should be destroyed using: ctstream_destroy()

    @return
    @li @c CERR_OK if successful or a specific error code upon failure.
 
    @note The extra context can be used to, for instance, automatically destroy
    a buffer when the stream is destroyed.

    @since 3.8

</member>
        <member name="M:ctstream_createBufferStream(CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTStream**)">
@ingroup scb_ctstream_buffer
@file ctstream_buffer.h
@brief Buffer based stream creation.

@addtogroup scb_ctstream_buffer
@brief Creation of buffer streams
@{

    @brief
    Create a stream from a buffer.

    This function will create a stream object that uses a @c CTBuffer as 
    underlying resource. 

    For output streams, the buffer can grow to a max size expecified as a 
    parameter, which means that the internal pointer in the @c CTBuffer 
    object ( @c data member ), can be freed and allocated internally multiple 
    times.

    @param pBuffer The input buffer that will be used to read or write data to.
    The CTBuffer struct that pBuffer points to must be valid during the whole
    life time of the CTStream.
    @param maxBuffer max size the buffer can become when writing data to it. 
    Zero means that it can grow as much as needed. Initial buffer size is fetched
    from the input buffer.

    @param[out] ppStream Pointer to an stream object.

    When the stream object (returned by this function) is no longer needed, it
    should be destroyed using: ctstream_destroy()

    @return
    @li @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.AutoResizeAsync(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Imaging.AutoResizeConfiguration)">
            <summary>
Jpeg squeeze of an image into a new smaller jpeg  
using configured auto resize parameters.
</summary>
            <param name="jpegSource">
Source jpeg buffer to be squeezed.
</param>
            <param name="autoConfiguration">
Resize configuration parameters.
</param>
            <returns> Asynchronously returns buffer with squeezed jpeg </returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.SqueezeAsync(Windows.Storage.Streams.IBuffer,System.UInt32)">
            <summary>
Jpeg squeeze of an image into a new smaller jpeg  
with a desired maximum buffer size in bytes.
</summary>
            <param name="jpegSource">
Source jpeg buffer to be squeezed.
</param>
            <param name="toSize">
Desired maximum output jpeg size.
</param>
            <returns> Asynchronously returns buffer with squeezed jpeg </returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.BlendAsync(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Bitmap,Nokia.Graphics.Point)">
            <summary>
Blends a jpeg image with another bitmap image into a new jpeg.
The source jpeg image dimensions cannot be smaller than 
the dimensions of the bitmap image to blend. 
</summary>
            <param name="jpegSource">
Source jpeg to be blended.
</param>
            <param name="bitmapSource">
Bitmap image to be blended with jpeg image. Image must be in ARGB8888 or AYUV4444 color mode.
</param>
            <param name="blendPosition">
Blend start position in the jpeg image (upper left corner).
</param>
            <returns> Asynchroniously returns buffer with blended jpeg </returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.FlipAsync(Windows.Storage.Streams.IBuffer,System.Boolean,System.Boolean)">
            <summary>
Performs lossless flip, flips a jpeg into a new jpeg.
</summary>
            <param name="jpegSource">
Source jpeg to be flipped.
</param>
            <param name="flipHorizontal">
Specifies if jpeg should be horisontally flipped.
</param>
            <param name="flipVertical">
Specifies if jpeg should be vertically flipped.
</param>
            <returns> Asynchroniously returns buffer with flipped jpeg </returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.RotateAsync(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Imaging.OrientationMode)">
            <summary>
Performs lossless rotate, rotates a jpeg into a new jpeg.
</summary>
            <param name="jpegSource">
Source jpeg to be rotated.
</param>
            <param name="mode">
One of the available orientation modes.
</param>
            <returns> Asynchroniously returns buffer with rotated jpeg </returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.Dispose">
            <summary>
JpegTools destructor.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.JpegTools">
            <summary>
JpegTools. Operations are done in jpeg compressed domain.</summary>
            <remarks>
                <para> The lossless rotate and flip functions have limitations depending on image
dimensions and MCU (Minimum Coded Unit) size. See the constraints below
for the different directions. If the constraints aren't fullfilled,
an exception will be thrown. To rotate images with unsupported image dimensions, 
please use the (lossy) rotate function found in the Nokia::Graphics::Base API. 
</para>
                <para>Constraints:</para>
                <para>ROTATE_90_FLIP: Width must be multiple of MCU width and height must be multiple of MCU height</para>
                <para>ROTATE_90_NO_FLIP: Height must be multiple of MCU height</para>
                <para>ROTATE_180_FLIP: Height must be multiple of MCU height</para>
                <para>ROTATE_180_NO_FLIP: Width must be multiple of MCU width and height must be multiple of MCU height</para>
                <para>ROTATE_270_NO_FLIP: Width must be multiple of MCU width</para>
                <para>ROTATE_0_FLIP: Width must be multiple of MCU width</para>
            </remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.OrientationMode">
            <summary>
Enum describing the different orientation modes.
All modes with flip mean horizontal flip.
</summary>
        </member>
        <member name="M:caps_blendJpeg(CTStream*,CTStream*,CTBuffer!System.Runtime.CompilerServices.IsConst*,CTImage!System.Runtime.CompilerServices.IsConst*,CTVector!System.Runtime.CompilerServices.IsConst*,CTIterator**)">
@defgroup fxgroup_blend Blend
@{

    Jpeg Blend, blends a jpeg image with an other image into a new jpeg file.
	The source image dimensions cannot be smaller than 
	the dimensions of the image to blend. 

    @param[in] pSrcStream Stream of the input image.
    @param[in] pDstStream Stream of the output image.
    @param[in] pExifDataBuffer Pointer to Exif meta data.
    @param[in] pImage       Pointer to image to blend in. The image must be 
                            in either ARGB8888 or AYUV4444 format.
    @param[in] pImagePosition Pointer to the position where to 
                              blend in the image (upper left corner). 
    @param[out] ppIterator A pointer to an iterator object. If set to NULL,
                the operation will be performed directly. 

    @remarks
    @copydoc iterative_operations
    
    @return
    @c CERR_OK if no errors or an appropriate error code otherwise.
    @c CERR_UNSUPPORTED_COLOR_MODE if the color mode is unsupported.

    @since 3.8

</member>
        <member name="M:caps_flipJpegMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Lossless flip, flips a jpeg file into a new jpeg file.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    @param[in] flipHorizontal Flips the image horizontally.    
    @param[in] flipVertical Flips the image vertically.    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_flipJpegFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@}

    Lossless flip, flips a jpeg file into a new jpeg file.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] flipHorizontal Flips the image horizontally.    
    @param[in] flipVertical Flips the image vertically.    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_rotateJpegMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Byte)">
    Lossless rotate, rotates a jpeg file into a new jpeg file.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    @param[in] orientation Orientation mode. Can be any of the values 
                           from the @c ::CAPS_ORIENTATION_MODE enumeration..    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_rotateJpegFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Byte)">
    Lossless rotate, rotates a jpeg file into a new jpeg file.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] orientation Orientation mode. Can be any of the values 
                           from the @c ::CAPS_ORIENTATION_MODE enumeration..    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_rotateJpeg(CTStream*,CTStream*,CAPS_ORIENTATION_MODE,CTIterator**)">
    @brief Lossless rotate, rotates a jpeg into a new jpeg.

    @param[in] pSrcStream stream containing the input image.
    @param[in] pDstStream stream containing the output image.
    @param[in] mode Orientation mode. Can be any of the values 
               from the ::CAPS_ORIENTATION_MODE enumeration,
               or the result from calling caps_getFlipRotationMode.
    @param[out] ppIterator A pointer to an iterator object. If set to NULL,
                the operation will be performed directly.

    @remarks
    @copydoc rotate_flip_limitations
    \n
    @copydoc iterative_operations

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @since 3.8

</member>
        <member name="M:Nokia.Graphics.Imaging.AutoResizeConfiguration.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>
A string that represents the current object.
</returns>
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.ColorSpacing">
            <summary>
One of the supported color spaces.
</summary>
            <value name="colorSpace" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MinEncodingQuality">
            <summary>
The lowest desired encoding quality.
Must be in the range (0.0) - (1.0)
</summary>
            <value name="minEncodingQuality" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.ResizeMode">
            <summary>
One of the AutoResizeModes
</summary>
            <value name="resizeMode" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MinImageSize">
            <summary>
Minimum image size to achieve. The rendered image will be at least as large as this size in at least
one dimension.
The size must be smaller than maxImageSize.
A minImageSize of {160, 120} will, for the following different source
image sizes, give this minimum size:
{1024, 1024} will be at least {120, 120}
{1280, 640}  will be at least {160, 80}
{640, 1280}  will be at least {80, 160}
</summary>
            <value name="minImageSize" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MaxImageSize">
            <summary>
Maximum image size to achieve. The rendered image will fit within this outer bounding box when
allowing for rotation. The size must be larger than minImageSize.
A maxImageSize of {640, 480} will, for the following different source
image sizes, give this maximum size:
{1024, 1024} will be at most {480, 480}
{1280, 640}  will be at most {640, 320}
{640, 1280}  will be at most {320, 640}
</summary>
            <value name="maxImageSize" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MaxBufferSize">
            <summary>
Maximum output buffer size in bytes.
</summary>
            <value name="maxBufferSize" />
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoResizeConfiguration.#ctor(System.UInt32,Nokia.Graphics.Size,Nokia.Graphics.Size,Nokia.Graphics.Imaging.AutoResizeMode,System.Double,Nokia.Graphics.ColorSpace)">
            <summary>
Creates a new resize configuration object for the JpegTools.</summary>
            <param name="maxBufferSize">
Maximum output buffer size in bytes.
</param>
            <param name="maxImageSize">
                <para>Maximum image size to achieve. The rendered image will fit within this outer bounding box when
allowing for rotation. The size must be larger than minImageSize.
A maxImageSize of {640, 480} will, for the following different source
image sizes, give this maximum size:</para>
                <para>{1024, 1024} will be at most {480, 480}</para>
                <para>{1280, 640}  will be at most {640, 320}</para>
                <para>{640, 1280}  will be at most {320, 640}</para>
            </param>
            <param name="minImageSize">
                <para>Minimum image size to achieve. The rendered image will be at least as large as this size in at least
one dimension. The size must be smaller than maxImageSize.
A minImageSize of {160, 120} will, for the following different source
image sizes, give this minimum size:</para>
                <para>{1024, 1024} will be at least {120, 120}</para>
                <para>{1280, 640}  will be at least {160, 80}</para>
                <para>{640, 1280}  will be at least {80, 160}</para>
            </param>
            <param name="resizeMode">
One of the AutoResizeModes
</param>
            <param name="minEncodingQuality">
The lowest desired encoding quality. Must be in the range (0.0) - (1.0)
</param>
            <param name="colorSpacing">
One of the supported color spaces.
</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AutoResizeConfiguration">
            <summary>
  Configuration settings for the JpegTools resize.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AutoResizeMode">
            <summary>
Enum describing the different jpeg image auto resize modes.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.AutoResizeQuality">
            <summary>Auto resize will simultaneously lower the encoding quality and shrink
the width and height of the image.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.PrioritizeHighEncodingQuality">
            <summary>Auto resize will try to preserve the highest possible encoding quality
while shrinking the width and height of the image. This might be
useful if you substantially reduce the size of the image.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.PrioritizeLargeImageSize">
            <summary>Auto resize will try to preserve the maxImageSize while lowering
the encoding quality.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.PreserveSourceEncodingQuality">
            <summary>Auto resize will try to preserve the source encoding quality while
shrinking the width and height of the image.</summary>
        </member>
        <member name="M:caps_autoResizeImageMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,autoResizeInfo!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Auto resize, changes the image size and encoding quality to make
    the new image fit into the desired file size. Auto resize will
    maintain the aspect ratio of the image.

    If the achieved file size returned by this function is larger than
    the requested file size the user can use one of the squeeze functions
    in this feature module to further reduce the file size.

    @param[in]  pSrcJpeg Buffer containing the input jpeg image.
    @param[in]  pDstJpeg Buffer containing the output resized jpeg image.     
    @param[in]  pInfo Information specifying the auto resize behaviour.    
    @param[out] achievedFileSize The size of the resized file.
    
    @return
    @c CERR_OK if no errors, or an appropriate error code otherwise.
    @c CERR_OPERATION_FAILED is returned if the function is sure it will
    fail in creating a small enough file given the information in pInfo.
    This will happen, for instance, when the minimum encoding quality
    is larger than the quality required to produce an image with
    the specified minimum image size and maximum file size.

    @remarks
    maxImageSize must be larger than minImageSize.
    
    See caps_renderToBuffer() for information about how the 
    destination @c CTBuffer is treated.

    @since 3.7

</member>
        <member name="M:caps_autoResizeImageFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,autoResizeInfo!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Auto resize, changes the image size and encoding quality to make
    the new image fit into the desired file size. Auto resize will
    maintain the aspect ratio of the image.

    If the achieved file size returned by this function is larger than
    the requested file size the user can use one of the squeeze functions
    in this feature module to further reduce the file size.

    @param[in]  pSrcJpegFilename Filename of the input image.
    @param[in]  pDstJpegFilename Filename of the output image.
    @param[in]  pInfo Information specifying the auto resize behaviour.    
    @param[out] achievedFileSize The size of the resized file.
    
    @return
    @c CERR_OK if no errors, or an appropriate error code otherwise.
    @c CERR_OPERATION_FAILED is returned if the function is sure it will
    fail in creating a small enough file given the information in pInfo.
    This will happen, for instance, when the minimum encoding quality
    is larger than the quality required to produce an image with
    the specified minimum image size and maximum file size.

    @remarks
    maxImageSize must be larger than minImageSize.

    @since 3.4

</member>
        <member name="F:AUTO_RESIZE_MIDDLE_COURSE">
Auto resize will simultaneously lower the encoding quality and shrink
the width and height of the image.

</member>
        <member name="F:AUTO_RESIZE_PRIORITIZE_HIGH_ENCODING_QUALITY">
Auto resize will try to preserve the highest possible encoding quality
while shrinking the width and height of the image. This might be
useful if you substantially reduce the size of the image.

</member>
        <member name="F:AUTO_RESIZE_PRIORITIZE_LARGE_IMAGE_SIZE">
Auto resize will try to preserve the maxImageSize while lowering
the encoding quality.

</member>
        <member name="F:AUTO_RESIZE_PRESERVE_SOURCE_ENCODING_QUALITY">
Auto resize will try to preserve the source encoding quality while
shrinking the width and height of the image.

</member>
        <member name="M:caps_squeezeJpegMemToFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.    
               Must be greater than 0.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file. If this happens, the created
       file will not be deleted by this function.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpegMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.    
               Must be greater than 0.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpegFileToMem(System.Char!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.    
               Must be greater than 0.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpegFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.
               Must be greater than 0.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file. If this happens, the created
       file will not be deleted by this function.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpeg(CTStream*,CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTIterator**)">
@ingroup fm_jpegsqueeze
@file fm_jpegsqueeze.h
@brief Defines the interface of the Caps Feature Module: @a JPEGSqueeze

@addtogroup fm_jpegsqueeze
@brief Fast compression of jpeg to specified size.
@{

@defgroup fm_jpegsqueeze_api JpegSqueeze API
@{

    @brief
    Jpeg squeeze, squeezes a jpeg image into a new smaller jpeg  
    with a desired maximum size.

    @param[in] pSrcStream Stream containing the input image.
    @param[in] pDstStream Stream where the output image will be outputted.
    @param[in] proposedSize Desired maximum size of the new jpeg image in bytes.
               Must be greater than 0.
    @param[out] ppIterator A pointer to an iterator object. If set to NULL,
                the operation will be performed directly.

    @remarks
    @copydoc iterative_operations

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg.

    @since 3.8

</member>
        <member name="T:Nokia.Graphics.ColorSpace">
            <summary>
Enum mapping color modes to IPP color spaces.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Color.b">
            <summary>Blue channel</summary>
        </member>
        <member name="F:Nokia.Graphics.Color.g">
            <summary>Green channel</summary>
        </member>
        <member name="F:Nokia.Graphics.Color.r">
            <summary>Red channel</summary>
        </member>
        <member name="F:Nokia.Graphics.Color.a">
            <summary>Alpha channel</summary>
        </member>
        <member name="T:Nokia.Graphics.Color">
            <summary>
Basic struct describing a color.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Point">
            <summary>
Basic struct describing a point.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Rectf.h">
            <summary>Height</summary>
        </member>
        <member name="F:Nokia.Graphics.Rectf.w">
            <summary>Width</summary>
        </member>
        <member name="F:Nokia.Graphics.Rectf.y">
            <summary>Y coordinate</summary>
        </member>
        <member name="F:Nokia.Graphics.Rectf.x">
            <summary>X coordinate</summary>
        </member>
        <member name="T:Nokia.Graphics.Rectf">
            <summary>
Basic struct describing a rectangle with floats.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Rect">
            <summary>
Basic struct describing a rectangle.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Size">
            <summary>
Basic struct describing a size.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateBlendFilter(Nokia.Graphics.Imaging.EditingSession,Nokia.Graphics.Imaging.BlendFunction)">
            <summary>
    Blends a editingSession on the current editingSession image using blend function.
</summary>
            <param name="blendSession">
    The editingSession image to blend into the current image.
</param>
            <param name="function">
    Blend function to use when blending the two images.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateWarpFilter(Nokia.Graphics.Imaging.WarpEffect,System.Single)">
            <summary>
   Sets the warp effect to apply. Warp applied on entire image 
</summary>
            <param name="effect">
    The warp effect to apply. Can be any of the values from the WarpEffect enumeration
</param>
            <param name="strength">
    strength Amount of effect applied. 0.0f means no effect. 1.0f means full effect.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateWarpFilter(Nokia.Graphics.Imaging.WarpEffect,System.Single,Nokia.Graphics.Imaging.Rotation,Windows.Foundation.Rect[])">
            <summary>
   Sets the warp effect to apply
</summary>
            <param name="effect">
    The warp effect to apply. Can be any of the values from the WarpEffect enumeration
</param>
            <param name="strength">
    strength Amount of effect applied. 0.0f means no effect. 1.0f means full effect.
</param>
            <param name="rotation">
    Rotation of the effect.
</param>
            <param name="regions">
    Array of rectangles where warp is applied. 
    Rectangles that are outside of the current image size will be cropped to the valid area.
    There must be at least one rectangle in the array.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateNoiseFilter(Nokia.Graphics.Imaging.NoiseLevel)">
            <summary>
    Applies noise to the current editingSession image.
</summary>
            <param name="noise">
    The amount of noise. Can be any of the values from the NoiseLevel enumeration.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateMirrorFilter">
            <summary>
    Applies a mirror effect on the current editingSession image.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreatePosterizeFilter(System.UInt16)">
            <summary>
    Applies a posterize effect. Reduces the number of colors.
</summary>
            <param name="levels">
The number of allowed values for each color component.
Range: 2 - 16
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateSolarizeFilter(System.Single)">
            <summary>
    Applies a solarize effect.
</summary>
            <param name="threshold">
    The threshold level of the solarize effect.
    Range: 0.0 - 1.0
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateEmbossFilter(System.Single)">
            <summary>
    Applies an emboss effect in grayscale.
</summary>
            <param name="embossLevel">
    The level of the emboss effect.
    Range: 0.0 - 1.0
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateMilkyFilter">
            <summary>
Applies a "milky" surface effect to the image.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateBlurFilter(System.Int32)">
            <summary>
Blur filter. Applies blur effect to the image.
</summary>
            <param name="exactLevel">
   The blur effect level. This corresponds closely to the kernel size of the
   BlurLevel enum. Zero of negative values will return an error code.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateBlurFilter(Windows.Foundation.Rect,Nokia.Graphics.Imaging.BlurRegionMode,System.Int32)">
            <summary>
Blur filter. Applies blur effect to the image.
</summary>
            <param name="region">
A Rect specifying the effective region to
blur within the image, given in current coordinates.
The blur is applied to the entire image if the width and/or height value is zero
(independent of the position).
The coordinates given will correspond to the upper-left corner of the blur region.
</param>
            <param name="mode">
Set the region mode of the blur effect. Can be any of the values from
BlurRegionMode enumeration.
</param>
            <param name="exactLevel">
   The blur effect level. This corresponds closely to the kernel size of the
   BlurLevel enum. Zero of negative values will return an error code.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateBlurFilter(Windows.Foundation.Rect,Nokia.Graphics.Imaging.BlurRegionMode,Nokia.Graphics.Imaging.BlurLevel)">
            <summary>
Blur filter. Applies blur effect to the image.
</summary>
            <param name="region">
A Rect specifying the effective region to
blur within the image, given in current coordinates.
The blur is applied to the entire image if the width and/or height value is zero
(independent of the position).
The coordinates given will correspond to the upper-left corner of the blur region.
</param>
            <param name="mode">
Set the region mode of the blur effect. Can be any of the values from
BlurRegionMode enumeration.
</param>
            <param name="level">
The blur effect level. Can be any of the values from the BlurLevel
enumeration.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateBlurFilter(Nokia.Graphics.Imaging.BlurLevel)">
            <summary>
Blur filter. Applies blur effect to the image.
</summary>
            <param name="level">
The blur effect level. Can be any of the values from the BlurLevel
enumeration.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateCurvesFilter(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
Creates filter with specified lookup tables. Each table must be 256 bytes in size.
If some of the tables should not be updated then size of that table should be NULL.
Lookup tables can be generated by using CurveGenerator.
</summary>
            <param name="r">
Color lookup tables for R channel.
</param>
            <param name="g">
Color lookup tables for G channel.
</param>
            <param name="b">
Color lookup tables for B channel.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateColorSwapFilter(Windows.UI.Color,Windows.UI.Color,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
Adjusts the parameters of the Color-swap filter.
</summary>
            <param name="srcColor">
Parameter that specifies which color that should be converted.
</param>
            <param name="swapColor">
Parameter that specifies which color srcColor should be converted to.
</param>
            <param name="colorDistance">
Specifies the tolerance level of the effect. If the colorDistance is
small, only a small variation around the color defined with srcColor
will be converted to swapColor. Must be in the range 0 &lt; colorDistance
&lt;=255.
</param>
            <param name="doMonoColor">
Specifies if the other colors should be converted to grayscale or be
preserved.
</param>
            <param name="swapLuminance">
Parameter to control if the luminance should be included in the color swap.
If swapLuminance is set to false only the color components will be swapped,
not the luminance.
If swapLuminance is set to true the source color and the range specified
with colorDistance will be transformed exact the color specified with
swapColor. Recommended value for best photorealistic results is to set
swapLuminance to false.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateSplitToneFilter(Nokia.Graphics.Imaging.SplitToneRange[])">
            <summary>
Sets one, or more, luminance ranges with specific colors for the SplitToning filter.
The SplitToning effect applies a given color to pixels with luminance values within an
interval specified by a SplitToneRange struct. Several different intervals may be
specified, each with a different color associated to it.
Typical usage is to define a shadow luminance range, and a highlight luminance
range, with different colors applied to each range.
</summary>
            <param name="splitToneRanges">
Array of SplitToneRanges
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateLomoFilter(System.Double,System.Double,Nokia.Graphics.Imaging.LomoVignetting,Nokia.Graphics.Imaging.LomoStyle)">
            <summary>
Applies lomo effect on the current editingSession image.
</summary>
            <param name="brightness">
Adjust the brightness of the image. Range (0.0) - (1.0), where 0.0 gives a bright image and 1.0 a dark image.
</param>
            <param name="saturation">
Adjust the color saturation of the image. Range (0.0) - (1.0), where 0.0 implies no saturation.
</param>
            <param name="vignetting">
Adjust the vignetting level.
</param>
            <param name="style">
Change color style
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateColorizationFilter(System.Byte,System.Byte,System.Byte,System.Int16,System.Int16)">
            <summary>
Colorization filter. Adjusts color tone and luminance/chrominance levels.
Adds a single color to an image.
</summary>
            <param name="r">
Red component of reference color. Range: 0-255
</param>
            <param name="g">
Green component of reference color. Range: 0-255
</param>
            <param name="b">
Blue component of reference color. Range: 0-255
</param>
            <param name="luminance">
Strength of luminance. Range: (-100)-(200)
</param>
            <param name="chrominance">
Strength of chrominance. Range: (-100)-(200)
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateColorAdjustFilter(System.Double,System.Double,System.Double)">
            <summary>
Color adjust filter. Adjusts the RGB color composition of the current editingSession image.
</summary>
            <param name="r">
Red channel adjustment. Range (-1.0) - (1.0).
</param>
            <param name="g">
Green channel adjustment. Range (-1.0) - (1.0).
</param>
            <param name="b">
Blue channel adjustment. Range (-1.0) - (1.0).
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateImageFusionFilter(Windows.Storage.Streams.IBuffer,Windows.Storage.Streams.IBuffer,System.Boolean)">
            <summary>
Inserts an image on the current image with a separately defined alpha mask.
</summary>
            <param name="fusionImagebuffer">
Buffer containing the image to be merged with the current image
The following input formats are supported for the image:
 JPEG, PNG, GIF, BMP, WBMP and TIFF
</param>
            <param name="maskImagebuffer">
Buffer containing the alpha mask.
The following input formats are supported for the image:
 JPEG, PNG, GIF, BMP, WBMP and TIFF
</param>
            <param name="invertAlpha">
   If this is false, 0 - 255 is fading from the editingSession image to the frame provided
   If this is true,  0 - 255 is fading from the provided frame to editingSession image
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateImageFusionFilter(Nokia.Graphics.Bitmap,Nokia.Graphics.Bitmap,System.Boolean)">
            <summary>
Inserts an image on the current image with a separately defined alpha mask.
</summary>
            <param name="fusionImage">
An image to be merged with the current image. The following color modes are supported for the image:
Argb8888, Bgra8888, Rgb565, Ayuv4444
</param>
            <param name="maskImage">
A raw image containing the alpha mask. The mask is assumed to be a gray
scale image. If the image is of a richer color format it will first
automatically be converted into gray scale and any alpha channel will 
be ignored.The following color modes are supported for the image:
 Argb8888, Bgra8888, Rgb565, Ayuv4444 and Gray8
</param>
            <param name="invertAlpha">
   If this is false, 0 - 255 is fading from the editingSession image to the frame provided
   If this is true,  0 - 255 is fading from the provided frame to editingSession image
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateFrameFilter(Nokia.Graphics.Bitmap)">
            <summary>
Image frame filter. Overlays the existing image with a transparent frame/image.
</summary>
            <param name="frameImage">
The frame image. The image is streched or contracted to fit the size of the editingSession image.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateWatercolorFilter(System.Double,System.Double)">
            <summary>
Image water color filter. Applies water color filter to image.
</summary>
            <param name="light">
Specifies light intensity. Range (0.0) - (1.0).
</param>
            <param name="color">
Specifies color intensity. Range (0.0) - (1.0).
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateVignettingFilter(System.Double,Windows.UI.Color)">
            <summary>
Image vignetting filter. Applies vignetting effect to the image.
Vignetting applied on entire image
</summary>
            <param name="transitionSize">
The size of the transition region given in fraction of the radius.
Allowed range: [0.0, 15.0]
Recommended range: [0.0, 1.0]
</param>
            <param name="color">
The color to use for the vignetting effect.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateVignettingFilter(Windows.Foundation.Rect,System.Double,Windows.UI.Color)">
            <summary>
Image vignetting filter. Applies vignetting effect to the image.
</summary>
            <param name="region">
                <para>A Rect defining where the vignetting should be applied. The transition area
will start outside the ellipse that can be inscribed inside this region.
The Rect::x and Rect::y members specifies the offset in pixels of
the region's top left corner, seen from the top left corner of the image.
The Rect::w and Rect::h members specifies the size of the region in
pixels. Coordinates should be given using current coordinates.</para>
                <para>The region has the following restrictions:</para>
                <para>region.x and region.y must be located inside the image</para>
                <para>region.h &gt;= 10% of the image height</para>
                <para>region.h &lt; 131070/(transitionSize + 1)</para>
                <para>region.w &gt;= 10% of image width</para>
                <para>region.w &lt;= 20 * region.h</para>
                <para>region.w &lt; 131070/(transitionSize + 1)</para>
            </param>
            <param name="transitionSize">
The size of the transition region given in fraction of the radius.
Range: [0.0, 15.0]
</param>
            <param name="color">
The color to use for the vignetting effect.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateMagicPenFilter">
            <summary>
Magic pen filter. Applies a mix of edge distinction and color manipulation of the image.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateCartoonFilter(System.Boolean)">
            <summary>
Image cartoon filter. Transforms image to typical cartoon graphic style.
</summary>
            <param name="distinctEdges">
If set to true all detected edges in the image are rendered
distinctively, if false edges are ignored.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateMonoColorFilter(Windows.UI.Color,System.UInt32)">
            <summary>
Image mono color filter. Preserves one color tone while other colors
are converted to grayscale.
</summary>
            <param name="preserveColor">Specifies color that will be preserved</param>
            <param name="colorDistance">
Specifies the tolerance level of the effect. If the colorDistance is
small, only a small variation around the color defined with preserveColor
will be preserved. Must be in the range 1 - 255.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateDespeckleFilter(Nokia.Graphics.Imaging.DespeckleLevel)">
            <summary>
Image despeckle filter. Applies a despeckle effect.
</summary>
            <param name="despeckle">Despeckle level</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateSpotlightFilter(Windows.Foundation.Point,System.UInt32,System.Double)">
            <summary>
Image spotlight filter. Applies a spotlight effect.
</summary>
            <param name="position">Value specifying the center of spotlight circle.</param>
            <param name="radius">
The radius of the spotlight circle in pixels. Current coordinates.
Range: [ 0, 64511 ].
</param>
            <param name="transitionSize">
The size of the transition region given in fraction of the radius.
Range: [ 0.0, 1.0 ].
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateMoonlightFilter(System.Int32)">
            <summary>
Image moonlight filter. Applies a moonlight effect.
</summary>
            <param name="clock">Time of night in clock (1~24) affect only at night time (17~7).</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateStampFilter(System.UInt32,System.UInt32)">
            <summary>
Image stamp filter. Applies a stamp effect. Result is black and white image.
</summary>
            <param name="smoothness">Smoothness level. Range 0-6</param>
            <param name="threshold">Treshold level. Range 0-255</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateSketchFilter(Nokia.Graphics.Imaging.SketchMode)">
            <summary>
Image sketch filter. Produces a look of sketched image.
</summary>
            <param name="sketch">Sketch mode, grey or color.</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateOilyFilter">
            <summary>
Image oily filter. Produces a look of an oil painting image.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateAntiqueFilter">
            <summary>
Image antique filter. Produces a look of an old color photo.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreatePaintFilter(System.UInt32)">
            <summary>
Image paint filter. Applies paint filter to the image.
</summary>
            <param name="paintLevel">Paint effect level. Range 1-4.</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateFogFilter">
            <summary>
Image fog filter. Applies a fog effect.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateNegativeFilter">
            <summary>
Image negative filter. Converts image to negative.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateGrayscaleNegativeFilter">
            <summary>
Image grayscale negative filter. Converts image to grayscale negative.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateGrayscaleFilter">
            <summary>
Image grayscale filter. Converts image to grayscale.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateSepiaFilter">
            <summary>
Image sepia filter. Applies sepia tone to the image.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateContrastFilter(System.Double)">
            <summary>
Image contrast adjustment. 
</summary>
            <param name="contrastLevel">
Contrast level. Range (-1.0) - (1.0), where values below
zero decreases contrast and above zero increases it.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateFreeRotationFilter(System.Double,Nokia.Graphics.Imaging.RotationResizeMode)">
            <summary>
Image rotation operation in arbitrary angle steps between 0.0 and 360.0 degrees.
</summary>
            <param name="rotationAngle">Free rotation angle</param>
            <param name="rotationMode">Rotation scale mode</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateSharpnessFilter(Nokia.Graphics.Imaging.SharpnessLevel)">
            <summary>
Image sharpness operation.
</summary>
            <param name="sharpness">Sharpness level</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateStepRotationFilter(Nokia.Graphics.Imaging.Rotation)">
            <summary>
Image rotation operation to 0, 90, 180 or 360 degrees clockwise.
</summary>
            <param name="rotation">Step rotation degree</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateFlipFilter(Nokia.Graphics.Imaging.FlipMode)">
            <summary>
Image flip operation.
</summary>
            <param name="flip">Flip mode, around horizontal, vertical or both axes</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateCropFilter(Windows.Foundation.Rect)">
            <summary>
Image crop.
</summary>
            <param name="imageCrop">Rectangle describing the crop of the source</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateHueSaturationFilter(System.UInt32,System.UInt32)">
            <summary>
Image hue saturation filter.
</summary>
            <param name="hue">Hue modification level. Range 0-255 where 128 implies no adjustment</param>
            <param name="saturation">
Saturation modification level. Range 0-255 where 128 implies no adjustment
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateBrightnessFilter(System.Double)">
            <summary>
Image brightness filter.
</summary>
            <param name="brightness">
Image brightness level. 
Range (-1.0) - (1.0), where 0.0 implies no adjustment.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateWhiteboardEnhancementFilter(System.Boolean)">
            <summary>
   Effect should enhance text and drawings on an image of a whiteboard.
</summary>
            <param name="soft">
   If true, the effect will better preserve the colors on the whiteboard.
   If false, the image contrast will be enhanced and text should be easier
   to read.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateTemperatureAndTintFilter(System.Int32,System.Int32)">
            <summary>
Temperature and tint filter. Changes color temperature and tint.
</summary>
            <param name="temperatureIndex">
Color temperature index.
Range [-100, 100], where 0 is default, unmodified color temperature.
</param>
            <param name="tintIndex">
Color tint index.
Range [-100, 100], where 0 is the default, unmodified color tint. 
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateAutoEnhanceFilter(Nokia.Graphics.Imaging.AutoEnhanceConfiguration)">
            <summary>
Auto enhance filter. Specifies the desired behaviour of the image enhancement.
The following effects can be applied: White balance, Contrast and Local boost
</summary>
            <param name="configuration">
Auto enhance configuration object. See <see cref="T:Nokia.Graphics.Imaging.AutoEnhanceConfiguration" /> for detailed description.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateExposureFilter(Nokia.Graphics.Imaging.ExposureMode,System.Double)">
            <summary>
Adjust the brightness of an image using one of the modes in ExposureMode.
Use gamma as default mode.
</summary>
            <param name="mode">
The exposure mode to be used.
</param>
            <param name="gain">
The desired exposure level. Positive values will make the image
brighter, negative values will make it darker.
The exposure level. Range is [ -1.0, 1.5 ], but for gamma mode the 
effect saturates at 1.0, which means that everything between ]1.0, 1.5]
will be intrepreted as 1.0. 
0.0 equals no change of exposure. Recommended range for both gamma and 
natural mode for normal usage is [ -1.0, 1.0 ].
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateAutoLevelsFilter">
            <summary>
Auto level adjustment balances the intensity level of the image, for
example making dark images lighter and vice versa.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateLevelsFilter(System.Double,System.Double,System.Double)">
            <summary>
Applies level adjustment to the current editingSession image.
</summary>
            <param name="white">
The position of the bright saturating point. Range (0.0) - (1.0).
</param>
            <param name="gray">
The relative position of the middle gray point. Range (0.0) - (1.0),
where 0.0 is at the bright saturating point and 1.0 is at
the dark saturating point.
</param>
            <param name="black">
The position of the dark saturating point. Range (0.0) - (1.0).
The value of 'black' should be smaller than, or equal to the value of 'white'.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateWhiteBalanceFilter(Nokia.Graphics.Imaging.WhiteBalanceMode,System.Byte,System.Byte,System.Byte)">
            <summary>
Performs white balance adjustment on an image.
</summary>
            <param name="mode">
The white balance mode, can be any of the values from the WhiteBalanceMode
enumeration. Cluster is prefered as default.
</param>
            <param name="r">
Red component of the white color used for reference 
This requires that the mode is set to Manual, neglected otherwise.
</param>
            <param name="g">
Green component of the white color used for reference 
This requires that the mode is set to Manual, neglected otherwise.
</param>
            <param name="b">
Blue component of the white color used for reference 
This requires that the mode is set to Manual, neglected otherwise.
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateColorBoostFilter(System.Double)">
            <summary>
Amplifies the colors of the current editingSession image.
</summary>
            <param name="gain">
The color boost gain level. Range [-1.0, 20.0]. Negative values reduce the 
colors. Recommended values are in the range [-1.0, 1.0].
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateLocalBoostFilter(System.Int32)">
            <summary>
Automatically boost and enhance images with unequal illumination.</summary>
            <remarks>The image is analyzed and segmented into a dark part and a light part.
The two parts are processed separatly and are finally blended together to produce a
modified image.
autoLevel parameter maps the manual parameters in a range [0-14].
</remarks>
            <param name="autoLevel">
Range: [0 &lt;= autoLevel &lt;= 14]
Recommended default value: 8
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateLocalBoostFilter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Manually boost and enhance images with unequal illumination.</summary>
            <remarks>The image is analyzed and segmented into a dark part and a light part.
The two parts are processed separatly and are finally blended together to produce a
modified image.
</remarks>
            <param name="gamma">
Gamma correction for the dark part of the image.
Range: [0.1 &lt;= gamma &lt; 5.0]
Recommended value: 1.9
</param>
            <param name="darkContrast">
Contrast amplification of the dark part.
Range: [0.5 &lt;= darkContrast &lt; 1.0]
Recommended value: 0.625
</param>
            <param name="lightContrast">
Contrast amplification of the light part.
Range: [0.5 &lt;= lightContrast &lt; 1.0]
Recommended value: 0.5
</param>
            <param name="sensitivityLevel">
Specifies how much of the processed image that will be blended in the original image.
If sensitivityLevel equals 0, the result will be 100% of the orignal 
image and 0% of the processed image.
If sensitivityLevel equals 256, the result will be 0% of the original 
image and 100% of the processed image.
Range: [0.0 &lt;= sensitivityLevel &lt;= 256.0]
Recommended value: 256.0
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateFoundationFilter">
            <summary>
Applies a foundation effect on the entire current editingSession image.
</summary>
            <returns>The created filter instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterFactory.CreateFoundationFilter(Windows.Foundation.Rect)">
            <summary>
Applies a foundation effect on the region in current editingSession image.
</summary>
            <param name="region">
The region in which the effect is applied, for instance a face, given in current coordinates. 
</param>
            <returns>The created filter instance.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FilterFactory">
            <summary>
Contains artistic filters and filters that enhance image by modifying brightness, colors, color temperature, image exposure 
and other attributes.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BlendFunction">
            <summary>
Defines the blend function to use when blending.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LomoStyle">
            <summary>
Defines the color styles to use with the lomo filter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LomoVignetting">
            <summary>
Defines the vignetting impact levels to use with the lomo filter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DespeckleLevel">
            <summary>
Enum describing despeckle level. 
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SketchMode">
            <summary>
Enum describing image sketch mode - to sketch image in gray or in color. 
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.RotationResizeMode">
            <summary>
Enum describing image rotation resizing behavior. The image can be resized to fit within
the original image dimensions during rotation, or it could go over the dimension border.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.RotationResizeMode.FitOutside">
            <summary>Resize the rotated image so that the original image dimensions fit inside the rotated image.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.RotationResizeMode.FitInside">
            <summary>Resize the rotated image so that it fits inside the original image dimensions.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.RotationResizeMode.Ignore">
            <summary>Do not  resize while rotating</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BlurRegionMode">
            <summary>
Defines the way the blur region is interpreted.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlurRegionMode.BlurRegionCircular">
            <summary>The region is an ellipse fitted into a rectangle.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlurRegionMode.BlurRegionRectangular">
            <summary>The region is a rectangle.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BlurLevel">
            <summary>
Enum describing the blur levels for the blur filter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.NoiseLevel">
            <summary>
Possible 'Noise' settings.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WarpEffect">
            <summary>
Warp effects
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SharpnessLevel">
            <summary>
Enum describing sharpness levels for image sharpness filter. There are 8 sharpness levels. 
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Rotation">
            <summary>
Enum describing stepwise roation. Stepwise rotation can be done to 0, 90, 180 and 270 degrees 
clockwise.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.RotateTo270">
            <summary>Rotates the image to 270 degrees clockwise.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.RotateTo180">
            <summary>Rotates the image to 180 degrees clockwise.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.RotateTo90">
            <summary>Rotates the image to 90 degrees clockwise.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.RotateTo0">
            <summary>Rotates the image to zero degrees clockwise.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FlipMode">
            <summary>
Enum describing image flip mode. Flip can be done around horizontal and vertical
axes as well as around both axes at once.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.Both">
            <summary>Flip the image vertically and horizontally</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.Horizontal">
            <summary>Flip the image horizontally</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.Vertical">
            <summary>Flip the image vertically</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.None">
            <summary>Do not flip the image</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ExposureMode">
            <summary>
Defines the exposure modes to use with the exposure filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ExposureMode.Natural">
            <summary>
Adjust the brightness of an image using a "natural" curve inspired
by a film characteristic curve. This mode preserves
the blacks in an image much better than the gamma mode.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ExposureMode.Gamma">
            <summary>Adjust the brightness of an image using a gamma correction curve.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WhiteBalanceMode">
            <summary>
Defines the white balance modes to use with the white balance filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteBalanceMode.Cluster">
            <summary>Calulates the reference from the mean value of the 256-bin distribution.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteBalanceMode.Manual">
            <summary> Uses a white reference color.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteBalanceMode.Max">
            <summary> Uses the estimated maximum intensity color.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteBalanceMode.Mean">
            <summary> Uses the estimated mean gray for the color correction.</summary>
        </member>
        <member name="M:caps_endWhiteboardEnhancement(cips*)">
    @brief

    @param[in] session
    Handle to a valid session.

    @since 3.8 R4

</member>
        <member name="M:caps_setWhiteboardEnhancement(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Effect should enhance text and drawings on an image of a whiteboard.

    @param[in] session
    Handle to a valid session.

    @param[in] soft
    If true, the effect will better preserve the colors on the whiteboard.
    If false, the image contrast will be enhanced and text should be easier
    to read.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

</member>
        <member name="M:caps_beginWhiteboardEnhancement(cips*)">
@} 
@addtogroup fxgroup_whiteboard
@copydoc begin_end_effects
@{

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

</member>
        <member name="M:caps_endNoiseReduction(cips*)">
    @brief
    End noise reduction on the current session image.

    @param[in] session
    Handle to a valid session.

    @since 3.8 R4

    @deprecated This function is deprecated since 5.3.
    Use noisereduction2 instead.

</member>
        <member name="M:caps_setNoiseReduction(cips*,System.Single)">
    @brief
    Applies noise reduction on the current session image.

    @param[in] session
    Handle to a valid session.

    @param[in] level
    The noise reduction adjustment level. Range 0.0 - 1.0, where 0.0 indicates 
    low noise reduction and 1.0 indicates high noise reduction.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

    @deprecated This function is deprecated since 5.3.
    Use noisereduction2 instead.

</member>
        <member name="M:caps_beginNoiseReduction(cips*)">
@} 
@addtogroup fxgroup_noisereduction
@copydoc begin_end_effects
@{

    @brief
    Begin noise reduction on current session image.

    <b>Note</b> This function and @a NoiseReduction2 uses different
    algorithms.

    @param[in] session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

    @deprecated This function is deprecated since 5.3.
    Use noisereduction2 instead.

</member>
        <member name="M:caps_applyFoundation(cips*,CTRect*)">
@ingroup fm_imageenhance
@file fm_imageenhance.h
@brief Defines interfaces for the Caps Feature Module: @a ImageEnhance

@addtogroup fm_imageenhance
@brief Enhancement effects

@addtogroup fxgroup_foundation
@{

    @brief
    Applies a foundation effect on the current session image.

    @param[in] session
    Handle to a valid session.

    @param[in] pRegion
    (OPTIONAL) Pointer to a @c CTRect object specify a region in which the 
    effect is applied, for instance a face, given in current coordinates. 
    Set this argument to @c NULL if the effect should be applied to the 
    entire image.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

    @deprecated This function is deprecated since 5.3.
    Use @ref fm_facebeautification instead.

</member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.Blue">
            <summary>
Defines the Blue component of the RGB color to be set for the luminance
</summary>
            <remarks>
Allowed range is [ luminanceLowValue, luminanceHighValue ].
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.Green">
            <summary>
Defines the Green component of the RGB color to be set for the luminance
</summary>
            <remarks>
Allowed range is [ luminanceLowValue, luminanceHighValue ].
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.Red">
            <summary>
Defines the Red component of the RGB color to be set for the luminance
</summary>
            <remarks>
Allowed range is [ luminanceLowValue, luminanceHighValue ].
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.LuminanceHigh">
            <summary>
Defines the higher luminance value.
</summary>
            <remarks>
Allowed range is [ 0, 255 ]. Must be higher than luminanceLowValue.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.LuminanceLow">
            <summary>
Defines the lower luminance value.
</summary>
            <remarks>
Allowed range is [ 0, 255 ]. Must be lower than luminanceHighValue.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SplitToneRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Creates a new SplitToneRange object
</summary>
            <param name="luminanceLow">
Defines the lower luminance value.
Allowed range is [ 0, 255 ]. Must be lower than luminanceHighValue.
</param>
            <param name="luminanceHigh">
Defines the higher luminance value.
Allowed range is [ 0, 255 ]. Must be higher than luminanceLowValue.
</param>
            <param name="red">
Defines the R value of the RGB color to be set for the luminance
Allowed range is [ luminanceLowValue, luminanceHighValue ].
</param>
            <param name="green">
Defines the G value of the RGB color to be set for the luminance
Allowed range is [ luminanceLowValue, luminanceHighValue ].
</param>
            <param name="blue">
Defines the B value of the RGB color to be set for the luminance
Allowed range is [ luminanceLowValue, luminanceHighValue ].
</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SplitToneRange">
            <summary>
Defines a luminance range and the color to be applied by the split tone filter.
</summary>
        </member>
        <member name="M:caps_insertImageFromRawMask(cips*,CTImage*,OWNERSHIP_POLICY,CTImage*,OWNERSHIP_POLICY,System.UInt32!System.Runtime.CompilerServices.IsLong)">
	@brief
	Inserts a raw image on the current session with a separately defined alpha
	mask.

	@param session
	Handle to a valid session.

	@param pImage
	A raw image

	@param imageOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pImage argument. If CAPS is given
	ownership responsibility over @a pImage, it will be destroyed using
	caps_destroyImage() when no longer needed.

	@param pMask
	A raw image containing the alpha mask. The mask is assumed to be a gray
    scale image. If the image is of a richer color format it will first
    automatically be converted into gray scale and any alpha channel will 
    be ignored.

	@param maskOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pMask argument. If CAPS is given
	ownership responsibility over @a pMask, it will be destroyed using
	caps_destroyImage() when no longer needed.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

	@remarks

	@note
	The supported color modes are different from caps_insertFrameFromRaw.

	The following color modes are supported for the image:

	@li @c  CM_ARGB8888
	@li @c  CM_BGRA8888
	@li @c  CM_RGB565
	@li @c  CM_BGR565
	@li @c  CM_AYUV4444

	The following color modes are supported for the mask:

	@li @c  CM_GRAY8
    @li @c  CM_ARGB8888
	@li @c  CM_BGRA8888
	@li @c  CM_RGB565
	@li @c  CM_BGR565
	
	@return 
	@c CERR_OK if successful or a specific error code upon failure.

	@sa
	caps_insertFrameFromRaw()\n

	@since 3.6 (support for different sizes in 3.8)

</member>
        <member name="M:caps_insertFrameFromBufferMask(cips*,CTBuffer*,OWNERSHIP_POLICY,CTBuffer*,OWNERSHIP_POLICY,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
	Inserts a frame on the current session with a separately defined alpha
	mask.

	@param session
	Handle to a valid session.

	@param pImage
	Buffer containing the image.

	@param imageOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pImage argument. If CAPS is given
	ownership responsibility over @a pImage, it will be destroyed using
	caps_destroyBuffer() when no longer needed.

	@param pMask
	Buffer containing the alpha mask. The luminance
	channel of the mask image is used as the frame's alpha channel.

	@param maskOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pMask argument. If CAPS is given
	ownership responsibility over @a pMask, it will be destroyed using
	caps_destroyBuffer() when no longer needed.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

	@remarks

	A frame is an overlay image stretched or contracted to fit the size of the
	session image. The blending of the frame and the session image is
	defined by an alpha mask. The image and the alpha mask are stretched
	separately, and may have different dimensions.

	The following image types are supported for the image:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	\n
	The following image types are supported for the mask:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	\n
	The mask is typically a gray scale image.

	@return 
	@c CERR_OK if successful or a specific error code upon failure.

	@sa
	caps_insertFrameFileMask()\n
	caps_insertFrameFromBuffer()\n

	@since 3.6 (support for more image types in 3.8)

    @deprecated This function is deprecated since 5.3.
    Use caps_insertImageFromRawMask() instead.

</member>
        <member name="M:caps_insertFrameFromFileMask(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Inserts a frame on the current session with a separately defined alpha
    mask.

    @param session
    Handle to a valid session.

    @param imagename
    String specifying the file system path of the image.

    @param maskname
    String specifying the file system path of the alpha mask. The luminance
    channel of the mask image is used as the frame's alpha channel.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image. The blending of the frame and the session image is
    defined by an alpha mask. The image and the alpha mask are stretched
    separately, and may have different dimensions.

    The following image types are supported for the image:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The following image types are supported for the mask:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The mask is typically a gray scale image.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameMask()\n
    caps_insertFrameFromBufferMask()\n
    caps_insertFrameFromFile()\n

    @since 3.6 (support for more image types in 3.8)

    @deprecated This function is deprecated since 5.3.
    Use caps_insertImageFromRawMask() instead.

</member>
        <member name="M:caps_insertFrameMask(cips*,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,OWNERSHIP_POLICY,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,OWNERSHIP_POLICY,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@ingroup fm_imagefusion
@file fm_imagefusion.h
@brief Defines the interface of the Caps Feature Module: @a ImageFusion

    @addtogroup fm_imagefusion
    @brief Blending image pairs using defined masks.

    @{

@defgroup fm_imagefusion_api ImageFusion API
@{

    @brief
    Inserts a frame on the current session with a separately defined alpha
    mask.

    @param session
    Handle to a valid session.

    @param pImageStream
    A pointer to a stream containing an image.

    @param imageFormat
    The image format of the image.

    @param imageOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pImageStream argument. If CAPS is given
    ownership responsibility over @a pImageStream, it will be destroyed using
    ctstream_destroy() when no longer needed.

    @param pMaskStream
    A pointer to a stream containing a mask.

    @param maskFormat
    The image format of the mask.

    @param maskOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pMaskStream argument. If CAPS is given
    ownership responsibility over @a pMaskStream, it will be destroyed using
    ctstream_destroy() when no longer needed.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image. The blending of the frame and the session image is
    defined by an alpha mask. The image and the alpha mask are stretched
    separately, and may have different dimensions.

    The following image types are supported for the image:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The following image types are supported for the mask:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The mask is typically a gray scale image.


    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFromBufferMask()\n
    caps_insertFrameFromFileMask()\n

    @since 3.8

    @deprecated This function is deprecated since 5.3.
    Use caps_insertImageFromRawMask() instead.

</member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ToString">
            <summary>
  Returns a string that represents the current object.
</summary>
            <returns>
  A string that represents the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyWhiteBalanceOff">
            <summary>
  Do not apply white balance.
</summary>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyWhiteBalance(Windows.UI.Color,Windows.UI.Color)">
            <summary>
  Apply white balance using the specified target and source white points.
</summary>
            <param name="targetWhitePoint">
  The desired target white point. The luminance of the provided color
  is ignored, only the chrominance information is used. 
</param>
            <param name="sourceWhitePoint">
  The source white point.
  The luminance of the provided color is ignored, only the chrominance
  information is used.
</param>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyWhiteBalance(Windows.UI.Color)">
            <summary>
  Apply white balance using the specified target white point while 
  trying to find the white point in the source image.
</summary>
            <param name="targetWhitePoint">
  The desired target white point. The luminance of the provided color
  is ignored, only the chrominance information is used. 
</param>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyLocalBoostOff">
            <summary>
  Do not apply local boost.
</summary>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyLocalBoost(System.Double,System.Double,System.Double,System.Double)">
            <summary>
  Apply local boost using the specified gamma, darkContrast, lightContrast and
  sensitivityLevel values.
</summary>
            <param name="gamma">
  The gamma correction applied to the dark areas in the image.
  Values greater than 1.0 gives a logarithmic response and will make
  these parts brighter. Values less than 1.0 gives an exponential
  response and will make these parts darker.
  gamma should be in the range [0.01, 10.0].
</param>
            <param name="darkContrast">
  Contrast applied to the dark areas in the image.
  Values greater than 0.5 will increase the contrast. Values less
  than 0.5 will decrease the contrast. darkContrast should be
  in the range [0.0, 0.99].
</param>
            <param name="lightContrast">
  Contrast applied to the bright areas in the image. Values greater
  than 0.5 will increase the contrast. Values less than 0.5 will
  decrease the contrast.
  lightContrast should be in the range [0.0, 0.99].
</param>
            <param name="sensitivityLevel">
  The amount of boost to apply. sensitivityLevel should be in
  the range [0.0 1.0] where 0.0 is no effect and 1.0 is
  full local boost. 
</param>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyAutomaticLocalBoost">
            <summary>
  Apply local boost, try to estimate the needed amount of boost
  and automatically set gamma, darkContrast, lightContrast and
  sensitivityLevel.
</summary>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyContrastAndBrightnessOff">
            <summary>
  Do not apply contrast and brightness.
</summary>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyContrastAndBrightness(System.Double,System.Double)">
            <summary>
  Apply contrast and brightness.
</summary>
            <param name="contrast">
  Values greater than 0 will increase the contrast,
  values less than 0 will decrease the contrast.
  Must be in the range [-1.0, 1.0].
</param>
            <param name="brightness">
  Values greater than 0 will make the image brighter,
  values less than 0 will make the image darker.
  Must be in the range [-1.0, 1.0].
</param>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.ApplyAutomaticContrastAndBrightness">
            <summary>
  Apply an automatic contrast and brightness enhancement.
</summary>
            <returns>
  A handle to the current object.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceConfiguration.#ctor">
            <summary>
  Creates a new configuration object for the AutoEnhance filter. 
</summary>
            <remarks>
  The created object will apply automatic contrast, brightness and local boost,
  and will not apply white balance.
</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AutoEnhanceConfiguration">
            <summary>
  Configuration settings for the AutoEnhance filter.
</summary>
        </member>
        <member name="M:caps_endTemperatureAndTint(cips*)">
    @brief
    End temperature and tint effect.

	@param session  Handle to a valid session.

    @since 3.9.2

</member>
        <member name="M:caps_setTemperatureAndTint(cips*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Set function to modify the color temperature and tint.

	@param session Handle to a valid session.

	@param temperatureIndex Color temperature index.
		Range [-100, 100], where 0 is default, unmodified color temperature.

	@param tintIndex Color tint index.
		Range [-100, 100], where 0 is the default, unmodified color tint. 

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


    @since 3.9.2

</member>
        <member name="M:caps_beginTemperatureAndTint(cips*)">
@} 
@defgroup fxgroup_temperatre_and_tint Temperature And Tint 
@{

    @brief Begin the Temperature and Tint effect.

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.9.2

</member>
        <member name="M:caps_endAutoEnhance(cips*)">
    @brief
    Ends an enhancement block on the current session image.

    @param session
    Handle to a valid session.

    @since 3.6

</member>
        <member name="M:caps_setAutoEnhance(cips*,AutoEnhanceParameters!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Specifies the desired behaviour of the image enhancement.
    
    The following effects can be applied:
    - White balance
    - Contrast
    - Local boost
    .

    If more than one effect is set, they will be applied in the given order.

    The behaviour can be fully automatic, semi automatic or manual. It is
    possible to start with full automatic and switch over to semi automatic
    or manual. For a small example of this see caps_getAutoEnhance(). It is
    of course possible to switch back to fully automatic again if desired.

    @note In order to take effect, a render operation must be completed;
    see for example caps_render().

    @param session
    Handle to a valid session.

    @param parameters
    A pointer to a structure defining the desired behaviour.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_beginAutoEnhance(cips*)">
    @brief
    Starts an enhancement block on the current session image.

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_endExposure(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.4

</member>
        <member name="M:caps_setExposureMode(cips*,CAPS_EXPOSURE_MODE)">
    @brief
    Select which exposure mode to be used, @c ::CAPS_EXPOSURE_MODE.
    Default mode is EXPOSURE_GAMMA_MODE.
 
    @param session
    Handle to a valid session.
 
    @param mode
    The exposure mode.
 
    @return 
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 3.9 R01

</member>
        <member name="M:caps_setExposure(cips*,System.Single)">
    @brief
    Set the desired exposure level. Positive values will make the image
    brighter, negative values will make it darker.

    @param session
    Handle to a valid session.

    @param gain
    The exposure level. Range is [ -1.0, 1.5 ], but for gamma mode the 
    effect saturates at 1.0, which means that everything between ]1.0, 1.5]
    will be intrepreted as 1.0. 
    0.0 equals no change of exposure. Recommended range for both gamma and 
    natural mode for normal usage is [ -1.0, 1.0 ].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_beginExposure(cips*)">
    @brief
    Adjust the brightness of an image using one of the modes in
    @c ::CAPS_EXPOSURE_MODE. The default mode is EXPOSURE_GAMMA_MODE.

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="F:EXPOSURE_NATURAL_MODE">
@brief
        Adjust the brightness of an image using a "natural" curve inspired
        by a @em film @em characteristic @em curve. This mode preserves
        the blacks in an image much better than the gamma mode. 
</member>
        <member name="F:EXPOSURE_GAMMA_MODE">
@brief
        Adjust the brightness of an image using a gamma correction curve. 
</member>
        <member name="M:caps_applyAutoLevels(cips*)">
    @brief
    Applies auto level adjustment to the current session image.
    
    @param session 
    A valid session handle.

    @remarks
    Auto level adjustment balances the intensity level of the image, for
    example making dark images lighter and vice versa.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endLevels(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.4

</member>
        <member name="M:caps_setLevels(cips*,System.Single,System.Single,System.Single)">
    @brief
    Applies level adjustment to the current session image.

    @param session
    Handle to a valid session.

    @param white
    The position of the bright saturating point. Range (0.0) - (1.0).

    @param gray
    The relative position of the middle gray point. Range (0.0) - (1.0),
    where 0.0 is at the bright saturating point and 1.0 is at
    the dark saturating point.

    @param black
    The position of the dark saturating point. Range (0.0) - (1.0).

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @remarks
    The value of 'black' should be smaller than, or equal to
    the value of 'white'.

    @since 3.4

</member>
        <member name="M:caps_beginLevels(cips*)">
@} 
@defgroup fxgroup_levels Levels 
@copydoc begin_end_effects
@{

    @brief

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_applyWhiteBalance(cips*,CAPS_WB_MODE,System.Byte,System.Byte,System.Byte)">
    @brief
    Performs white balance adjustment on an image.

    @param session 
    A valid session handle.   

    @param mode
    The white balance mode, can be any of the values from the @c ::CAPS_WB_MODE
    enumeration. WB_CLUSTER_MODE is prefered as default.

    @param r
    Red component of the white color used for reference 
    This requires that @c mode is set to @c WB_MANUAL_MODE, neglected otherwise.

    @param g
    Green component of the white color used for reference
    This requires that @c mode is set to @c WB_MANUAL_MODE, neglected otherwise.

    @param b
    Blue component of the white color used for reference
    This requires that @c mode is set to @c WB_MANUAL_MODE, neglected otherwise.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.


    @since 3.1

</member>
        <member name="F:WB_CLUSTER_MODE">
Calulates the reference from the mean value of the 256-bin distribution.
</member>
        <member name="F:WB_MANUAL_MODE">
Uses a white reference color.
</member>
        <member name="F:WB_MAX_MODE">
Uses the estimated maximum intensity color.
</member>
        <member name="F:WB_MEAN_MODE">
Uses the estimated mean gray for the color correction.
</member>
        <member name="M:caps_endColorBoost(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setColorBoost(cips*,System.Single)">
    @brief
    Amplifies the colors of the current session image.

    @param session
    Handle to a valid session.

    @param gain
    The color boost gain level. Range [-1.0, 20.0]. Negative values reduce the 
    colors. Recommended values are in the range [-1.0, 1.0].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginColorBoost(cips*)">
@} 
@defgroup fxgroup_color_boost Color Boost 
@copydoc begin_end_effects
@{

    @brief

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endLocalBoost(cips*)">
    @brief
    Ends the LocalBoost effect.

    @param session 
    A valid session handle.   

    @return 
    None

    @sa 
    caps_beginLocalBoost()\n
    caps_setLocalBoost()\n

    @since 3.6

</member>
        <member name="M:caps_beginLocalBoost(cips*)">
@ingroup fm_clearshot
@file fm_clearshot.h
@brief Defines the interface of the Caps Feature Module: @a ClearShot

@addtogroup fm_clearshot
@brief Image enhancing effects
@{

@defgroup fxgroup_local_boost Local Boost
@copydoc begin_end_effects
@{

    @brief
    Automatically boost and enhance images with unequal illumination.
    
    The image is analyzed and segmented into a dark part and a light part.
    The two parts are processed separatly with the parameters given in
    caps_setLocalBoost() and are finally blended together to produce a
    modified image.

    @param session
    A valid session handle.   

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @remarks
    This function should not be used together with the deprecated caps_applyLocalBoost().

    @sa 
    caps_setLocalBoost()\n
    caps_endLocalBoost()\n

    @since 3.6

</member>
        <member name="M:caps_uthGetProductIdentifier">
    @brief 
    Retrieves the product identifier.

    @return 
    The version as a static constant null-terminated string.

    @since 3.6.1

</member>
        <member name="M:caps_uthGetPanCacheStatus(CTScreen*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief 
    Get the status of the cached panning feature.

    @param screen
    A valid @c CTScreen.

    @param[out] status
    A CTbool parameter. If the cached pan feature is disabled, the
    returned status parameter is false. If the returned status
    parameter is true the cached pan is enabled.\n\n

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.5

</member>
        <member name="M:caps_uthSetPanCacheStatus(CTScreen*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief 
    Sets the status of the cached panning feature.

    @param screen
    A valid @c CTScreen.

    @param status
    A CTbool parameter. If status is set to false the cached panning feature 
    will be disabled and the whole screen will be rendered for each pan. This
    is slower and is not recommended. If status is true the cached pan
    is enabled.\n\n

    The cached panning feature is enabled by default.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.5

</member>
        <member name="M:caps_uthSetSamplingMode(cips*,SCB_SAMPLING_MODE)">
    @brief 
    Sets the sampling mode for the sipla subsystem.

    @param session
    A valid @c CTSession handle.

    @param mode
    The requested sampling setting, can be one of the values from the 
    ::SCB_SAMPLING_MODE enumeration. Default value for a regular session
    is: SCB_SAMPLING_BILINEAR. Default value for a speedview session is:
    SCB_SAMPLING_BOX.

    @note
    Currently only SCB_SAMPLING_BOX or SCB_SAMPLING_BILINEAR
    is supported.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_uthSetJpegColorspacing(cips*,CTColorspacing)">
    @brief 
    Sets the colorspacing to be used when rendering to JPEG format.

    @param session
    A valid @c CTSession handle.

    @param colorspacing
    A ::CTColorspacing value with the requested colorspacing. Default: CM_YUV420

    @remarks
    The current render block size will be altered if not compatible with the
    given colorspacing; see: caps_uthSetRenderBlockSize()

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_uthSetPrefetchFlag(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief 
    Sets the prefetching option for the JPEG decoder or the BMP decoder.
    When disabling the prefetch option, the file will not be read into
    memory. Therefore the memory needed in the session will be reduced with approx.
    the file size.

    @param session
    A valid @c CTSession handle.

    @param enablePrefetch
    True, if the files should be read into memory. False, otherwise.
    Default value is true.

    @note
    This function is only applicable on sessions decoding JPEG or 24-bit 
    BMP, CERR_ILLEGAL_CALL will be returned otherwise.

    @note
    This function has no effect on progressive JPEG images.

    @note
    This function must be called after each call to caps_setSourceImage()
    if no prefetching is desired.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_uthSetSpmoDecodeMode(cips*,CAPS_DECODE_MODE)">
    @brief 
    Sets the decoding quality of an spmo decoder

    @param session
    A valid @c CTSession handle.

    @param mode
    The requested decode mode setting, can be one of the values from the 
    ::CAPS_DECODE_MODE enumeration. Default is @c CAPS_DECODE_NORMAL.

    @note
    This function is only applicable on sessions created from spmo objects.
    On other sessions, the function has no effect.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.10.3

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_uthSetJpegDecodeMode(cips*,CAPS_DECODE_MODE)">
    @brief 
    Sets options for the JPEG decoder.

    @param session
    A valid @c CTSession handle.

    @param mode
    The requested decode mode setting, can be one of the values from the 
    ::CAPS_DECODE_MODE enumeration. Default for regular sessions is:
    @c CAPS_DECODE_OPTIMIZE_QUALITY, and for SPMO-initiated sessions:
    @c CAPS_DECODE_NORMAL.

    @note
    This function is only applicable on JPEG sessions, CERR_ILLEGAL_CALL 
    will be returned otherwise.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="F:CAPS_DECODE_OPTIMIZE_SPEED">
Fast decoding speed but with lower image quality. 
</member>
        <member name="F:CAPS_DECODE_NORMAL">
Medium decoding performance and image quality. 
</member>
        <member name="F:CAPS_DECODE_OPTIMIZE_QUALITY">
Slower decoding speed but with high image quality. 
</member>
        <member name="F:CAPS_DECODE_OPTIMIZE_HIGHEST_QUALITY">
Slower decoding performance but with highest possible image quality. 
</member>
        <member name="M:caps_uthSetRenderQuality(cips*,CAPS_RENDER_MODE)">
    @brief 
    Sets the render session quality preference for the sipla subsystem.
    
    @param session A valid @c CTSession handle.

    @param quality
    The requested quality setting, can be one of the values from the 
    ::CAPS_RENDER_MODE enumeration. Default for regular sessions is:
    @c CAPS_RENDERMODE_OPTIMIZE_QUALITY, and for SPMO-initiated sessions:
    @c CAPS_RENDERMODE_NORMAL.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="F:CAPS_RENDERMODE_OPTIMIZE_QUALITY">
Slower render performance but with high image quality. 
</member>
        <member name="F:CAPS_RENDERMODE_NORMAL">
Medium render performance and image quality. 
</member>
        <member name="F:CAPS_RENDERMODE_OPTIMIZE_SPEED">
Fast render performance but with lower image quality. 
</member>
        <member name="M:caps_uthSetRajpegCacheSize(cips*,System.UInt16)">
    @brief 
    Sets the block cache size used internally by rajpeg to optimize decoding
    speed.

    @param session
    A valid @c CTSession handle.

    @param cacheSize
    The requested cache size in kilobytes. Default setting: 100 (kb).

    @return 
    @c CERR_OK if successful or a specific error code upon failure.
    @c CERR_ILLEGAL_CALL is returned if the session doesn't have a JPEG source 
    image loaded.

    @sa
    caps_uthGetOptimalRajpegCache()

    @since 3.1

</member>
        <member name="M:caps_uthDisableDSO(cips*)">
@file caps_uth.h
@brief This header defines advanced functions for tuning special behaviour.
@ingroup caps_uthapi

    @addtogroup caps_uthapi
    @brief
    This is the CAPS Under-The-Hood API for advanced tuning and maintainance.

    The functions defined herein opens up the possibility to modify internal 
    mechanisms and behaviour which can produce severe damage to performance
    and quality if used incorrectly.

    @warning
    This API should never be used without carefully consulting Scalado AB
    about the situation and describing the problem(s) intended to be solved.

    @{

    @brief 
    Disables the internal DSO mechanism which optimizes screen rendering
    performance when adjusting certain effects. If DSO is active when calling
    this function it is immediately deactivated.

    @param session
    A valid CTSession handle.

    @remarks
    The DSO mechanism is an important part of the internal optimization of
    screen output rendering. It heavily increases performance when adjusting
    effects such as clipart, spotlight etc. However, when for example using 
    CAPS with source data continously being updated, the DSO mechanism can do
    more harm than good since it behaves like a cache and prevents realtime
    reflection of changes in source data.

    @remarks
    It should be noted that apart from using this UTH function for indicating
    change in source data, the regular caps_signalSessionEvent() from the
    Base API can be used for the same purpose.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:Nokia.Graphics.Internal.BufferFactory.CreateBuffer(Nokia.Graphics.Internal.IBufferPointer)">
            <summary>Framework internal method.</summary>
        </member>
        <member name="T:Nokia.Graphics.Internal.BufferFactory">
            <summary>Framework internal type.</summary>
        </member>
        <member name="P:Nokia.Graphics.Internal.IBufferPointer.Length">
            <summary>Framework internal method.</summary>
        </member>
        <member name="P:Nokia.Graphics.Internal.IBufferPointer.Ptr">
            <summary>Framework internal method.</summary>
        </member>
        <member name="T:Nokia.Graphics.Internal.IBufferPointer">
            <summary>Framework internal type.</summary>
        </member>
        <member name="M:caps_endBrightnessNContrast(cips*)">
    @brief
    Ends the task of applying Brightness and Contrast effect to the current 
    session image.

    @param session
    Handle to a valid session.

    @since 5.3

</member>
        <member name="M:caps_setBrightnessNContrast(cips*,System.Single,System.Single)">
    @brief
    Adjusts the brightness level of the current session image.

    @param session
    Handle to a valid session.

    @param brightness
    A @c CTfloat specifying the brightness modification level. 
    Range (-1.0) - (1.0), where 0.0 implies no adjustment.   

    @param contrast
    The contrast adjustment level. Range (-1.0) - (1.0), where values below
    zero decreases contrast and above zero increases it.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_beginBrightnessNContrast(cips*)">
@} 
@defgroup fxgroup_brightness_n_contrast Brightness and Contrast 
@{
    @copydoc begin_end_effects

    @brief
    Begins the task of applying Brightness and Contrast effect to the current 
    session image.

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_endSplitToning(cips*)">
    @brief
	Disconnects the SplitToning filter from current session and frees memory from SplitToning parameters.

	@param session
    Handle to a valid session.

    @since 3.9

</member>
        <member name="M:caps_setSplitToning(cips*,CTSplitToneRange*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets one, or more, luminance ranges with specific colors for the SplitToning filter.

	The SplitToning effect applies a given color to pixels with luminance values within an
    interval specified by a @c CTSplitToneRange struct. Several different intervals may be
    specified, each with a different color associated to it.

    Typical usage is to define a @em shadow luminance range, and a @em highlight luminance
    range, with different colors applied to each range.

	@param session
    Handle to a valid session.

    @param pSplitRange
    Array of @c CTSplitToneRange settings.

    @param splitRangeSize
    Number of elements in the @c pSplitRange array.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.9

</member>
        <member name="M:caps_beginSplitToning(cips*)">
    @brief
	This function connects a SplitToning effect to the current session.

	@param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.9

</member>
        <member name="F:CTSplitToneRange.bValue">
@brief Defines the B value of the RGB color to be set for the luminance range:
[ @c luminanceLowValue, @c luminanceHighValue ].
Allowed @c bValue range: [ 0, 255 ]. 
</member>
        <member name="F:CTSplitToneRange.gValue">
@brief Defines the G value of the RGB color to be set for the luminance range:
[ @c luminanceLowValue, @c luminanceHighValue ].
Allowed @c gValue range: [ 0, 255 ]. 
</member>
        <member name="F:CTSplitToneRange.rValue">
@brief Defines the R value of the RGB color to be set for the luminance
range: [ @c luminanceLowValue, @c luminanceHighValue ].
Allowed @c rValue range: [ 0, 255 ]. 
</member>
        <member name="F:CTSplitToneRange.luminanceHighValue">
@brief Defines the higher luminance value.
Allowed range is [ 0, 255 ]. Must be higher than @c luminanceLowValue.

</member>
        <member name="F:CTSplitToneRange.luminanceLowValue">
@brief Defines the lower luminance value.
Allowed range is [ 0, 255 ]. Must be lower than @c luminanceHighValue.

</member>
        <member name="T:CTSplitToneRange">
@} 
@defgroup fxgroup_splittoning SplitToning
@{
    @copydoc begin_end_effects

    @brief Defines a split toning luminance interval, and a color value (RGB)
    to be applied.

    Used with caps_setSplitToning().

</member>
        <member name="M:caps_endWatercolor(cips*)">
    @param session
    Handle to a valid session.

    @since 3.9

</member>
        <member name="M:caps_setWatercolor(cips*,System.Single,System.Single)">
    @brief
    Adjusts the light and color intensity of the watercolor effect.

    @param session
    Handle to a valid session.

    @param light
    A @c CTfloat specifying the light intensity.
    Range (0.0) - (1.0).

    @param color
    A @c CTfloat specifying the color intenisy.
    Range (0.0) - (1.0).

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.9

</member>
        <member name="M:caps_beginWatercolor(cips*)">
@} 
@defgroup fxgroup_watercolor Watercolor
@{
    @copydoc begin_end_effects

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.9

</member>
        <member name="M:caps_endVignetting(cips*)">
    @brief
    Ends the task of applying vignetting effect to the current session image.

    @param session
    Handle to a valid session.

    @since 3.9 R01

</member>
        <member name="M:caps_beginVignetting(cips*)">
@} 
@defgroup fxgroup_vignetting Vignetting
@{
    @copydoc begin_end_effects

    @brief
    Begins the task of applying vignetting effect to the current session image.

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.9 R01

</member>
        <member name="M:caps_endLomo(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.8

</member>
        <member name="M:caps_setLomo(cips*,System.Single,System.Single,CAPS_LOMO_VIGNETTING,CAPS_LOMO_STYLE)">
    @brief
    Applies lomo effect on the current session image.

    @param session
    Handle to a valid session.

    @param brightness
    Adjust the brightness of the image. Range (0.0) - (1.0),
    where 0.0 gives a bright image and 1.0 a dark image.

    @param saturation
    Adjust the color saturation of the image. Range (0.0) - (1.0),
    where 0.0 implies no saturation.

    @param vignetting
    Adjust the vignetting level. Can be one of the values from the
    @c ::CAPS_LOMO_VIGNETTING enumeration.

    @param style
    Change color style. Can be one of the values from the
    @c ::CAPS_LOMO_STYLE enumeration.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_beginLomo(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_applyWarpFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Applies a warp effect to the current session image.

    @param session
    A valid session handle.

    @param wrptable
    Buffer containing the warptable to apply.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:caps_applyWarpFromFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Applies a warp effect to the current session image.

    @param session
    A valid session handle.

    @param filename
    Filename specifying the warp table file to use when applying the warp
    effect.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endWarpAreaEx(caps_warparea*)">
    @brief

    @param warp
    Handle to a valid warp area.

    @remarks
    This function has the same effect as caps_endWarpArea()

    @copydoc begin_end_effects

    @since 5.2

</member>
        <member name="M:caps_endWarpArea(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @remarks
    This function has the same effect as caps_endWarpAreaEx()

    @copydoc begin_end_effects

    @since 5.2

</member>
        <member name="M:caps_setWarpAreaIndexEx(caps_warparea*,System.Int32!System.Runtime.CompilerServices.IsLong,CAPS_ROTATION,System.Single)">
    @brief
    Sets the warp effect to apply

    @param warp
    [IN]A valid warp handle which has been created in a previous call to
    caps_beginWarpArea().

    @param index
    [IN] A number between 0 and 15 which defines which warp to
    use on the rectangles. The available index values are defined in
    #CAPS_WARP_EFFECT

    @param strength Amount of effect applied. 0.0f means no effect. 1.0f means
    full effect.

    @param rotation Rotation of the effect.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3.2.1

</member>
        <member name="M:caps_setWarpAreaIndex(caps_warparea*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
    @brief
    Sets the warp effect to apply

    @param warp
    [IN]A valid warp handle which has been created in a previous call to 
    caps_beginWarpArea().

    @param index
    [IN] A number between 0 and 15 which defines which warp to
    use on the rectangles. The available index values are defined in
    #CAPS_WARP_EFFECT

    @param strength Amount of effect applied. 0.0f means no effect. 1.0f means
    full effect.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.2

</member>
        <member name="M:caps_beginWarpArea(cips*,CTRect!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,caps_warparea**)">
    @brief
    Warp effect on selected areas in a session.

    After this function, the default warp effect, of index 0, is applied.

    @param session 
    A valid session handle.

    @param pRects Array of rectangles where warp is applied. 
    The array is copied, so this object does not need to be kept alive during
    the out_warp session. Rectangles that are outside of the session's
    current image size will be cropped to the valid area.
    There must be at least one rectangle in the array.

    @param numRects Number of rectangles in array, minimum 1.

    @param out_warp A handle for the warp session

    @copydoc begin_end_effects

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.2

</member>
        <member name="T:CAPS_WARP_EFFECT">
Warp effects

</member>
        <member name="T:caps_warparea">
@defgroup fxgroup_warp Warp
@{

The handle type used for warp effect sessions.

</member>
        <member name="M:caps_applyMagicPen(cips*)">
@} 
@defgroup fx_magicpen Magic Pen 
    @ingroup fx_magicpen

    @brief
    Applies a mix of edge distinction and color manipulation of the image.

    @param session
    A valid session handle.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endCartoon(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setCartoon(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Transforms the current session image to typical cartoon graphics style.

    @param session
    Handle to a valid session.

    @param distinct_edges
    If set to @a true all detected edges in the image are rendered
    distinctively, if @c false edges are ignored.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginCartoon(cips*)">
@} 
@defgroup fxgroup_cartoon Cartoon
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endColorSwap(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @remarks

    @copydoc begin_end_effects

    @since 3.7

</member>
        <member name="M:caps_endMonoColor(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.7

</member>
        <member name="M:caps_endColorization(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setColorization(cips*,System.Byte,System.Byte,System.Byte,System.Int16,System.Int16)">
    @brief
    Adjusts color tone and luminance/chrominance levels.
    Adds a single color to an image.

    @param session
    Handle to a valid session.

    @param r
    Red component of reference color.
    Range: 0-255

    @param g
    Green component of reference color.
    Range: 0-255

    @param b
    Blue component of reference color.
    Range: 0-255

    @param luminance_strength
    Strength of luminance.
    Range: (-100)-(200)

    @param chrominance_strength
    Strength of chrominance.
    Range: (-100)-(200)

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginColorization(cips*)">
@} 
@defgroup fxgroup_colorize Colorize
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endBlur(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setBlurRegionMode(cips*,CAPS_BLUR_REGION_MODE)">
    @brief
    Set the region mode of the blur effect

    @param session
    Handle to a valid session.

    @param mode
    The blur region mode. Can be any of the values from
    the @c ::CAPS_BLUR_REGION_MODE
    enumeration.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7

</member>
        <member name="M:caps_setBlur(cips*,CAPS_BLUR_LEVEL,CTRect*)">
    @brief
    Blurs the current session image.

    @param session
    Handle to a valid session.

    @param level
    The blur effect level. Can be any of the values from the @c ::CAPS_BLUR_LEVEL
    enumeration.

    @param region
    (OPTIONAL) Pointer to a @c CTRect object specifying the effective region to
    blur within the image, given in current coordinates. Set this
    argument to @c NULL if the effect should be applied to the entire image.
    The blur is applied to the entire image if the width and/or height value is zero
    (independent of the position).
    The coordinates given will correspond to the upper-left corner of the blur region.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_setExactBlur(cips*,System.Int32!System.Runtime.CompilerServices.IsLong,CTRect*)">
    @brief
    Blurs the current session image.

    @param session
    Handle to a valid session.

    @param level
    The blur effect level. This corresponds closely to the kernel size of the
    @sa CAPS_BLUR_LEVEL enum. Zero of negative values will return an error code.

    @param region
    (OPTIONAL) Pointer to a @c CTRect object specifying the effective region to
    blur within the image, given in current coordinates. Set this
    argument to @c NULL if the effect should be applied to the entire image.
    The blur is applied to the entire image if the width and/or height value is zero
    (independent of the position).
    The coordinates given will correspond to the upper-left corner of the blur region.
 
    @note The exact conversion between the kernel size specified in @sa
    CAPS_BLUR_LEVEL and the level parameter of this function is not specified.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.4

</member>
        <member name="M:caps_beginBlur(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endDespeckle(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setDespeckle(cips*,CAPS_DESPECKLE_LEVEL)">
    @brief
    Applies a "despeckle" surface effect to the current session image.

    @param session
    Handle to a valid session.

    @param level
    The effect level. Can be any of the values from the @c ::CAPS_DESPECKLE_LEVEL
    enumeration.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginDespeckle(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endFrostedGlass(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setFrostedGlass(cips*,CAPS_FROSTED_LEVEL)">
    @brief
    Applies a "frosted glass" surface effect on the current session image.

    @param session
    Handle to a valid session.

    @param level
    The effect level. Can be any of the values from the @c ::CAPS_FROSTED_LEVEL
    enumeration.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginFrostedGlass(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_applyMoonlight(cips*,System.Int16)">
@} 
@defgroup fx_moonlight Moonlight 
    @ingroup fx_moonlight

    @brief
    Applies a Moonlight effect on the current session image.

    @param session
    A valid session handle.

	@param clock
	Time of night in clock (1~24) affect only at night time (17~7).


	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:caps_endSpotlight(caps_spotlight*)">
    @brief
    Concludes the task of inserting a spotlight effect.

    @param spotlight
    A valid @c CAPS_SPOTLIGHT handle which has been created in a previous call to
    caps_beginSpotlight().

    @remarks

    The spotlight handle is invalid after calling this function and should
    preferably be reset to null directly upon calling it.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_beginSpotlight()
    - caps_setSpotlightOrientation()
    - caps_getSpotlightOrientation()
    .

    @since 3.0

</member>
        <member name="M:caps_beginSpotlight(cips*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,caps_spotlight**)">
    @brief
    Begins the task of inserting a spotlight effect on the current session
    image.

    The coordinates given to this function is interpreted as being
    within the "current" coordinate system. See section 'Coordinate conversions'
    in @ref caps_baseapi_screen

    @param session
    A valid session handle.

    @param position
    A @c CTPoint value specifying the center of the spotlight circle.

    @param radius
    The radius of the spotlight circle in pixels. Current coordinates.
    Range: [ 0 , 65535 - 1024 ]

    @param transition_size
    The size of the transition region given in fraction of the radius.
    See the Developers Guide for more information.
    Range: [ 0.0 , 1.0 ]

    @param spotlight
    Pointer to a @c CAPS_SPOTLIGHT value which will receive the spotlight
    handle for subsequent adjustments and conclusion of the spotlight
    insertion. See remarks section for details.

    @remarks
    The task of inserting a spotlight is carried out in three stages:
    @n
    -# Begin spotlight insertion.
    -# Adjust spotlight orientation (optional)
    -# End spotlight insertion.
    .
    @n
    Between step 1 and 3, no other effects or operations may be carried out.
    I.e. the spotlight insertion task have to be concluded/ended before
    proceeding with other effects. A spotlight cannot be modified once the
    insertion process has been ended, the spotlight handle is effectively
    turned invalid after calling caps_endSpotlight().

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_setSpotlightOrientation()
    - caps_getSpotlightOrientation()
    - caps_endSpotlight()
    .

    @since 3.0

</member>
        <member name="T:caps_spotlight">
@} 
@defgroup fxgroup_spotlight Spotlight
@{

@brief The handle type used for spotlight insertion sessions.

</member>
        <member name="M:caps_endNoise(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setNoise(cips*,CAPS_NOISE_LEVEL)">
    @brief
    Applies noise to the current session image.

    @param session
    Handle to a valid session.

    @param noise
    The amount of noise. Can be any of the values from the @c ::CAPS_NOISE_LEVEL
    enumeration.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginNoise(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endSketch(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.x

</member>
        <member name="M:caps_setSketch(cips*,CAPS_SKETCH_MODE)">
    @brief

    @param session
    A valid session handle.

    @param mode
    How to sketch the image.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.x

</member>
        <member name="M:caps_beginSketch(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.x

</member>
        <member name="M:caps_applySketch(cips*,CAPS_SKETCH_MODE)">
    @brief

    @param session
    A valid session handle.

    @param mode
    How to sketch the image.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:caps_endStamp(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setStamp(cips*,System.Byte,System.Byte)">
    @brief
    Applies a stamp effect. Result is a b/w image.

    @param session
    Handle to a valid session.

    @param smoothness
    Range: 0-6

    @param threshold
    Range: 0-255

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginStamp(cips*)">
@defgroup fxgroup_stamp Stamp
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_applyFog(cips*)">
@} 
@defgroup fx_fog Fog 
    @ingroup fx_fog

    @brief
    Applies a fog effect.

    @param session
    A valid session handle.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:caps_endPosterize(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setPosterize(cips*,System.UInt16)">
    @brief
    Applies a posterize effect. Reduces the number of colors.

    @param session
    Handle to a valid session.

    @param levels
    The number of allowed values for each color component.
    Range: 2 - 16

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginPosterize(cips*)">
@} 
@defgroup fxgroup_posterize Posterize
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endSolarize(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setSolarize(cips*,System.Single)">
    @brief
    Applies a solarize effect.

    @param session
    Handle to a valid session.

    @param threshold
    The threshold level of the solarize effect.
    Range: 0.0 - 1.0

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginSolarize(cips*)">
@} 
@defgroup fxgroup_solarize Solarize
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endEmboss(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setEmboss(cips*,System.Single)">
    @brief
    Applies an emboss effect in grayscale.

    @param session
    Handle to a valid session.

    @param emboss_level
    The level of the emboss effect.
    Range: 0.0 - 1.0

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginEmboss(cips*)">
@defgroup fxgroup_emboss Emboss
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_applyMilky(cips*)">
@} 
@defgroup fx_milky Milky 
    @ingroup fx_milky

    @brief
    Applies a "milky" surface effect to the current session image.

    @param session
    A valid session handle.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0


</member>
        <member name="M:caps_endOily(cips*)">
    @brief
    Ends the task of applying an oily effect to the current session image.

    @param session
    Handle to a valid session.

    @since 3.8.2

</member>
        <member name="M:caps_setOily(cips*,CAPS_OILY_LEVEL)">
    @brief
    Applies oily effect to the current session image.

    @param session
    Handle to a valid session.

    @param oily_level
    The level of the oily effect. Can be one of the values from the
    @c ::CAPS_OILY_LEVEL enumeration.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8.2

</member>
        <member name="M:caps_beginOily(cips*)">
    @brief
	Begins the task of applying an oily effect to the current session image.

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8.2

</member>
        <member name="M:caps_endRGBColorAdjust(cips*)">
    @brief
    Applies the color adjustments made to the current session.

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setRGBColorAdjust(cips*,System.Single,System.Single,System.Single)">
    @brief
    Adjusts the RGB color composition of the current session image.

    @param session
    Handle to a valid session.

    @param r
    Red channel adjustment. Range (-1.0) - (1.0).

    @param g
    Green channel adjustment. Range (-1.0) - (1.0).

    @param b
    Blue channel adjustment. Range (-1.0) - (1.0).

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginRGBColorAdjust(cips*)">
@defgroup fxgroup_color_adjustment Color Adjustment
@{
    @copydoc begin_end_effects

    @brief
    Begins the task of adjusting the RGB color values.

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_applyOily(cips*)">
    @ingroup fx_oily

    @brief
    Makes the session image look like an oil painting.

    @param session
    A valid session handle.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applyAntique(cips*)">
@defgroup fx_antique Antique 
    @ingroup fx_antique

    @brief
    Produces a look of an old color photo.

    @param session
    A valid session handle.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:caps_applyChromaKey(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@ingroup fm_photoart
@file fm_photoart_pack2.h
@brief Defines the available API's for filters included in filter pack 2
for the Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fx_chromakey ChromaKey 
    @ingroup fx_chromakey

    @brief
    Adds alfa channel data to the current session image.

    @param session
    A valid session handle.

    @param key
    The color to make transparent. R, G and B are used to define the key.
    A is used to determine the amount of transparency for a non-key color
    pixel. A value of 0 gives full transparency and a value of 255 gives
    no transparency.

    @param invertAlfa
    If false, full transparency in the alfa channel is the value 0.
    If true, full transparency in the alfa channel is the value 255.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7


</member>
        <member name="M:caps_applyBlendSession(cips*,cips*,CTBlendFunction)">
@} 
    @brief
    Blend two sessions together

    @param session 
    A valid session handle.

    @param blendSession
    Another valid session handle

    @param blendFunction
    A blend function

    @remarks

    The dimensions of blendSession will adjust to the same
    dimensions as session by stretching. Aspect ratio of
    blendSession will not be kept.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:caps_applyMirror(cips*)">
@} 
@defgroup fx_mirror Mirror 
    @ingroup fx_mirror

    @brief
    Applies a mirror effect on the current session image.

    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applyPaint(cips*)">
    @brief
    Applies a painted effect on the current session image.

    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endPaint(cips*)">
    @brief	
    Ends the task of applying the Paint effect to the current session image.

    @param session
    Handle to a valid session.

    @since 3.10

</member>
        <member name="M:caps_setPaint(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Applies Paint effect to the current session image.

    @param session
    Handle to a valid session.

    @param paintLevel
    The level of the paint effect. Range [1, 4]

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.10

</member>
        <member name="M:caps_beginPaint(cips*)">
@defgroup fx_paint Paint 
    @{
        @copydoc begin_end_effects

    @brief
	Begins the task of applying the Paint effect to the current session image.

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.10

</member>
        <member name="M:caps_applyGrayscaleNegative(cips*)">
@defgroup fx_grayscale_negative Grayscale Negative 
    @ingroup fx_grayscale_negative

    @brief
    Converts the current session image to combined grayscale and negative.
    
    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applyNegative(cips*)">
@defgroup fx_negative Negative 
    @ingroup fx_negative

    @brief
    Converts the current session image to negative.
    
    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applyGrayscale(cips*)">
@defgroup fx_grayscale Grayscale 
    @ingroup fx_grayscale

    @brief
    Converts the current session image to grayscale.

    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applySepia(cips*)">
@} 
    @brief
    Applies a sepia effect to the current session image.

    @param session 
    A valid session handle.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endSepia(cips*)">
    @brief	

    @param session
    Handle to a valid session.

    @since 3.5

</member>
        <member name="M:caps_setSepia(cips*,CAPS_SEPIA_LEVEL)">
    @brief	

    @param session
    Handle to a valid session.

    @param sepia_level
    The level of sepia. Can be one of the values from the 
    @c ::CAPS_SEPIA_LEVEL enumeration.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.5

</member>
        <member name="M:caps_beginSepia(cips*)">
    @brief
	Applies a sepia effect to the current session image.

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.5

</member>
        <member name="M:caps_endContrast(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setContrast(cips*,System.Single)">
    @brief
    Applies contrast adjustment to the current session image.

    @param session
    Handle to a valid session.

    @param contrast
    The contrast adjustment level. Range (-1.0) - (1.0), where values below
    zero decreases contrast and above zero increases it.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginContrast(cips*)">
@} 
@defgroup fxgroup_contrast Contrast
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endRotation(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setRotation(cips*,System.Single,CAPS_ROTATION_SCALE_MODE)">
    @brief
    Arbitrary rotation on the current session image.

    @param session
    Handle to a valid session.

    @param angle
    Range: [0.0 360.0]

    @param scale_mode 
	Can be any of the values 
    from the @c ::CAPS_ROTATION_SCALE_MODE enumeration.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginRotation(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endSharpness(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setSharpness(cips*,CAPS_SHARPNESS_LEVEL)">
    @brief
    Applies sharpness to the current session image.

    @param session
    Handle to a valid session.

    @param sharp_level
    The sharpness impact level. Can be one of the values from the 
    @c ::CAPS_SHARPNESS_LEVEL enumeration.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginSharpness(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endHueSaturation(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.8

</member>
        <member name="M:caps_setHueSaturation(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Adjusts the Hue and Saturation level of the current session image.

    @param session
    Handle to a valid session.

    @param hue
    A @c CTuint32 specifying the Hue modification level. 
    Range 0 - 255, where 128 implies no adjustment.   

    @param saturation
    A @c CTuint32 specifying the Saturation modification level. 
    Range 0 - 255, where 128 implies no adjustment.   

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_beginHueSaturation(cips*)">
@} 
@defgroup fxgroup_huesaturation HueSaturation 
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_endBrightness(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setBrightness(cips*,System.Single)">
    @brief
    Adjusts the brightness level of the current session image.

    @param session
    Handle to a valid session.

    @param brightness
    A @c CTfloat specifying the brightness modification level. 
    Range (-1.0) - (1.0), where 0.0 implies no adjustment.   

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginBrightness(cips*)">
@ingroup fm_photoart
@file fm_photoart_pack1.h
@brief Defines the available API's for filters included in filter pack 1 
for the Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fxgroup_brightness Brightness 
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_getCurrentScribbleBuffer(caps_scribble*,CTImage**)">
    @brief
    Returns the image currently used by the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] scribbleBuffer
    Pointer address of a @c CTImage which, after the call, will point to the
    scribble image.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_eraseScribbleBuffer(caps_scribble*)">
    @brief
    Erases all data in the image currently used by the scribble.
    All data in this buffer will be set to 0.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_removeDotInScribble(caps_scribble*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,CAPS_SCRIBBLE_SHAPE)">
    @brief
    Removes a dot into the scribble. This is an "Eraser"-function.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param coords
    Specifies the @em screen @em coordinates of the dot to remove.
    The coordinates are not allowed to be negative and must be smaller than
    the screen.

    @param dotRadius
    Radius of the dot. For example, a dot with
    radius 1 will be 3x3 pixels wide.

    @param shape
    The shape of the brush. Can be one of the values from the 
    @c ::CAPS_SCRIBBLE_SHAPE enumeration.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setEllipseInScribble(caps_scribble*,CTVector,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Places a ellipse into the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param upperLeft
    Specifies the upper-left corner of the bounding-box for the ellipse.
    The coordinates are not allowed to be negative and must be smaller
    than the associated @c CTScreen object.

    @param ellipseSize
    Specifies the widht and height of the ellipse.

    @param brushRadius
    The radius of the brush. The width of the border
    will be ( 2*brushRadius + 1 ) pixels wide.

    @param filled
    Specifies whether the ellipse should be filled or not.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setRectangleInScribble(caps_scribble*,CTVector,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Places a retangle into the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param upperLeft
    The coordinates of the upper-left corner of the rectangle. The
    coordinates are not allowed to be negative and must be smaller
    than the associated @c CTScreen object.

    @param rectangleSize
    Specifies the width and height of the rectangle.

    @param brushRadius
    The radius of the brush. The width of the border
    will be ( 2*brushRadius + 1 ) pixels wide.

    @param filled
    Determines whether the rectangle should be filled or not.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setLineInScribble(caps_scribble*,CTVector,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,CAPS_SCRIBBLE_SHAPE)">
    @brief
    Places a line ínto the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param srcCoords
    A @c CTPoint specifying the starting point of the line.
    The coordinates are not allowed to be negative and must be smaller
    than the associated @c CTScreen object.

    @param dstCoords
    A @c CTPoint specifying the end point of the line. The
    coordinates are not allowed to be negative and must be smaller than
    the associated @c CTScreen object.

    @param brushRadius
    Variable specifying the radius of the borders. The width of the border
    will be ( 2*brushRadius +1 ) pixels wide.

    @param shape
    Variable specifying the brush shape. Use one of the values from the 
    @c ::CAPS_SCRIBBLE_SHAPE enumeration.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setDotInScribble(caps_scribble*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,CAPS_SCRIBBLE_SHAPE)">
    @brief
    Places a dot into the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param position
    A @c CTPoint specifying the position of the dot in @em screen
    @em coordinates. The coordinates are not allowed to be negative
    and must be smaller than the associated @c CTScreen object.

    @param dotRadius
    Specifies the radius of the squared dot. For example, a dot with
    radius 1 will be 3x3 pixels wide.

    @param shape
    Specifies the brush shape. Can be one of the values from the 
    @c CAPS_SCRIBBLE_SHAPE enumeration.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setScribbleColor(caps_scribble*,CTColor)">
    @brief
    Adjusts the color of a scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param color Specifies the color to use for drawing.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_getScribbleColor(caps_scribble*,CTColor*)">
    @brief
    Retrieves the current color of a scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] pColor
    A pointer to a @c CTColor which will receive the current scribble 
    color.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_getScribbleSize(caps_scribble*,CTSize*)">
    @brief
    Retrieves the current size of a scribble.

    The retrieved size should be regarded within the current coordinate 
    system.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] size
    Pointer to a @c CTSize struct to which the width and height will be written.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_setScribbleOrientation(caps_scribble*,CTVector,System.Single,System.Single)">
    @brief
    Adjusts the orientation of a scribble.

    The coordinates given to this function is current coordinate system.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param position
    A @c CTPoint specifying the vertical and horizontal position of 
    the scribble in current coordinates. Position refers to the center of 
    the scribble.

    @param scale    
    Scribble scaling factor. Range [0.001, 64.0].

    @param angle
    Rotation of the scribble in degrees, [0.0 360.0].

    @remarks
    After calling this function, no additional data can be inserted to
    the buffer with the functions: caps_setDotInScribble(), 
    caps_setLineInScribble(), caps_setRectangleInScribble(), 
    caps_setEllipseInScribble() and caps_removeDotInScribble().

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_getScribbleOrientation(caps_scribble*,CTVector*,System.Single*,System.Single*)">
    @brief
    Retrieves the current orientation setting for a scribble.

    All coordinates retrieved should be regarded within the current 
    coordinate system.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] position
    Pointer to a @c CTPoint which will receive the current scribble
    position. Position refers to the center of the scribble.

    @param[out] scale
    Pointer to a @c CTfloat  which will receive the current scribble 
    scaling factor.

    @param[out] angle
    Pointer to a @c CTfloat which will receive the current scribble 
    rotation angle in degrees, [0.0 360.0].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_endScribble(caps_scribble*)">
@brief
Concludes the task of inserting a scribble image.
 
@param scribble
A valid scribble handle which has been created in a previous call to 
caps_beginScribble().
 
@remarks
The scribble handle will be invalid after calling this function.
 
@return 
@c CERR_OK if successful or a specific error code upon failure.
 
@since 3.6

</member>
        <member name="M:caps_beginScribble(CTScreen*,CTImage*,CTColormode*,CTColor,caps_scribble**)">
@brief
Begins the task of creating a scribble image on the current session.

@param pScreen A valid @c CTScreen.

@param pImage 
Optional argument. Pointer to a valid @c CTImage with the same size
as the (above) provided @c pScreen. The supported image color mode is
::CM_RGB565_G0.
\n
<b>Note</b>: Ownership of the image remains with the caller but must not be
destroyed until the associated session is destroyed.
If this argument is set to NULL an image will be allocated internally 
for the scribble using the color mode provided in @c pImageColorMode. If an
image is provided @c pImageColorMode must be set to NULL.

@param pImageColorMode
A pointer to a @c CTColormode containing the desired image color mode
for the internally allocated scribble image. The valid color mode is 
::CM_RGB565_G0.
\n
<b>Note</b>: If this argument is set to NULL a valid image must be provided in
@c pImage. If a color mode is provided @c pImage must be set to NULL.

@param color Specifies the color to use for drawing primitives.

@param[out] out_scribble
Pointer to a scribble handle.

The task of inserting a scribble is carried out in three stages:
-# Begin scribble insertion.
-# Insert geometrical figures, dots or any data into the image.
Change color and adjust orientation. (This step is optional).
-# End scribble insertion.
.

Between step 1 and 3, no other effects or operations may be carried out;
i.e the scribble insertion task have to be concluded/ended before 
proceeding with other effects. Note that this includes Zoom and Pan
operations. A scribble cannot be modified once the insertion process
has been ended, the scribble handle is turned invalid after
calling caps_endScribble().

@return 
@c CERR_OK if successful or a specific error code upon failure.

@since 3.6

</member>
        <member name="T:caps_scribble">
@ingroup fm_photoart
@file fm_photoart_scribble.h
@brief Defines the available API's for the scribble effect 
in Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fxgroup_scribble Scribble 
@{

The handle type used for scribble insertion sessions.

</member>
        <member name="M:caps_endClipart(caps_clipart*)">
    @brief
    Concludes the task of inserting a clipart image.

    @param clipart
    A valid handle to a clipart which has been created in a previous call to
    one of the "begin clipart" functions.

    @remarks

    The clipart handle is invalid after calling this function and should
    preferably be set to NULL directly upon calling it.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartOrientation()\n   
    caps_getClipartSize()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_getClipartRect(caps_clipart*,CTRect*)">
    @brief
    Retrieves the current bounding box of a clipart.

    The retrieved rectangle should be regarded within the current coordinate 
    system.

    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param rect
    Pointer to a @c CTRect object which will receive the current clipart
    bounding box.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartOrientation()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.6

</member>
        <member name="M:caps_getClipartSize(caps_clipart*,CTSize*)">
    @brief
    Retrieves the current size of a clipart.

    The retrieved size should be regarded within the current coordinate 
    system.

    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param size
    Pointer to a @c CTSize object which will receive the current clipart size.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartOrientation()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_getClipartOrientation(caps_clipart*,CTVector*,System.Single*,System.Single*)">
    @brief
    Retrieves the current orientation setting for a clipart.

    All coordinates retrieved should be regarded within the current 
    coordinate system.

    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param position
    Pointer to a @c CTPoint object which will receive the current clipart 
    position. Position refers to the center of the clipart.

    @param scale    
    Pointer to a @c CTfloat value which will receive the current clipart scaling 
    factor.

    @param angle
    Pointer to a @c CTfloat value which will receive the current clipart rotation
    angle in degrees, [0.0 360.0].

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_setClipartOrientation(caps_clipart*,CTVector,System.Single,System.Single)">
    @brief
    Adjusts the orientation of a clipart previthe most recently inserted clipart.

    The coordinates given to this function is interpreted as being within the
    current coordinate system. See section 'Coordinate conversions'
    in @ref caps_baseapi_screen
    
    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the clipart.

    @param scale    
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @remarks

    Note that a clipart handle is invalid after calling caps_endClipart() with
    it. The behaviour when calling this function with an invalid clipart handle
    is undefined.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa    
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_beginClipartFromBuffer(cips*,CTBuffer*,OWNERSHIP_POLICY,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector,System.Single,System.Single,caps_clipart**)">
    @brief
    Begins the task of inserting a buffered clipart image on the current 
    session image.

    @param session 
    A valid session handle.

    @param buffer 
    A @c CTBuffer pointer to the buffer data. The format of the data within this
    buffer must be specified through the @c format argument. Ownership of the
    buffer remains with the caller but must stay alive until the associated
    session is destroyed.

	@param bufferOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a buffer argument. If CAPS is given
	ownership responsibility over @a buffer, it will be destroyed using
	caps_destroyBuffer() when no longer needed. Available since 3.2.
    The ownership is only transfered to CAPS if the function succedes.

    @param format 
    The format of the image data contained in @c buffer. Can be any of the
    formats specified in the @c ::IMAGE_FORMAT_SPEC enumeration.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the 
    clipart.

    @param scale    
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @param out_clipart
    Pointer to a clipart handle which will receive the handle to the clipart
    for subsequent adjustments and conclusion of the clipart insertion. See
    remarks section for details.

    @remarks

    The task of inserting a clipart is carried out in three stages:

    @li 1.) Begin clipart insertion.
    @li 2.) Adjust clipart orientation (optional)
    @li 3.) End clipart insertion.

    Between step 1 and 3, no other effects or operations may be carried out.
    I.e. the clipart insertion task have to be concluded/ended before proceeding
    with other effects. A clipart cannot be modified once the insertion
    process has been ended, the clipart handle is effectively turned invalid
    after calling caps_endClipart().
    
    @return 
    @c CERR_OK if successful or a specific error code upon failure.
    
    @sa
    caps_setClipartOrientation()\n
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromRaw()\n
    caps_beginClipartFromFile()

    @since 3.1 (parameters modified in 3.2)

</member>
        <member name="M:caps_beginClipartFromFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector,System.Single,System.Single,caps_clipart**)">
    @brief
    Begins the task of inserting a clipart image on the current session image.

    @param session 
    A valid session handle.

    @param filename 
    String specifying the filesystem path of the image.

    @param format
    The image format of the file.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the clipart.

    @param scale    
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @param out_clipart
    Pointer to a clipart handle which will receive the handle to the clipart
    for subsequent adjustments and conclusion of the clipart insertion. See
    remarks section for details.

    @remarks

    The task of inserting a clipart is carried out in three stages:
    @li 1.) Begin clipart insertion.
    @li 2.) Adjust clipart orientation (optional)
    @li 3.) End clipart insertion.

    Between step 1 and 3, no other effects or operations may be carried out.
    I.e the clipart insertion task have to be concluded/ended before proceeding
    with other effects. A clipart cannot be modified once the insertion
    process has been ended, the clipart handle is effectively turned invalid
    after calling caps_endClipart().

    The following image formats are supported for the input image file:
    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromRaw()\n
    caps_beginClipartFromBuffer()

    @since 3.0 (parameters modified in 3.2, support for more formats in 3.8)

</member>
        <member name="M:caps_beginClipart(cips*,CTStream*,OWNERSHIP_POLICY,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector,System.Single,System.Single,caps_clipart**)">
    @brief
    Begins the task of inserting a clipart image on the current session image.

    @param session 
    A valid session handle.

    @param pStream 
    A pointer to a stream containing a image.

    @param streamOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pStream argument. If CAPS is given
    ownership responsibility over @a pStream, it will be destroyed using
    caps_destroyStream() when no longer needed. 
    The ownership is only transfered to CAPS if the function succeeds.

    @param format
    The image format of the stream.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the clipart.

    @param scale
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @param out_clipart
    Pointer to a clipart handle which will receive the handle to the clipart
    for subsequent adjustments and conclusion of the clipart insertion. See
    remarks section for details.

    @remarks

    The task of inserting a clipart is carried out in three stages:

    @li 1.) Begin clipart insertion.
    @li 2.) Adjust clipart orientation (optional)
    @li 3.) End clipart insertion.

    Between step 1 and 3, no other effects or operations may be carried out.
    I.e the clipart insertion task have to be concluded/ended before proceeding
    with other effects. A clipart cannot be modified once the insertion
    process has been ended, the clipart handle is effectively turned invalid
    after calling caps_endClipart().

    The following image formats are supported for the input image stream:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()\n
    caps_beginClipartFromBuffer()

    @since 3.8

</member>
        <member name="T:caps_clipart">
@} 
@defgroup fxgroup_clipart Clipart 
@{

@brief The handle type used for clipart insertion sessions.

</member>
        <member name="M:caps_insertFrameFromRaw(cips*,CTImage*,OWNERSHIP_POLICY)">
    @brief
    Inserts a frame on the current session image.
   
    @param session
    Handle to a valid session.
    
    @param image
    An @c CTImage containing raw data. The ownership of the raw data buffer
    stays with the caller but must stay alive until the session is destroyed.
    
	@param imageOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a image argument. If CAPS is given
	ownership responsibility over @a image, it will be destroyed using
	caps_destroyImage() when no longer needed. Available since 3.2.
    The ownership is only transfered to CAPS if the function succedes.

    @remarks
    A frame is an overlay image stretched or contracted to fit the size of the
    session image.\n\n

    IMPORTANT:\n
    The raw image data must be in one of the following color formats:
    - @c CM_AYUV4444
    - @c CM_ARGB8888
    - @c CM_BGRA8888
    - @c CM_RGB565_G0
    .

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    casp_insertFrame()\n
    caps_insertFrameFromBuffer()\n
    caps_insertFrameFromFile()

    @since 3.1 (parameters modified in 3.2)


</member>
        <member name="M:caps_insertFrameFromBuffer(cips*,CTBuffer*,OWNERSHIP_POLICY)">
    @brief
    Inserts a frame on the current session image.
   
    @param session
    Handle to a valid session.
    
    @param buffer
    A memory buffer containing the frame image. The ownership of the buffer
    stays with the caller and must stay alive until the session is destroyed.
    
	@param bufferOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a buffer argument. If CAPS is given
	ownership responsibility over @a buffer, it will be destroyed using
	caps_destroyBuffer() when no longer needed. Available since 3.2.
    The ownership is only transfered to CAPS if the function succedes.

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image.

    The following image types are supported:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFrom()\n
    caps_insertFrameFromFile()\n
    caps_insertFrameFromRaw()

    @since 3.1 (parameters modified in 3.2, support for more image types in 3.8)

</member>
        <member name="M:caps_insertFrameFromFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Inserts a frame on the current session image.
   
    @param session
    Handle to a valid session.
    
    @param filename
    String specifying the filesystem path of the image.
    
    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image.

    The following image types are supported:

    @li PNG
    @li GIF
    @li JPEG 
    @li BMP
    @li WBMP
    @li TIFF

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFrom()\n
    caps_insertFrameFromBuffer()\n
    caps_insertFrameFromRaw()

    @since 3.0 (support for more image types in 3.8)

</member>
        <member name="M:caps_insertFrame(cips*,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,OWNERSHIP_POLICY)">
@ingroup fm_photoart
@file fm_photoart_clipart.h
@brief Defines the available API's clipart and frame effect 
in Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fxgroup_frame Frame
@{

    @brief
    Inserts a frame on the current session image.

    @param session
    Handle to a valid session.

    @param pStream
    A pointer to a stream containing the frame image. The ownership of the stream
    stays with the caller and must stay alive until the session is destroyed.

    @param format
    The image format of the stream.

    @param streamOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pStream argument. If CAPS is given
    ownership responsibility over @a pStream, it will be destroyed using
    caps_destroyStream() when no longer needed. 
    The ownership is only transferred to CAPS if the function succeeds.

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image.

    The following image types are supported:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFromFile()\n
    caps_insertFrameFromBuffer()\n
    caps_insertFrameFromRaw()

    @since 3.8


</member>
        <member name="M:ctbitmaputil_initCroppedBitmap(CTBitmap*,CTRect,CTBitmap*)">
    @brief Crops a rectangle from a bitmap and inits a bitmap from that area.
           Data is still owned by source

    @param pSrc The source bitmap that will be cropped.
    @param rect Cropped area
    @param pBitmap[out] Cropped bitmap

    @return CRESULT indicating result of the operation.
 

</member>
        <member name="M:ctbitmaputil_scaleUpGaussian3x3(CTBitmap*,CTBitmap*)">
    @brief
    Gaussian factor 2 upscaling (kernel size 3x3) of a bitmap. The relation between input and 
    output images sizes must satisfy ((outWidth + 1) / 2 == inWidth) and ((outHeight + 1) / 2 == inHeight)
    The following color formats are supported:
    CM_GRAY8
    CM_ARGB8888
    CM_BGRA8888

    @param pIn The bitmap do scale up
    @param pOut The upscaled bitmap

    @return
    @c CERR_OK on success.
    @c CERR_NOT_IMPLEMENTED if the colormode is not supported

</member>
        <member name="M:ctbitmaputil_scaleDownGaussian3x3(CTBitmap*,CTBitmap*)">
    @brief
    Gaussian factor 2 downscaling (kernel size 3x3) of a bitmap. The relation between input and 
    output images sizes must satisfy ((inWidth + 1) / 2 == outWidth) and ((inHeight + 1) / 2 == outHeight)
    The following color formats are supported:
    CM_GRAY8
    CM_ARGB8888
    CM_BGRA8888

    @param pIn The bitmap do scale down
    @param pOut The downscaled bitmap

    @return
    @c CERR_OK on success.
    @c CERR_NOT_IMPLEMENTED if the colormode is not supported

</member>
        <member name="M:ctbitmaputil_crop(CTBitmap*,CTRect)">
    @brief
    Crops a bitmap by just updating the data pointers for each plane and without actually copying/moving the data.
    Image must be CM_YUV420P.

    @param [out]
    pBitmap The bitmap to crop. Must be CM_YUV420P.
    @param
    cropRect The rectangle to crop the image to.

    @return CERR_OK on success.

</member>
        <member name="M:ctbitmaputil_copyPlane(CTPlane,CTPlane)">
    @brief Copies all image data from the input plane to the output plane.

    The planes must have the same dimensions and color format.
    The planes may have different scanlines.

    @param planeIn Input plane
    @param planeOut Output plane

    @note
    Data that is outside the plane's data buffer is not copied nor accessed.
    For example, if the (input and/or output) scanline is larger than the 
    minimum scanline, padding bytes are not copied to or from.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_copyData(CTBitmap*,CTBitmap*)">
    @brief Copies all image data from the input bitmap to the output bitmap. 
    This does not include data that is outside the bitmap but in the bitmap's data buffer.

    The bitmaps must have the same dimensions and the same color format.

    @param pIn Input bitmap.
    @param pOut Output bitmap.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_fillWithColor(CTBitmap*,System.Byte*)">
    @brief Fills a bitmap with the specified color pattern.

    For a bitmap, each channel will fetch a number of bytes from pPattern according
    to its bpp, and repeat those across the channel.

    For instance, on CM_YUV420SP, pPattern[0] is used for the Y channel, and 
    pPattern[1] and pPattern[2] are repeated across the UV channel.

    The function fails for color modes where one or more channels has a bpp which
    is not dividable by eight.

    @param pBitmap Bitmap to fill with data.
    @param pPattern Pattern to use for filling. Length of this array is given
    by the bitmap structure (from 1-4 bytes).

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_fill8(CTBitmap*,System.Byte)">
    Set all pixel data in a CTBitmap to a given byte value

    @param pBitmap The bitmap to fill
    @param val Value to set

</member>
        <member name="M:ctbitmaputil_unserialize(CTBuffer*,CTBitmap**)">
    @brief Creates a bitmap from a representation created with 
    ctbitmaputil_serialize.

    @param pBuffer Buffer containing data serialized with ctbitmaputil_serialize.
    @param ppBitmap[out] Output bitmap when successful.

    @return CRESULT indicating result of the operation. CERR_MEMORY_OUT_OF_BOUNDS
    if there is not enough data in pBuffer to unserialize the bitmap.

</member>
        <member name="M:ctbitmaputil_serialize(CTBitmap*,CTBuffer**)">
    @brief Serializes a CTBitmap into a CTBuffer.

    @param pBitmap Bitmap to serialize
    @param ppBuffer[out] Output buffer if sucecssful. Caller owns this buffer.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_initFromDataPlanar(System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,CTSize,CTColormode,CTBitmap*)">
    Initiates a CTBitmap from the pointers given by ppData.

    @param ppData       Pointer to an array of data pointers. ppData[n] points 
                        to the nth plane's pixel data.
    @param pScanline    Pointer to an array of scanlines.
    @param dims         Dimensions of the bitmap representation
    @param format       Color mode of the pixels described by pData
    @param pBitmap      The bitmap to initiate.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_initFromData(System.Byte*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBitmap*)">
    Initiates an image from the pointer given by pData.
 
    @param pData        Pointer to a byte buffer of pixel data.
    @param dims         Dimensions of the bitmap representation
    @param scanline     Scanline of the bitmap representation. If set to zero, a
                        suitable scanline will be assigned.    
    @param format       Color mode of the pixels described by pData
    @param pBitmap      The bitmap to initiate.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_initFromImage(CTImage*,CTBitmap*)">
    Initiates a ctbitmap from an existing ctimage. Memory is shared between the
    two structures.
    
    @param pImage       Existing image. This image must be kept alive at least as long
                        as the initiated bitmap.
    @param pBitmap      The bitmap to initiate.
 
    @return CRESULT indicating success. Only when CERR_OK is true will pBitmap be
    written to.

    @deprecated This functionality is deprecated. Use ctbitmaputil_initFromData()
    instead.

</member>
        <member name="M:ctbitmaputil_createFromBitmap(CTBitmap!System.Runtime.CompilerServices.IsConst*,CTBitmap**)">
    @brief Creates a bitmap from another bitmap. The created bitmap points to the
    same data as the input bitmap.

    @param pBitmap Input bitmap
    @param[out] ppBitmap Output bitmap from the function.

    @return
    - ::CERR_OK if everything went ok.
    - Other error code on specific failure.
    .

</member>
        <member name="M:ctbitmaputil_getPlaneByteSize(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns the smallest needed size (in bytes) of the bitmap plane. This
    size includes space for all defined scanlines, except for the last row which
    is covered only up until the last pixel (as defined by the plane 
    dimensions).

    @param pBitmap          Bitmap to query for size.
    @param bitmapPlane      Index of a valid bitmap plane.

    @return Size of the bitmap plane in bytes, or zero if an error occurs.

</member>
        <member name="M:ctbitmaputil_getPlaneOffsetAtEx(CTPlane,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns a pointer to the plane pixel data at a specific position

    @param plane A valid plane.
    @param x     Coordinate of the pixel to query.
    @param y     Coordinate of the pixel to query.

    @note This function is highly inefficient for image processing but can
    be used for initially positioning a pointer or similar.

    @return Pointer to a position in the byte buffer where the desired pixel
    is stored or NULL if the point is not valid for that plane.

    @sa ctbitmaputil_getPlaneOffsetAt()

</member>
        <member name="M:ctbitmaputil_getPlaneOffsetAt(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns a pointer to the plane pixel data at a specific position

    @param pBitmap      Pointer to a valid bitmap
    @param imagePlane   Index of a valid pixel plane
    @param x            Coordinate of the pixel to query.
    @param y            Coordinate of the pixel to query.

    @note This function is highly inefficient for image processing but can
    be used for initially positioning a pointer or similar.

    @return Pointer to a position in the byte buffer where the desired pixel
    is stored or NULL if the point is not valid for that plane.

    @note Because pixels are accessed in the plane's coordinate system, this
    function is hard to use correctly for subsampled pixel formats.

    @sa ctbitmaputil_getPlaneOffsetAtEx()

</member>
        <member name="M:ctbitmaputil_getByteSize(CTBitmap*)">
    @brief Returns the size of the bitmap as defined by the scanline and height
    of all planes. This is typically the minimum size needed to fully represent
    the bitmap.

    @param pBitmap Pointer to a valid bitmap object.

    @return Unsigned integer which represents the total size of all the bitmap
    pixel data, or zero if an error occured.

    @note This function returns a value possibly larger than summing up the size
    of all bitmap planes.


</member>
        <member name="M:ctbitmaputil_isEqualPixelWise(CTBitmap*,CTBitmap*)">
    @brief Checks if two bitmaps have the same pixel contents. This also means
    that they are similar, as checked by ctbitmaputil_isEqual.
 
    @param pBitmap1 First bitmap to check
    @param pBitmap2 Second bitmap to check
 
    @return CTbool indicating equalness. A null pointer is not equal to another
    bitmap, not even another null pointer.

</member>
        <member name="M:ctbitmaputil_isEqual(CTBitmap*,CTBitmap*)">
    @brief Checks if two bitmaps are similar in size, color mode, dimensions and
    all other characteristics, apart from pixel contents.
 
    @param pBitmap1 First bitmap to check
    @param pBitmap2 Second bitmap to check
 
    @return CTbool indicating equalness. A null pointer is not equal to another
    bitmap, not even another null pointer.
 
    @note Color mode checks will check against the color mode alias, so, for
    instance CM_RGB565FD is equal to CM_RGB565.

</member>
        <member name="M:ctbitmaputil_createFromImageCopy(CTImage*,CTBitmap**)">
    @brief Creates a new bitmap by copying the contents of the image.
 
    @param pImage Image to be copied
    @param ppBitmap Bitmap to be created
 
    @note This creates a duplicate of the image, with a separate life cycle.
    This means that no memory is shared, so the image may be destroyed 
    afterwards.

</member>
        <member name="M:ctbitmaputil_initPlaneWithImage(CTImage*,CTPlane*)">
    @brief Initializes a CTPlane from a CTImage

    @param pSrcImage CTImage from which to fetch settings. The CTImage must have a format/colormode that has only one plane.
    @param pDstPlane CTPlaen on which settings are written.

    @note The resulting CTPlane will point to the same pixel data as the CTImage. No pixels are copied.

    @return CRESULT indicating success.

</member>
        <member name="M:ctbitmaputil_initImageWithBitmap(CTBitmap*,CTImage*)">
    @brief Initializes a ctimage struct to contain the same data as a ctbitmap
 
    @param pBitmap  Bitmap from which to fetch settings.
    @param pImage   Image on which settings are written.
 
    @note If the image contains allocated data, this data will be overwritten
    in favor of the already existing data. This may incur memory leaks if the
    image contains allocated pixel data. Regardless of success of this function
    the image parameter is overwritten.
 
    @note Ownership of the pixel buffer is not transfered. Pixel data is not
    copied, and the initialized image will simply point to the same data as the
    bitmap. When the image is destroyed, the pixel buffer must not be deallocated
    because it does not belong to the image.
 
    @return An error code if the function fails, or CERR_OK if successful. The
    image is normally overwritten regardless of success.

</member>
        <member name="M:ctbitmaputil_isValidBitmap(CTBitmap!System.Runtime.CompilerServices.IsConst*)">
    @brief Performs internal checks to see if the bitmap is valid.
 
    In essence, this checks that:
    @li All planes are valid
    @li The bitmap dimensions are valid (ie. both larger than zero)
    @li colorMode is set to a valid enum
    
    @param pBitmap      Pointer to a bitmap.
    
    @return True if the bitmap is valid, false if not.
    
    @note In debug builds, additional asserts are checked, to make sure that 
    the bitmap (and all planes) point to allocated heap memory.

</member>
        <member name="M:ctbitmaputil_isValidPlane(CTPlane!System.Runtime.CompilerServices.IsConst*)">
    @brief Checks if a plane appears to contain valid data and settings.
 
    More specifically, this call checks that
    @li dims are valid image dimensions.
    @li scanline is at least bpp of the color mode times the width
    @li colorMode is a valid enum
 
    @param pPlane Pixel plane to check
 
    @return Boolean indicating if the plane is valid.
 
    @note In debug builds, additional memory checks are performed.

</member>
        <member name="M:util_isValidColorModeDesc(CTColorModeDesc*)">
    @brief Checks if a color mode descriptor describes a valid color mode and is
    internally consistent (ie. planar color modes have multiple planes
    defined).
 
    @param pDesc    Color mode descriptor to check
 
    @return Boolean indicating whether the descriptor is valid.

</member>
        <member name="M:util_getColorModeDesc(CTColormode,CTColorModeDesc*)">
    @brief Returns the entire color mode descriptor for a specific color mode.
 
    @param colorMode Color mode to retrieve descriptor for.
    @param pDesc     Pointer to a color mode descriptor.
 
    @return 
    @li CERR_OK if successful
    @li CERR_INVALID_COLORMODE if the supplied color mode was invalid
    @li CERR_INVALID_PARAMETER if parameters to the function were otherwise
    invalid.

</member>
        <member name="M:util_getSimpleScanline(CTColormode,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Calculates a scanline according to the scanline definition.
 
    This means that the scanline is defined by the needed buffer size divided
    by the number of rows. This is true for interleaved formats, but for planar
    formats, each plane has its own scanline, and this function does not help
    to evaluate those planes.
 
    @param colorMode 
    Color mode from which to generate a scanline. Note that the color mode may
    pose requirements on the scanline in form of alignment and so on, as well as
    the number of bits per pixel required.
 
    @param width
    Width of the bitmap
 
    @return Width in bytes of a buffer large enough to hold all of the pixel
    data, or zero if an error occured.
 
    @note This function can be used to get an appropriate scanline for
    interleaved color modes. Knowing the "global" scanline is generally not
    useful for planar modes.

</member>
        <member name="M:util_getColorModeAlias(CTColormode)">
    @brief Returns an alias to the specified color mode.
 
    An alias is defined as the color mode without otherwise describing features.
 
    Most color modes do not have aliases.
 
    @param colorMode    Color mode to retrieve alias for.
 
    @return
    Alias of the color mode, or CM_UNDEFINED if color mode is not valid.

</member>
        <member name="M:util_getSubSamplingFactor(CTSubSampling,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns the sub sampling factor in horizontal and vertical direction for a given image plane

    @param CTColor
    @param plane index of plane

    @return Vector with x as horizontal and y as vertical subsampling factor.

    @remark For unknown subsampling factor or undefined subsampling factor and plane combination,
    1 is returned for both x and y.

</member>
        <member name="M:util_getSubSampling(CTColormode)">
    @brief Returns the sub sampling associated with a color mode.
 
    @param colorMode    Color mode to check
 
    @return Sub sampling mode of the specified color mode or 
    SCB_SUBSAMPLING_UNKNOWN if an error occured.

</member>
        <member name="M:util_getPlanes(CTColormode,CTColorModePlane*)">
    @brief Returns information about the number of planes defined by a
    specific color mode, as well as the layout of each plane.
 
    @param colorMode    Color mode to check
    @param pPlane       Array of color mode planes
 
    @return Number of defined planes, or zero if an error occured.
 
    @note The array of color mode planes must be at least MAX_PLANE_COUNT
    long.

</member>
        <member name="M:util_isValidColorMode(CTColormode)">
    @brief Checks if a color mode is correctly defined. This is mostly used as
    an internal consistency check to verify that the supplied color mode is ok
    to use.
 
    @param colorMode Color mode to check
 
    @return True if the specified color mode is ok to use.

</member>
        <member name="M:util_isAlphaColormode(CTColormode)">
    @brief
    Check if color mode has alpha information
 
    @param colormode Colormode of image
 
    @return true if color mode has alpha information otherwise false.

</member>
        <member name="M:util_getPixelBitSize(CTColormode)">
    @brief Number of bits per pixel
 
    Bits per pixel is the number of bits needed to represent a single pixel.
    For many color modes, in particular interleaved (only one plane) this
    is straight forward to define.
 
    For planar color modes, the bits per pixel is most easily defined as the
    average number of bits per each pixel in an infinitely large bitmap.
 
    This rather complex definition comes from the fact that the number of bits
    needed for a sub sampled bitmap of odd dimensions divided by the number of
    pixels is not (necessarily) an integer.
 
    An example (sizes as cols x rows):
    YUV422 1x1 pixels, takes 24 bits --&gt; 24 bpp.
    YUV422 1x2 pixels, takes 32 bits --&gt; 16 bpp (what the function returns).
    YUV422 1x3 pixels, takes 56 bits --&gt; 18.67 bpp.

    @param colormode Colormode to check for bpp
 
    @return Number of bits per pixel.
 
    @note Bits per pixel is normally only useful for simple color modes. 
    Although it is defined for planar formats as an average over the separate
    image planes, subsampling effects may lead to situations where the bit size
    is not suitable for scanline calculations. Use ::util_calcMinimumByteSize
    for size calculations.

</member>
        <member name="M:util_calcMinimumByteSize(CTSize,CTColormode)">
    @brief Calculates minimum image size in bytes
 
    Bitmap size is calculated by splitting each bitmap into the necessary
    planes and calculating the minimum size for each, then summing those
    partial sizes.
 
    @param dims Size of image
    @param colormode Color mode of the image
 
    @return Number of bytes necessary to store image or zero if an error
    occured due to, for instance, invalid input.


</member>
        <member name="M:util_isValidImage(CTImage!System.Runtime.CompilerServices.IsConst*)">
    @brief Checks if image is valid.
 
    A valid image means that the image:
    @li Has a valid (as defined by util_isValidBuffer) buffer.
    @li Has a valid color mode (as defined by util_isValidColorMode), or has 
    color mode set to CM_UNDEFINED.
    @li Both dimensions are larger than zero.
    @li Both dimensions are smaller than 16384 current max image size.
    @li The scanline is at least wide enough so that the number of bits per
    pixel times width, rounded up to a byte, is contained. This check is omitted
    if color mode is set to CM_UNDEFINED.
    @li Total buffer size must be at least scanline times height bytes.
 
    @param pImage
    Pointer to an image.
 
    @return true if image is valid

</member>
        <member name="M:util_strcmp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Compare two char strings. Use scbstr_compare() for comparison of DCHAR strings.

    @param pString1
    Pointer to an initialized char string.

    @param pString2
    Pointer to an initialized char string.

    @return     
    - less than 0:	pString1 is less than pString2
    - equal to 0:	pString1 is the same as pString2
    - larger than 0:	pString1 is greater than pString2

    @sa
    scbstr_compare();

</member>
        <member name="M:util_binarySearch(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32!System.Runtime.CompilerServices.IsLong(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*),System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get the position of @c pElement in @c pElementArray.

    @param pElementArray
    Pointer to an initialized array.

    @param arrayLength
    The number of elements in @c pElementArray.

    @param elementSize
    The size in bytes of the element type in the array.

    @param pElement
    Pointer to an initialized element, holding the value of the element to get the position for.

    @param compareFunc
    Pointer to callback function used for the compare. See @c typedef compareFunc for more info.

    @param[out] pPosition
    Pointer to an initialized @c ::CTint. On return it contains the position that matched @c pElement. If no match was found the logical insert position will be returned.

    @return
    @c CERR_OK if successful. 
    @c CERR_ITEM_NOT_FOUND if there is no element matching @c pElement

</member>
        <member name="D:compareFunc">
    @brief
    Comparison function callback definition, for use with util_binarySearch function.

    @param pElement1
    Pointer to the key for the search.

    @param pElement2
    Pointer to the array element to be compared with the key.

    @return
    Must return:
    - less than 0:	pElement1 is less than pElement2
    - equal to 0:	pElement1 is the same as pElement2
    - larger than 0:	pElement1 is greater than pElement2

</member>
        <member name="M:util_quickselect(System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong)">
	Compute median value using Hoares selection algorithm, also known as Quickselect.
    If there is an even number of values, this algorithm returns the lower of the two middle values.

    @param array 
    The array of values to get the median from. Note that the array is not const, ie 
    the order of the elements in the array may change.
    @param count Number of values in the array.  

    @return The median if an odd number of values or the largest value in the array below the median 
    if an even number of values or 0 if count is 0. 

</member>
        <member name="M:util_quickSort32(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,=FUNC:System.Int32!System.Runtime.CompilerServices.IsLong(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*))">
Implements standard quick sort with 32bits parameters.

@param base
Start of target array.

@param num
Array size in elements.

@param width
Element size in bytes.

@param comp
Comparison function callback. The first parameter to this function is a 
pointer to the key for the search and the second parameter is a pointer 
to the array element to be compared with the key.

</member>
        <member name="M:util_quickSort(System.Void*,System.UInt16,System.UInt16,=FUNC:System.Int32!System.Runtime.CompilerServices.IsLong(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*))">
Implements standard quick sort.

@param base
Start of target array.

@param num
Array size in elements.

@param width
Element size in bytes.

@param comp
Comparison function callback. The first parameter to this function is a 
pointer to the key for the search and the second parameter is a pointer 
to the array element to be compared with the key.

</member>
        <member name="M:util_rectFitVertical(CTRect!System.Runtime.CompilerServices.IsConst*,CTRect!System.Runtime.CompilerServices.IsConst*,CTRect*)">
	Computes the widest rectangle that can be fitted within the union of two rectangles
	
	@param r1	A Rectangle
	@param r2	Another Rectangle
    @param rectOut A pointer to the output rectangle
	
    @return a RectIntersect


</member>
        <member name="M:util_rectFitHorizontal(CTRect!System.Runtime.CompilerServices.IsConst*,CTRect!System.Runtime.CompilerServices.IsConst*,CTRect*)">
	Computes the highest rectangle that can be fitted within the union of two rectangles
	
	@param r1	A Rectangle
	@param r2	Another Rectangle
    @param rectOut A pointer to the output rectangle
	
    @return a RectIntersect


</member>
        <member name="M:util_rectUnion(CTRect!System.Runtime.CompilerServices.IsConst*,CTRect!System.Runtime.CompilerServices.IsConst*,CTRect*)">
@brief Number of items in an array

	Computes the union between two rectangles.
	
	@param r1	A Rectangle
	@param r2	Another Rectangle
    @param rectOut A pointer to the output rectangle
	
    @return a RectIntersect


</member>
        <member name="M:util_shrinkToAspect(CTSize,CTSize,CTSize*)">
    @brief
    Computes the largest CTSize that is smaller than the specified original
    size, but has the same aspect ratio as the aspect parameter.

    @param original     Original size
    @param aspect       Target aspect ratio
    @param pRetracted   Pointer to a CTSize where the result is stored.

    @return An error code, or CERR_OK if successful.

    @note
    This function can only operate on sizes where both dimensions are larger 
    than zero.

</member>
        <member name="M:util_expandToAspect(CTSize,CTSize,CTSize*)">
    @brief
    Returns the smallest CTSize that is larger than the original, but has the
    same aspect ratio as the aspect parameter.

    @param original     Original size
    @param aspect       Target aspect ratio
    @param pExpanded    Pointer to a CTSize where the result is stored.

    @return An error code, or CERR_OK if successful.

    @note
    This function can only operate on sizes where both dimensions are larger 
    than zero.

</member>
        <member name="M:util_isValidImageDims(CTSize)">
    @brief Checks if a set of dimensions is valid to use as image/bitmap size.
 
    @param dims CTSize variable to check
 
    @return Boolean which indicates if the dims can be used.

</member>
        <member name="M:util_destroyImage(CTImage*)">
    @brief 
    Destroys a previously created @c CTImage object.

    @param pImage
    The @c CTImage object to destroy. This pointer is invalid when the function
    returns.

    @since 3.7

</member>
        <member name="M:util_createImage(CTBuffer*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTImage**)">
    @brief 
    Creates a @c CTImage object.

    @param pPixels
    Optional argument, a @c CTBuffer pointer which will be set as the pixel buffer 
    of the image. Ownership of the buffer is taken over by the image and will
    be deallocated when the image is destroyed. If this argument is set to @c NULL
    a buffer will be allocated internally for the image.

    @param dims
    The dimensions in pixels of the image.

    @param scanline
    The width in bytes of one scanline within the image.
 
    For a planar pixel format, the scanline specifies the number of bytes needed
    for the pixel buffer for a single row of pixels. That is, the total needed
    size for the image is scanline * height bytes.
 
    For an interleaved image the above holds true, but in this special case, the
    scanline also means the number of bytes for each row of pixels.
 
    If set to zero, an appropriate scanline will be assigned to the image. Note
    that if pixel data is provided with the pPixels parameter, this may not match
    the intended scanline, and the image will appear corrupted. If color mode is
    set to CM_UNDEFINED, the scanline must be set to a non-zero value.

    @param format
    The color mode format of the image. See @c CTColormode enumeration. If this 
    parameter is CM_UNDEFINED an image with a size of scanline * height bytes is
    created.

    @param ppImage
    (OUT) The created @c CTImage object returned as an output argument. If the
    function fails this argument is NULL.

    @remarks

    The arguments passed to this function are precisely corresponding with
    the members of @c CTImage. See documentation of this type for more info.
 
    Note that it may be very hard to correctly specify the scanline parameter 
    for an image when the color mode is subsampled. Due to this, it is strongly
    recommended to set the scanline to zero.
    \n
   
    @return 
    @c CERR_OK if successful or a specific error code upon failure.


    @since 3.0

</member>
        <member name="M:util_getLegacyBitmapLayout(CTSize,CTColormode,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Calculate ctbitmap properties that are maximally compatible with
    ctimage.

    @param dims
    The dimensions in pixels of the image.

    @param format
    The color mode format

    @param[in/out] scanlines
    Array of scanlines.
    If set to 0, suitable scanlines will be calculated.

    @param[out] offsets
    Array of offsets for each plane of the color format.
    offsets[0] is always 0.

    @param[out] pNumScanlines
    Number of planes for this CTColormode.

    @param[out] pTotalSize
    Total size in bytes of the bitmap if it is in one contigous buffer.

    @return CERR_OK or an error code.

    @remark This function does not guarantee that a CTImage can be created from a
    CTBitmap (or other container) using its output. The function guarantees that if
    a compatible layout is possible, given the input parameters, it is the output of
    this function.

</member>
        <member name="M:util_isValidBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*)">
    @brief Verifies if a CTBuffer object is valid.
 
    Specifically, a valid buffer must satisfy:
    @li The pBuffer pointer itself must not be null.
    @li Size must be larger than zero.
    @li The data field must not be null.
     
    @param pBuffer      The CTBuffer to validate.
 
    @return true if the CTBuffer is valid.
 
    @note In debug builds, additional checks are performed with asserts, which 
    make sure that the data points to a continuous block of allocated memory 
    which is at least size bytes long.

</member>
        <member name="M:util_destroyBuffer(CTBuffer*)">
    Destroys a CTBuffer object.

    @param buffer  The CTBuffer to destroy.

</member>
        <member name="M:util_createBufferCopy(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer**)">
    Allocates a CTBuffer object identical to the input buffer in size and
    contents.

    @param original  The CTBuffer object to copy.
    @param copy      Address of a CTBuffer pointer which will receive
                     the copied buffer.
    @remarks
    
    The resulting buffer should be destroyed using util_destroyBuffer() 
    when no longer needed.

    @return CERR_OK if successful, or an error code on failure.

</member>
        <member name="M:util_createBuffer(System.UInt32!System.Runtime.CompilerServices.IsLong,CTBuffer**)">
	Allocates a CTBuffer object with the given size.
	
	@param size         The size in bytes to allocate for the buffer.
    @param out_buffer   Address of a CTBuffer pointer which will receive
                        the new object.

    @remarks
    
    The created buffer should be destroyed using util_destroyBuffer() when
    no longer needed.

    @return CERR_OK if successful, or an error code on failure.

</member>
        <member name="M:util_stackSetAt(CTStack*,System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)">
Overwrite item at index with a new node

This operation DBC_REQUIRES that the index is valid for the current stack size.


</member>
        <member name="D:int8_t">
@defgroup util_apiref scbutil API Reference
@{

    @file scbutil.h

    TODO: $PublicHeaderFileDescription$

</member>
        <member name="M:oslmem_realloc(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Realloc's memory from the heap.

    @param pObject Pointer to old object.
    
    @param size Amount in bytes of the size of the object.
    
    @return Pointer to resized object.
 
    @note This function is implemented by Scalado, and does not need to be 
    implemented as part of the osil integration efforts.
    

</member>
        <member name="M:oslmem_allocReset(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void**)">
    Allocates and reset memory from the heap.
    
    @param size Amount in bytes of the size of the object.
    @param ppObject Pointer where the object will be allocated.
    
    @return CERR_OK if no errors, CERR_MEMALLOC_FAILED otherwise.
 
    @note This function is implemented by Scalado, and does not need to be 
    implemented as part of the osil integration efforts.
    

</member>
        <member name="M:oslmem_free(System.Void*)">
    @brief
    Frees a previously allocated block of memory.

    @param p Address of the memory to free. Can be zero.

</member>
        <member name="M:oslmem_alloc(System.UInt32!System.Runtime.CompilerServices.IsLong)">
@ingroup os_memory
@file oslmem.h
@brief Declares the virtual interface (used internally in CAPS), providing
support for memory management.

    @addtogroup os_memory
    @brief Mapping of basic OS memory functionality.

    These function declarations are found in the header file: oslmem.h

    @{

    @brief
    Allocates memory from the heap.

    @param size Size in bytes of the memory to be allocated.

    @return A pointer to the allocated memory if succesful, or zero if the 
            allocation failed.

</member>
        <member name="P:Nokia.Graphics.Imaging.CurveGenerator.NumberOfPoints">
            <summary>
Returns the number of control points currently in the CurveGenerator. 
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurveGenerator.Generate">
            <summary>
Generates the curve defined by the control points in the selected range.
There must be at least two control points in the CurveGenerator
to define a curve. The resulting curve is truncated to fit 
the selected range.  
</summary>
            <returns>Array with generated values which defines the curve.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurveGenerator.DeletePoint(Windows.Foundation.Point)">
            <summary>
Delete a control point from the CurveGenerator. 
</summary>
            <param name="point">
Control point.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurveGenerator.AddPoint(Windows.Foundation.Point)">
            <summary>
Add a control point to the CurveGenerator. Any previously added
control point sharing the same x-value as the new control point
will be replaced.
</summary>
            <param name="point">
Control point.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurveGenerator.ClearPoints">
            <summary>
Clears all control points currently set in CurveGenerator
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CurveGenerator.Points">
            <summary>
Represents control points. 
Control points can be set and current control points can be fetched.
When setting control points all previously added points to CurveGenerator will be deleted. 
The control points in the array must be strictly ascending with respect to x.
</summary>
            <value name="points">
Array of control points.
</value>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurveGenerator.SetRange(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
Sets range when rendering look-up table
</summary>
            <param name="min">
Minimum x and y value.
</param>
            <param name="max">
Maximum x and y value.
</param>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CurveGenerator.CurveType">
            <summary>
Sets the curve type defined in CurveType
</summary>
            <value name="curve">
Curve type
</value>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurveGenerator.#ctor(System.Int32,Nokia.Graphics.Imaging.CurveType,Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
Creates a CurveGenerator with two initial points. The initial points 
can be changed by public methods. 
Calling CurveGenerator::Generate directly after object creation
would generate curve specified with input parameters in constructor.
Curve Handler requires minimum of two points for curve generation.
</summary>
            <param name="numberOfPoints">
The maximum number of control points to be used when
defining the curves.
</param>
            <param name="curve">
One of the curve types defined in CurveType
</param>
            <param name="minRange">
The minimum values of x and y
</param>
            <param name="maxRange">
The maximum values of x and y
</param>
            <param name="stPoint">
Initial first point on the curve.
</param>
            <param name="ndPoint">
Initial second point on the curve.
</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CurveGenerator">
            <summary>
This class handles look-up table generation for Curves filter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CurveType">
            <summary>
This enum represents available curve types used to generate curve filter look-up tables.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CurveType.NaturalCubicSpline">
            <summary>
Use natural cubic spline interpolation between the points.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CurveType.Linear">
            <summary>
Use linear interpolation between the points.
</summary>
        </member>
        <member name="M:caps_lutTools_renderLut(LutTools*,System.Byte*,System.Single*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Render the curve defined by the control points in the selected range.
           There must be at least two control points in the lut tools handle
           to define a curve. The resulting curve is truncated to fit 
           the selected range. The curve might be truncated further to fit
           the current output data type. The result can be rendered to both
           an CTuint8 array and an CTfloat array. These arrays must at least
           contain two elements, i.e. @a size &gt;= 2.
 
    @param h A pointer to a lut tools handle.
 
    @param lutU8 An CTuint8 array in which to store the result, or 0.
 
    @param lutF An CTfloat array in which to store the result, or 0.
 
    @param size The number of elements in the output array.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_deletePoint(LutTools*,CTVector)">
    @brief Delete a control point from the lut tools handle. Only the x-values
           are compared before a control point is being deleted.

    @param h A pointer to a lut tools handle.

    @param p The control point to delete.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_addPoint(LutTools*,CTVector)">
    @brief Add a control point to the lut tools handle. Any previously added
           control point sharing the same x-value as the new control point
           will be replaced.
 
    @param h A pointer to a lut tools handle.
 
    @param p The control point to add.
 
    @return
    @c CERR_OK if successful.
    @c CERR_OPERATION_FAILED if the control point array is full.
    A specific error code upon other faulires.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_clearPoints(LutTools*)">
    @brief Clear all the control points in the lut tools handle.
 
    @param h A pointer to a lut tools handle.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_getPoints(LutTools*,CTVector*)">
    @brief Get the control points currently in the lut tools handle.
 
    @param h A pointer to a lut tools handle.
 
    @param p An array in which to store the control points. The array must
             be big enough to fit all the control points.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_getNrOfPoints(LutTools*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief Get the number of control points currently in the lut tools handle.
 
    @param h A pointer to a lut tools handle.
 
    @param nrPoints A pointer to the resulting number of control points.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_setPoints(LutTools*,CTVector*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Set an array of control points. All points previously added to
           the lut tools handle will be deleted. The control points in
           the array must be strict ascending with respect to x.
 
    @param h A pointer to a lut tools handle.
 
    @param p An array of control points.
 
    @param nrOfPoints The number of control points in the array.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_setRange(LutTools*,CTVector,CTVector)">
    @brief Set the range to use when rendering the lookup table.
 
    @param h A pointer to a lut tools handle.
 
    @param min The minimum values of x and y.
 
    @param max The maximum values of x and y.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_setCurveType(LutTools*,CTLutToolsCurveTypes)">
    @brief Set the curve type.
 
    @param h A pointer to a lut tools handle.
 
    @param type One of the curve types defined in ::CTLutToolsCurveTypes.
 
    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_lutTools_destroyHandle(LutTools*)">
    @brief Destroys a Lookup Table Tools handle.

    @param h A pointer to a lut tools handle.

    @since 5.3

</member>
        <member name="M:caps_lutTools_createHandle(LutTools**,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Creates a Lookup Table Tools handle.

    @param h A pointer to the resulting lut tools handle pointer.

    @param maxNrOfPoints The maximum number of control points to be used when
                         defining the curves.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="T:LutTools">
@brief The handle type used by the lookup table tools. 
</member>
        <member name="F:NATURAL_CUBIC_SPLINE">
Use natural cubic spline interpolation between the points. 
</member>
        <member name="F:LINEAR">
Use linear interpolation between the points. 
</member>
        <member name="M:caps_endRgbMixerLookup(cips*)">
    @brief
    End the RGB Mixer Lookup effect.

    @param session Handle to a valid session.

    @since 5.3

</member>
        <member name="M:caps_setRgbMixerLookup(cips*,System.Byte**,System.Byte**,System.Byte**,System.Byte**)">
    @brief
    Set the color mixer lookup tables. Each table must be 256 bytes in size.
    For each color there are 4 tables, one for each destination color;
    0 = alfa, 1 = red, 2 = green, 3 = blue. You only need to provide pointers
    to the tables you want to update.

    The resulting color (ao,ro,go,bo) is calculated from the input color
    (ai,ri,gi,bi) like this:
 
        ao = sat (alfa[0][ai] + red[0][ri] + green[0][gi] + blue[0][bi])
        ro = sat (alfa[1][ai] + red[1][ri] + green[1][gi] + blue[1][bi])
        go = sat (alfa[2][ai] + red[2][ri] + green[2][gi] + blue[2][bi])
        bo = sat (alfa[3][ai] + red[3][ri] + green[3][gi] + blue[3][bi])

    @param session Handle to a valid session.

    @param alfa A pointer to the alfa-related lookup tables, or 0. Each of
                these 4 pointers can point to a table or be 0.

    @param red A pointer to the red-related lookup tables, or 0. Each of
               these 4 pointers can point to a table or be 0.

    @param green A pointer to the green-related lookup tables, or 0. Each of
                 these 4 pointers can point to a table or be 0.

    @param blue A pointer to the blue-related lookup tables, or 0. Each of
                these 4 pointers can point to a table or be 0.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_beginRgbMixerLookup(cips*)">
@} 
@defgroup fxgroup_rgb_mixer_lookup RGB Mixer Lookup 
@{

    @brief Begin the RGB Mixer Lookup effect. The effect is initiated
    with y=x tables for A, R, G and B respectively, i.e.
 
        alfa  = {y=x, 0, 0, 0}
        red   = {0, y=x, 0, 0}
        green = {0, 0, y=x, 0}
        blue  = {0, 0, 0, y=x}

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_endSimpleRgbLookup(cips*)">
    @brief
    End the Simple RGB Lookup effect.

	@param session Handle to a valid session.

    @since 5.3

</member>
        <member name="M:caps_setSimpleRgbLookup(cips*,System.Byte*,System.Byte*,System.Byte*)">
    @brief
    Set the color lookup tables. Each table must be 256 bytes in size.
    You only need to provide pointers to the tables you want to update.
    E.g. if you want to update the red table you can let green and blue be 0.

	@param session Handle to a valid session.

    @param red A pointer to the red lookup table, or 0.
    
    @param green A pointer to the green lookup table, or 0.
    
    @param blue A pointer to the blue lookup table, or 0.
	
    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_beginSimpleRgbLookup(cips*)">
@ingroup fm_color_adjustments
@file fm_color_adjustments.h
@brief Defines the interface of the Caps Feature Module: @a ColorAdjustments

@addtogroup fm_color_adjustments
@brief Lookup table based color adjustments.
@{

@defgroup fxgroup_simple_rgb_lookup Simple RGB Lookup
@{

    @brief Begin the Simple RGB Lookup effect. The effect is initiated
           with y=x tables for R, G and B.

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.UndoAll">
            <summary>
Removes all filters.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.Undo">
            <summary>
Removes the last added filters.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.CanUndo">
            <summary>
Checks if there are filters to remove.
</summary>
            <returns>true if there are filters to remove.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.AddFilters(Nokia.Graphics.Imaging.IFilter[])">
            <summary>
Adds a list of filters that can be all removed in one Undo() step.
</summary>
            <param name="filter">Array of filters to add to the editing session</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.AddFilter(Nokia.Graphics.Imaging.IFilter)">
            <summary>
Adds a filter that can be removed in one Undo() step.
</summary>
            <param name="filter">Filter to add to the editing session</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.getExif">
            <summary>
Retrieves the exif data from the session.
</summary>
            <returns>Exif data from session.</returns>
        </member>
        <member name="P:Nokia.Graphics.Imaging.EditingSession.Dimensions">
            <summary>
The dimensions of the source in pixels.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.RenderToJpegAsync(Windows.Foundation.Size,Nokia.Graphics.Imaging.OutputOption,System.Double,Nokia.Graphics.Imaging.OutputColorSpacing)">
            <summary>
Asynchronous render of editingSession to jpeg. Rendered jpeg will have specified
dimensions and discrepancies in aspect ratio will be handled according to specified output options.
</summary>
            <param name="size">Desired size of the rendered jpeg.</param>
            <param name="outputOptions">Desired behavior when source and target aspect ratio differ.</param>
            <param name="quality">Desired jpeg quality between 0.0 and 1.0.</param>
            <param name="colorSpacing">Desired jpeg color spacing.</param>
            <returns>Asynchronously returns an IBuffer containing the jpeg data.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.RenderToJpegAsync(Windows.Foundation.Size,Nokia.Graphics.Imaging.OutputOption)">
            <summary>
Asynchronous render of editingSession to jpeg. Rendered jpeg will have specified
dimensions and discrepancies in aspect ratio will be handled according to specified output options.
</summary>
            <param name="size">Desired size of the rendered jpeg.</param>
            <param name="outputOptions">Desired behavior when source and target aspect ratio differ.</param>
            <returns>Asynchronously returns an IBuffer containing the jpeg data.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.RenderToJpegAsync">
            <summary>
Asynchronous render of editingSession to jpeg.
</summary>
            <returns>Asynchronously returns an IBuffer containing the jpeg data.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.RenderToBitmapAsync(Nokia.Graphics.Bitmap,Nokia.Graphics.Imaging.OutputOption,Windows.Foundation.Rect)">
            <summary>
Asynchronous render of cropped region to bitmap with specified aspect ratio behavior.
</summary>
            <param name="renderTarget">Bitmap to render to.</param>
            <param name="outputOptions">Desired behavior when source and target aspect ratio differ.</param>
            <param name="cropArea">Rectangle describing the crop of the source to apply before rendering.</param>
            <returns>The asynchronous action</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.RenderToBitmapAsync(Nokia.Graphics.Bitmap,Nokia.Graphics.Imaging.OutputOption)">
            <summary>
Asynchronous render of editingSession to bitmap with specified aspect ratio behavior.
</summary>
            <param name="renderTarget">Bitmap to render to.</param>
            <param name="outputOptions">Desired behavior when source and target aspect ratio differ.</param>
            <returns>The asynchronous action</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.RenderToBitmapAsync(Nokia.Graphics.Bitmap)">
            <summary>
Asynchronous render of editingSession to bitmap.
</summary>
            <param name="renderTarget">Bitmap to render to.</param>
            <returns>The asynchronous action</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.Dispose">
            <summary>
EditingSession destructor.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.#ctor(Nokia.Graphics.Bitmap)">
            <summary>
Creates a editingSession from a bitmap.
</summary>
            <param name="bitmap">Bitmap to use as source to the created editingSession.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.#ctor(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Imaging.InputImageFormat)">
            <summary>
Creates a sesssion from a buffer.
</summary>
            <param name="buffer">Buffer containing the image data.</param>
            <param name="format">Image type in the buffer.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EditingSession.#ctor(Windows.Storage.Streams.IBuffer)">
            <summary>
Creates a sesssion from a compressed image buffer.</summary>
            <remarks>An attempt will be made to 
automatically detect the image format. If the image date is not corrupt the 
editingSession should be able to detect JPEG, GIF, PNG, TIFF, BMP, WBMP. If the 
image format cannot be determined an exeception will be thrown.
For optimal performance, or if the image format cannot be determined, please 
provide the image format explicitly when creating a new editingSession.
</remarks>
            <param name="buffer">Buffer containing the compressed image data.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.EditingSession">
            <summary>
This class represents image processing editingSession. 
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IFilter">
            <summary>
This is editingSession specific filter interface.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.OutputColorSpacing">
            <summary>
Enum to set desired color spacing on the output image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.OutputOption">
            <summary>
Enum describing the behavior when rendering to a target with different aspect ratio than the source.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.InputImageFormat">
            <summary>
Enum describing the different supported image formats.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Bitmap.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Bitmap.AsCTBitmapPtr">
            <summary>
Getter for the internal CTBitmap pointer as an IntPtr.
</summary>
            <returns> Internal CTBitmap pointer as an IntPtr.</returns>
        </member>
        <member name="M:Nokia.Graphics.Bitmap.CopyDataFrom(Nokia.Graphics.Bitmap)">
            <summary>
Copies the image data from the passed bitmap
</summary>
            <param name="width">The bitmap to copy the data from.</param>
        </member>
        <member name="P:Nokia.Graphics.Bitmap.Dimensions">
            <summary>
The dimensions of the bitmap.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Bitmap.#ctor(Nokia.Graphics.Bitmap,Windows.Foundation.Rect)">
            <summary>
Create a Bitmap that points to the same image data as another Bitmap, cropped to a smaller rectangle.
</summary>
            <param name="sourceBitmap"> a Bitmap </param>
            <param name="cropArea"> Crop area rectangle. Must fit within dimensions of sourceBitmap. </param>
        </member>
        <member name="M:Nokia.Graphics.Bitmap.#ctor(Windows.Foundation.Size,System.UInt32[],Nokia.Graphics.ColorMode,Windows.Storage.Streams.IBuffer[])">
            <summary>
Creates a bitmap by binding planes of data from the provided IBuffers. Suitable for planar color modes.
</summary>
            <param name="size">The size of the bitmap to be created.</param>
            <param name="colorMode">The color mode of the bitmap to be created.</param>
            <param name="scanlines">The scanlines of the individual planes of the bitmap to be created.</param>
            <param name="data">The data to be bound, provided in IBuffers.</param>
        </member>
        <member name="M:Nokia.Graphics.Bitmap.#ctor(Windows.Foundation.Size,Nokia.Graphics.ColorMode,System.UInt32,Windows.Storage.Streams.IBuffer)">
            <summary>
Creates a Bitmap by binding data from the provided IBuffer. Suitable for interleaved color modes.
</summary>
            <param name="size">The size of the bitmap to be created.</param>
            <param name="scanline">The scanline of the bitmap to be created.</param>
            <param name="colorMode">The color mode of the bitmap to be created.</param>
            <param name="data">The data to be bound, provided in an IBuffer.</param>
        </member>
        <member name="M:Nokia.Graphics.Bitmap.#ctor(Windows.Foundation.Size,Nokia.Graphics.ColorMode)">
            <summary>
Creates an empty Bitmap where data can be rendered to.
</summary>
            <param name="size">The size of the bitmap to be created.</param>
            <param name="colorMode">The color mode of the bitmap to be created.</param>
        </member>
        <member name="T:Nokia.Graphics.Bitmap">
            <summary>
Creates a bitmap by binding existing data. Native algorithms can not take ownership of the data in this 
bitmap.
</summary>
        </member>
        <member name="M:Nokia.Graphics.CreateException(CRESULT)">
            <summary>
Converts a CRESULT error to a suitable exception.
</summary>
            <param name="res">Result code.</param>
            <returns>The created exception.</returns>
        </member>
        <member name="M:Nokia.Graphics.CreateIBufferFromCTBuffer(CTBuffer*)">
            <summary>
Helper function to create an IBuffer from a CTBuffer.
</summary>
            <param name="buffer">The CTBuffer used to create the IBuffer.</param>
            <returns>The created buffer instance.</returns>
        </member>
        <member name="M:Nokia.Graphics.CreateCTBufferFromIBuffer(Windows.Storage.Streams.IBuffer)">
            <summary>
Helper function to initialize a CTBuffer using an IBuffer.
</summary>
            <param name="buffer">The IBuffer used to initialize the CTBuffer.</param>
            <returns>The created CTBuffer.</returns>
        </member>
        <member name="T:Nokia.Graphics.ColorMode">
            <summary>
Enum mapping color modes to IPP color modes.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Float32">
            <summary>
32 bit float32 per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Float16">
            <summary>
16 bit float16 per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Vu">
            <summary>
Represent a single VU channel, VUVUVU...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Uv">
            <summary>
Represent a single UV channel, UVUVUV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.V">
            <summary>
Represent a single V channel
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.U">
            <summary>
Represent a single U channel
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Y">
            <summary>
Represent a single Y channel
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yuv422_Y1UY2V">
            <summary>
2 byte per pixel. Y, U, Y, V, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yuv444P">
            <summary>
Planar YUV444, 3 bytes per pixel. YYY..., UUU..., VVV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yuv420P">
            <summary>
Planar YUV420, 2 bytes per pixel. YYY..., UUU..., VVV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yvu422Sp">
            <summary>
Semi-planar YVU422, 2 bytes per pixel. YYY..., VUVUVU...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yuv422Sp">
            <summary>
Semi-planar YUV422, 2 bytes per pixel. YYY..., UVUVUV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yvu420Sp">
            <summary>
Semi-planar YVU420, 2 bytes per pixel. YYY..., VUVUVU...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yuv420Sp">
            <summary>
Semi-planar YUV422, 2 bytes per pixel. YYY..., UVUVUV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Yuv422P">
            <summary>
Planar YUV422, 2 bytes per pixel. YYY..., UUU..., VVV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Gray32">
            <summary>
16 bit grayscale, 16 bit per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Gray16">
            <summary>
16 bit grayscale, 16 bit per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Gray8">
            <summary>
8 bit grayscale, 8 bit per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Bgra8888">
            <summary>
4 bytes per pixel, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Argb8888">
            <summary>
4 bytes per pixel, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Rgb565D">
            <summary>
5 bits red, 6 bits green, 5 bits blue, interleaved, with dithering to minimize gradient errors.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Rgb565">
            <summary>
5 bits red, 6 bits green, 5 bits blue, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.ColorMode.Ayuv4444">
            <summary>
Standard interleaved AYUV, 4 byte per pixels.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Exif.CreateExifFromBuffer(Windows.Storage.Streams.IBuffer)">
Creates an Exif instance based on the exif data contained in the provided buffer.
buffer: the provided buffer to use when creating the Exif instance; must not be null
returns the created Exif instance or an empty instance if valid exif data was not found.
</member>
        <member name="M:Nokia.Graphics.Exif.GetThumbnailAsync">
            <summary>
Asynchronously gets the thumbnail, or null if not found.
<returns>Returns an IBuffer containing the thumbnail jpeg data.</returns></summary>
        </member>
        <member name="M:Nokia.Graphics.Exif.SetTagDateTimeDigitizedRaw(System.Byte[])">
            <summary>
Set DateTime Digitized tag.
</summary>
            <param name="data">New DateTime Digitized tag.</param>
        </member>
        <member name="M:Nokia.Graphics.Exif.SetTagDateTimeOriginalRaw(System.Byte[])">
            <summary>
Set DateTime Original tag.
</summary>
            <param name="data">New DateTime Original tag.</param>
        </member>
        <member name="M:Nokia.Graphics.Exif.GetTagOrientation">
            <summary>
Retrieves the Orientation tag
<return>Returns an integer describing the orientation.</return></summary>
        </member>
        <member name="M:Nokia.Graphics.Exif.SetTagOrientation(System.Int32)">
            <summary>
Change the Orientation tag
</summary>
            <param name="orientation">The new orientation.</param>
        </member>
        <member name="M:Nokia.Graphics.Exif.DeleteExifIFD(System.Int32)">
            <summary>
Delete a specific IFD from the Exif.
</summary>
            <param name="IFD">The IFD to delete.</param>
        </member>
        <member name="M:Nokia.Graphics.Exif.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Exif">
            <summary>
The Exif class describes and allows manipulation of exif data.
</summary>
        </member>
        <member name="M:exif_getTagGPSDestLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x16.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x16.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x14.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x14.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSTimeStamp(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x7.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSTimeStamp(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x7.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Sets tag 0x4.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x4.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestDistance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x1a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestDistance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x1a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestBearing(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x18.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestBearing(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x18.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSImgDirection(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSImgDirection(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSTrack(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xf.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSTrack(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xf.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSSpeed(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xd.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSSpeed(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xd.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDOP(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xb.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDOP(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xb.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSAltitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x6.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSAltitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x6.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSMapDatum(ctExifSession*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x12.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

    @param paramSize
    The size of the data to get.
    If parameter is NULL, the function sets paramSize 
    to the amount of bytes needed for parameter.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSMapDatum(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x12.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. Must be null terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSSatellites(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x8.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSSatellites(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x8.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. Must be null terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestDistanceRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x19.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestDistanceRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x19.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestBearingRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x17.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestBearingRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x17.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestLongitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x15.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLongitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x15.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestLatitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x13.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLatitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x13.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSImgDirectionRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x10.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSImgDirectionRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x10.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSTrackRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xe.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSTrackRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xe.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSSpeedRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xc.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSSpeedRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xc.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSMeasureMode(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSMeasureMode(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xa.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSStatus(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSStatus(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLongitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa3.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLongitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x3.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLatitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLatitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSAltitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa5.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSAltitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x5.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagMakerNote(ctExifSession*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x927C.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

    @param paramSize
    The size of the data to get.
    If parameter is NULL, the function sets paramSize 
    to the amount of bytes needed for parameter.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSVersion(ctExifSession*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x0.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

    @param paramSize
    The size of the data to get.
    If parameter is NULL, the function sets paramSize 
    to the amount of bytes needed for parameter.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSVersion(ctExifSession*,System.Byte*)">
@} 
@addtogroup fm_exif_gpstags
@{

    @brief
    Sets tag 0x0.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFocalLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x920a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFNumber(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x829d.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagApertureValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9202.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExposureTime(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x829a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagShutterSpeedValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9201.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGainControl(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa407.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagDigitalZoomRatio(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa404.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11b. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11a. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11b.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFlash(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9209.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagLightSource(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9208.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagISOSpeedRatings(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x8827.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagSceneCaptureType(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa406.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagWhiteBalance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa403.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExposureMode(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa402.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagCustomRendered(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa401.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagJpegInterchangeFormatLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x202.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbCompression(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x103.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagJpegInterchangeFormat(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x201.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagPixelYDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagPixelXDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa002.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagColorSpace(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa001.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExifIdPointer(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x8769.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagYCbCrPositioning(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x213.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagComponentsConfiguration(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9101.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFlashPixVersion(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xa000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExifVersion(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagInteroperabilityVersion(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagInteroperabilityIndex(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagArtist(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x13B.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:exif_setTagDateTimeDigitized(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9004.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagDateTimeOriginal(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagDateTime(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x132.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagModel(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x110.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagMake(ctExifSession*,System.Byte*)">
@} 
@addtogroup fm_exif_settag
@{

    @brief
    sets tag 0x10f.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFocalLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x920a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFNumber(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x829d.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagApertureValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9202.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExposureTime(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x829a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagShutterSpeedValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9201.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGainControl(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa407.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDigitalZoomRatio(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa404.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11b. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11a. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11b.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFlash(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9209.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagLightSource(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9208.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagISOSpeedRatings(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x8827.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagSceneCaptureType(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa406.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagWhiteBalance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa403.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExposureMode(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa402.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagCustomRendered(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa401.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagJpegInterchangeFormatLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x202.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbCompression(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x103.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagJpegInterchangeFormat(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x201.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagPixelYDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagPixelXDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa002.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagColorSpace(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa001.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExifIdPointer(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x8769.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagYCbCrPositioning(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x213.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagComponentsConfiguration(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9101.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFlashPixVersion(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExifVersion(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagInteroperabilityVersion(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagInteroperabilityIndex(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDateTimeDigitized(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9004.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDateTimeOriginal(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDateTime(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x132.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagModel(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x110.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagMake(ctExifSession*,System.Byte*)">
@} 
@addtogroup fm_exif_gettag
@{

    @brief
    Gets tag 0x10f.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_checkExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Checks if a specified tag exists and get information associated with the 
    tag.

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information. 
    The user must allocate and deallocate this structure.

	@return 
    @c CERR_OK if successful or CERR_EXIF_TAG_NOT_FOUND if the tag don't exists.

    @since 3.2

</member>
        <member name="M:exif_deleteExifsubIFD(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong,EXIF_SUB_IFD)">
    @brief
    Deletes all data within a specific sub-IFD tag.

    @param exifSession
    The session that holds the exif data.

    @param IFD
    The id of the IFD tag that holds the sub-IFD that should be deleted.

    @param subIFD
    The sub-IFD tag that should be deleted from the exif session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7 R7

</member>
        <member name="M:exif_deleteExifIFD(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Deletes all data within a specific IFD tag

    @param exifSession
    The session that holds the exif data.

    @param IFD
    The id of the IFD tag that should be deleted from the exif session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7 R7


    @brief
    Deletes all data within a specific IFD tag

    @param exifSession
    The session that holds the exif data.

    @param IFD
    The id of the IFD tag that should be deleted from the exif session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7 R7

</member>
        <member name="M:exif_deleteExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Deletes a specified tag        

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information. 
    The user must allocate and deallocate this structure.
    The struct members IFD and tagId must be set by the caller, 
    other members are ignored.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Sets information assosiated with a specified tag        

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information.    
    The user must allocate and deallocate this structure.
    All members of this struct must be set by the caller.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_setexifdata_example

    @since 3.2

</member>
        <member name="M:exif_getExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Gets the information assosiated with a specified tag        

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information.
    The user must allocate and deallocate this structure.
    Struct members, IFD, subIFD and tagId must be specified when calling.
    Members nofRecords, tagType and tagData will be set by the function.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_getexifdata_example

    @since 3.2

</member>
        <member name="M:exif_insertExifIntoJfifFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Replaces the jfif header in a jpeg file with an exif header.
    Note that the exif header is independant of the image i.e
    tags like image dimensions will not be modified in this function.
    Also, the buffer containing the JFIF file must be large enough to 
    accommodate both the original jpeg file plus the exif data.

    @param jpegFile
    Buffer containg the jfif jpeg file.
	If not JFIF compliant, CERR_UNSUPPORTED_IMAGE will be returned.

    @param exifData
    Buffer containing the exif data to add.

    @param srcJpegSize 
    Size of original JFIF file if known, otherwise
    set to zero.
    
    @param newJpegSize 
    The resulting size of the jpeg after insertion of the
    exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_writeExifAndJfifToFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Replaces the jfif header in a jpeg file with an exif header and writes
	it to file. Note that the exif header is independant of the image i.e
    tags like image dimensions will not be modified in this function.        

    @param jpegFile
    Buffer containg the jfif jpeg file.
	If not JFIF compliant, CERR_UNSUPPORTED_IMAGE will be returned.

    @param exifData
    Buffer containing the exif data to add.

    @param filename 
    Filename of the resulting exif jpeg file.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6


</member>
        <member name="M:exif_addExifToJfifFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*)">
    @brief
    Replaces the jfif header in a jpeg file with an exif header.
    Note that the exif header is independant of the image i.e
    tags like image dimensions will not be modified in this function.        

    @param jpegFile
    Buffer containg the jfif jpeg file.
	If not JFIF compliant, CERR_UNSUPPORTED_IMAGE will be returned.

    @param exifData
    Buffer containing the exif data to add.

    @param exifFile 
    Buffer with the resulting exif jpeg file. The buffer must be large enough
	to accomodate both the original image and the exif header.
	
	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newemptysession_example

    @since 3.2

</member>
        <member name="M:exif_getImageOrientation(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt16*)">
    @brief
    Gets the orientation of an image 

    @param pBuffer
    A buffer containing the image. The image must have exif data. 

    @param orientation
    The orientation of the image.

    1 - 0th row at visual top of image. 0th column at visual left-hand side\n
    2 - 0th row at visual top of image. 0th column at visual right-hand side\n
    3 - 0th row at visual bottom of image. 0th column at visual right-hand side\n
    4 - 0th row at visual bottom of image. 0th column at visual left-hand side\n
    5 - 0th row at visual left-hand side of image. 0th column at visual top\n
    6 - 0th row at visual right-hand side of image. 0th column at visual top\n
	(Camera is rotated 90 degrees clockwise)\n
    7 - 0th row at visual right-hand side of image. 0th column at visual bottom\n
    8 - 0th row at visual left-hand side of image. 0th column at visual bottom\n
	(Camera is rotated 90 degrees counter-clockwise)\n
    
	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_getTagOrientation()\n

    @since 3.2

</member>
        <member name="M:exif_streamGetScreenNail(CTStream*,CTBuffer*)">
    @brief Get a flashpix (jpeg) screennail from a jpeg image.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @param pStream Stream that must have seek feature (canSeek). Stream must point
    to the start of a jpeg image.
    @param[out] pBuffer Buffer where the screen nail is copied to.
    The buffer must be allocated with the size of the screennail, as given from
    exif_streamGetScreenNailSize().

    @return CERR_OK or an error code.

    @remarks
    @li If CERR_OK is returned from this function, the stream offset has not
    been changed.
    @li This function does not guarantee that the jpeg data written to
    pBuffer is complete and correct.

    @since 3.8.2 R03

</member>
        <member name="M:exif_streamGetScreenNailSize(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief Get the size of a flashpix (jpeg) screennail from a jpeg image.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @param pStream Stream that must have seek feature (canSeek). Stream must point
    to the start of a jpeg image.
    @param[out] pSize Size of the flashpix screennail jpeg data in bytes. If the stream contains
    no flashpix screennail, it is set to 0.
    @return @c CERR_OK or an error code.
    @c CERR_OK is returned also if the stream does not contain a flashpix screennail or if the
    stream is of unknown format.

    @remarks
    @li If CERR_OK is returned from this function, the stream offset has not
    been changed.

    @since 3.8.2 R03

</member>
        <member name="M:exif_streamHasExif(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@} 
@addtogroup fm_exif_general
@{

    @brief Check if the stream contains a jpeg image with an exif (APP1) block.
    Get offset and size of that block.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @param pStream Stream that must have seek feature (canSeek). Stream must point to
    the start of a jpeg image.
    @param pHasExif will be set to false upon error or if no exif block was found,
    true if a block has been found.
    @param pOffset (Optional) Stream offset of the FF in the FF E1 marker (Only valid if *pHasExif is set to true)
    @param pLength (Optional) Length of app1 including FF E1 marker. (Only valid if *pHasExif is set to true)

    @return CERR_OK or an error code only if the stream reports an error.

    @remarks
    @li If CERR_OK is returned from this function, the stream offset has not
    been changed.
    @li If end of data is found, CERR_OK will be returned.

    @since 3.8.2 R02

</member>
        <member name="M:exif_getThumbnailFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,CTBuffer**,System.UInt16*)">
    @brief
    Gets the exif thumbnail from an image from file. Note that this function 
    only supports jpeg format thumbnails. This is a faster way than getting the
    thumbnail from the CTExifSession.

    @param filename
    Filename of the imagee. The image must have exif data.

    @param thumbBuffer
    A buffer that will recieve the thumbnail. The user must de-allocate this 
    buffer. i.e. call caps_desrtoyBuffer().

    @param orientation
    The orientation of the thumbnail.

	1 - 0th row at visual top of image. 0th column at visual left-hand side\n
    2 - 0th row at visual top of image. 0th column at visual right-hand side\n
    3 - 0th row at visual bottom of image. 0th column at visual right-hand side\n
    4 - 0th row at visual bottom of image. 0th column at visual left-hand side\n
    5 - 0th row at visual left-hand side of image. 0th column at visual top\n
    6 - 0th row at visual right-hand side of image. 0th column at visual top\n
	(Camera is rotated 90 degrees clockwise)\n
    7 - 0th row at visual right-hand side of image. 0th column at visual bottom\n
    8 - 0th row at visual left-hand side of image. 0th column at visual bottom\n
	(Camera is rotated 90 degrees counter-clockwise)\n
    
	@return 
    @c CERR_OK if successful, CERR_ITEM_NOT_FOUND if no thumbnail was found
        or a specific error code upon failure.

    @sa
    exif_getThumbnailFromBuffer()\n
    exif_getThumbnailFromSession()\n
    exif_addThumbnailToSession()

    @since 3.2

</member>
        <member name="M:exif_getThumbnailFromBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer**,System.UInt16*)">
    @brief
    Gets the exif thumbnail from an image. Note that this function only
    supports jpeg format thumbnails. This is a faster way than getting the 
    thumbnail from the CTExifSession.

    @param imageBuffer
    A buffer containing the image. The image must have exif data.

    @param thumbBuffer
    A buffer that will recieve the thumbnail. The user must de-allocate this 
    buffer.

    @param orientation
    The orientation of the thumbnail.

    1 - 0th row at visual top of image. 0th column at visual left-hand side\n
    2 - 0th row at visual top of image. 0th column at visual right-hand side\n
    3 - 0th row at visual bottom of image. 0th column at visual right-hand side\n
    4 - 0th row at visual bottom of image. 0th column at visual left-hand side\n
    5 - 0th row at visual left-hand side of image. 0th column at visual top\n
    6 - 0th row at visual right-hand side of image. 0th column at visual top\n
	(Camera is rotated 90 degrees clockwise)\n
    7 - 0th row at visual right-hand side of image. 0th column at visual bottom\n
    8 - 0th row at visual left-hand side of image. 0th column at visual bottom\n
	(Camera is rotated 90 degrees counter-clockwise)\n
    
	@return 
    @c CERR_OK if successful, CERR_ITEM_NOT_FOUND if no thumbnail was found
        or a specific error code upon failure.
    
    @sa
    exif_getThumbnailFromFile()\n
    exif_getThumbnailFromSession()\n
    exif_addThumbnailToSession()

    @since 3.2

</member>
        <member name="M:exif_getJpegThumbnailInfo(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTJpegThumbnailInfo*)">
    @brief Parse out thumbnail and its orientation from an exif APP1 block

    @param pBuffer Buffer pointing to an FF E1 marker
    @param[out] pThumbnail Jpeg thumbnail information,
    i.e. if there is a jpeg thumbnail, its offset and orientation.

    @return CERR_OK or an error code on invalid parameters or corrupt exif data.

    @sa exif_getThumbnailFromBuffer()

    @since 3.8.2 R02

</member>
        <member name="M:exif_addThumbnailToSession(ctExifSession*,CTBuffer!System.Runtime.CompilerServices.IsConst*,CTRawThumbnailInfo*)">
    @brief
    Adds a thumbnail to the Exif session        

    @param exifSession
    The session that holds the exif data.

    @param buffer
    A CTBuffer that contains the thumbnail image data.

    @param rawInfo
    [optional] A structure describing the thumbnail if it is of raw rgb format.
    Must be NULL if the thumbnail is jpeg format

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_getThumbnailFromBuffer()\n
    exif_getThumbnailFromSession()\n
    exif_getThumbnailFromSession()

    @since 3.2

</member>
        <member name="M:exif_getThumbnailFromSession(ctExifSession*,CTBuffer**,CTRawThumbnailInfo*)">
    @brief
    Gets a copy of the thumbnail from the Exif block if present.

    @remarks
    If the user only wants a read-only reference to the thumbnail, then it is
    more memory efficient to use exif_getExifData() to extract the information
    needed, such as:

    Offsets and length of thumbnail,

    and if RAW:

    Width and height in pixels,
    Bits per sample,
    Photometric interpretation and
    Samples per pixel.

    @param exifSession
    The session that holds the exif data.

    @param buffer
    A buffer that will recieve a copy of the thumbnail. The user must 
    de-allocate this buffer, I.e call caps_destroyBuffer().

    @param rawInfo
    [optional] A structure describing the thumbnail if it is of raw rgb format.
    The member of this structure will be 0 if the thumbnail is jpeg.

	@return 
    @c CERR_OK if successful, CERR_ITEM_NOT_FOUND if no thumbnail was found
    or a specific error code upon failure.

    @sa
    exif_getThumbnailFromBuffer()\n
    exif_getThumbnailFromFile()\n
    exif_addThumbnailToSession()

    @since 3.2

</member>
        <member name="F:CTJpegThumbnailInfo.IFD1Orientation">
        @brief
        The orientation tag of the thumbnail. 0 if no orientation flag is found.

        @note 0 is not a valid exif orientation. For valid orientation values,
        see, for example: exif_getThumbnailFromBuffer()

</member>
        <member name="F:CTJpegThumbnailInfo.offset">
@brief
Offset to jpeg data from the FF in the FF E1 marker.

</member>
        <member name="F:CTJpegThumbnailInfo.size">
@brief
Size of jpeg thumbnail in bytes. 0 if no thumbnail is found.

</member>
        <member name="T:CTJpegThumbnailInfo">
    @brief
    This structure holds the information for jpeg thumbnails.

    @since 3.8.2 R02

</member>
        <member name="T:CTRawThumbnailInfo">
@}

@addtogroup fm_exif_thumbnail
    @{

    @brief
    This structure holds the information for raw rgb thumbnails.
    Note that this structure may be used as both input and output argument.

    @since 3.2

</member>
        <member name="M:exif_copySession(ctExifSession**,ctExifSession*)">
    @brief
    Copies all the data associated with an exif session.    

    @param copiedSession
    The new session to be created.

    @param exifSession
    The session that holds the exif data to be copied.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_renderSession(ctExifSession*,CTBuffer*)">
    @brief
    Renders the exif data in the session to a buffer.

    The exif header will be written in the endian format specified by
    exif_setEndian(). Default for all sessions are little endian.

    @param exifSession
    The session to hold the exif data

    @param pBuffer
    The buffer to write the exif data to. This buffer must be provided by the
    caller. The struct member CTBuffer::size of the provided buffer will be
    updated to reflect the actual number of bytes written to the buffer.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa exif_getExifBlockSize() for querying the required buffer size.
    
    @since 3.2

</member>
        <member name="M:exif_getEndian(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets the endian to use when rendering the session   

    @param exifSession
    The session to hold the exif data

    @param endian
    SCB_LITTLE_ENDIAN or SCB_BIG_ENDIAN

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_renderSession()

    @since 3.2

</member>
        <member name="M:exif_setEndian(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets the endian to use when rendering the session.

    @param exifSession
    The session to hold the exif data

    @param endian
    SCB_LITTLE_ENDIAN or SCB_BIG_ENDIAN

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_renderSession()

    @since 3.2

</member>
        <member name="M:exif_getExifBlockSize(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets the size in bytes of the exif block    

    @param exifSession
    The session to hold the exif data

    @param size
    The current size of the exif block.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_destroySession(ctExifSession*)">
    @brief
    Destroys an exif session    

    @param exifSession
    The session that holds the exif data

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_addExifHeaderFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Adds an exif header to be rendered in a CAPS session.    

    @param session
    A valid CAPS CTSession

    @param exifData
    A buffer containing the exif header. Pass this
    argument as NULL in order to remove current exif data from the session

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_addExifHeaderFromSession()

    @since 3.2

</member>
        <member name="M:exif_addExifHeaderFromSession(cips*,ctExifSession*)">
    @brief
    Adds an exif header to be rendered in a CAPS session.    

    @param session
    A valid CAPS CTSession

    @param exifSession
    The session that holds the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_addExifHeaderFromBuffer()

    @since 3.2

</member>
        <member name="M:exif_newSessionWithBlank(ctExifSession**)">
    @brief
    Starts a new empty exif session    
    Default endian is SCB_LITTLE_ENDIAN.

    @param pExifSession
    The session to hold the exif data. This argument is set to NULL
	if the function fails.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newemptysession_example

    @sa
    exif_newSessionWithBuffer()\n
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n

    @since 3.2

</member>
        <member name="M:exif_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,ctExifSession**)">
    @brief
    Starts a new exif editing session from a file handle.
    Endian format is set to the same as the existing data.

    @param srcHandle
    File handle to a jpeg image

    @param pExifSession
    The session to hold the exif data. This argument is set to NULL
	if the function fails.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_newSessionWithFile()\n
	exif_newSessionWithBuffer()\n
    exif_newSessionWithBlank()\n

    @since 3.4

</member>
        <member name="M:exif_newSessionWithStream(CTStream*,ctExifSession**)">
    @brief
    Starts a new exif editing session from stream.
    Endian format is set to the same as the existing data.

    @param pStream
    Jpeg stream. 

    @param pExifSession
    The session to hold the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
	exif_newSessionWithBuffer()\n
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n
    exif_newSessionWithBlank()\n

    @since 5.3

</member>
        <member name="M:exif_newSessionWithNonJpegBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,ctExifSession**)">
    @brief
    Starts a new exif editing session from a buffer with EXIF data.
	I.e. a buffer thats starts with Exif, but it does not need to contain
    a complete JPEG image.
    Endian format is set to the same as the existing data.

    @param pExifBuffer
    Buffer containing the exif header only, shall start with EXIF.

    @param pExifSession
    The session to hold the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newsessionwithbuffer_example

    @sa
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n
    exif_newSessionWithBlank()\n

    @since 5.5

</member>
        <member name="M:exif_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,ctExifSession**)">
    @brief
    Starts a new exif editing session from buffer.
    Endian format is set to the same as the existing data.

    @param pBuffer
    Buffer containing the exif header.

    @param pExifSession
    The session to hold the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newsessionwithbuffer_example

    @sa
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n
    exif_newSessionWithBlank()\n

    @since 3.2

</member>
        <member name="M:exif_isExifFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Checks if an image contains exif data.

    @param handle
    Filehandle to the image.

    @param isExif
    True, if exif data exists, False otherwise.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_isExifBuffer()\n 
	exif_isExifFile()\n

    @since 3.4

</member>
        <member name="M:exif_isExifFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Checks if an image contains exif data.

    @param filename
    Filename of the image.

    @param isExif
    True, if exif data exists, False otherwise.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_isExifBuffer()\n 
	exif_isExifFileHandle()\n

    @since 3.2

</member>
        <member name="M:exif_isExifBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Checks if an image contains exif data.

    @param pBuffer
    Buffer containing the data.

    @param isExif
    True, if exif data exists, False otherwise.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_isExifFile()\n  
	exif_isExifFileHandle()\n

    @since 3.2

</member>
        <member name="T:CTTagInfo">
@} 
@addtogroup fm_exif_general
@{

    @brief
    This structure holds the information for the exif tags.

    Note that this structure may be used as both input and output argument.
    For more information about exif tags, see the specification:
    "Digital Still Camera Image File Format Standard" v2.1, JEIDA.

    @since 3.2

</member>
        <member name="T:ctExifSession">
@file fm_exif.h
@brief Defines the interface of the Caps Feature Module: @a Exif
@ingroup fm_exif

@addtogroup fm_exif
@brief Utility functions for setting/getting Exif tags/content
@{
    @defgroup fm_exif_general General functions
    @defgroup fm_exif_thumbnail Thumbnail functions
    @defgroup fm_exif_gettag getTag functions
    @defgroup fm_exif_settag setTag functions
    @defgroup fm_exif_gpstags GPSTags functions
    @defgroup fm_exif_examples Examples
    @brief Example code for some typical use cases.

    @brief
    The session used to store the exif information.

    This is necessary for all editing of exif data, such as tags and 
    thumbnails.

    @since 3.2

</member>
        <member name="M:caps_getCurrentScreen(cips*,CTScreen**)">
    @brief
    Retrieves the screen which was rendered to most recently.

    @param session
    A valid session handle.

    @param[out] screen
    Address of a @c CTScreen pointer which will receive the current
    screen.

    @remarks
    A screen object is "current" in a session after a call to
    caps_renderScreen(). If no such call has been made, or if other render
    operations has been performed since then, no screen will be current and
    this function will return @c NULL in the output argument.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_getScreenSession(CTScreen*,cips**)">
    @brief
    Retrieves the session within which a screen has been created.

    @param screen
    Pointer to a @c CTScreen object from which to retrieve the session.

    @param[out] session
    Pointer to a @c CTSession handle which will receive the session
    associated with the given screen.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_getPan(CTScreen*,System.Single*,System.Single*)">
    @brief
    Retrieves the current pan setting.

    @param screen
    Pointer to a screen object from which to get the pan.

    @param[out] panX
    Pointer to a @c CTfloat which will receive the current horizontal pan
    setting. Range (-1.0) - (1.0).

    @param[out] panY
    Pointer to a @c CTfloat which will receive the current vertical pan
    setting. Range (-1.0) - (1.0).

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_getZoom(CTScreen*,System.Single*)">
    @brief
    Retrieves the current zoom setting.

    @param screen
    Pointer to a screen object for which to retrieve the zoom factor.

    @param[out] zoom
    Pointer to a @c CTfloat which will receive the zoom factor.
    Range (1.0) - [inf].

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_getZoomPoint(CTScreen*,System.Single*,CTVector*)">
    @brief
    Gets zoom and pan for the screen, defined by middle point and zoom factor.

    @param[in] screen
    A pointer to a screen object from which to get the zoom level and mid point.

    @param[out] pZoom
    Pointer to a floating point where the zoom factor is stored. May be NULL.

    @param[out] pMidpoint
    Gets the middle point of what should be shown in the screen in the
    @a current coordinate system.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa caps_getZoom
    @sa caps_getPan
    @sa caps_coordScreenToCurrent

    @since 3.8

</member>
        <member name="M:caps_setZoomPoint(CTScreen*,System.Single,CTVector*)">
    @brief
    Sets zoom and pan for the screen, defined by middle point and zoom factor.

    @param screen
    A pointer to a screen object for which to set the zoom factor.

    @param zoom
    A floating point zoom factor in the range 1.0 - [inf].

    @param pMidpoint
    (IN/OUT) Input and output parameter. Sets the middle point of what should be
    shown in the screen in the @a current coordinate system. Internally this
    function uses the caps_setZoom and the caps_setPan functions. If the computed
    panning parameters would go outside of the [-1, 1] range, the values are clamped
    and the values of @c pMidpoint-&gt;x and @c pMidpoint-&gt;y are updated to match the
    clamped values.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa caps_setZoom
    @sa caps_setPan
    @sa caps_setZoomRect
    @sa caps_coordScreenToCurrent

    @since 3.5

</member>
        <member name="M:caps_setZoom(CTScreen*,System.Single)">
    @brief
    Sets the zoom factor for the screen.

    @param screen
    A pointer to a screen object for which to set the zoom factor.

    @param zoom
    A floating point zoom factor in the range 1.0 - [inf].

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_getScreenCanvasArea(CTScreen*,CTRect*)">
    @brief
    Retrieves the top left corner and size of the canvas in the
    given screen.

    @param screen
    Pointer to the @c CTScreen object from which to retrieve the canvas area.

    @param[out] canvas_area
    Pointer to a CTRect object which will be initialized with the area
    information. The CTRect::x and CTRect::y members of the object will
    specify the offset in pixels of the canvas' top left corner, seen from the
    top left corner of the screen. The CTRect::w and CTRect::h members will
    specify the size of the canvas area in pixels.

    @remarks
    The screen canvas is the portion of the screen containing actual image
    data, excluding any borders created when fitting an image with preserved
    aspect ratio.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_getScreenSize(CTScreen*,CTSize*)">
    @brief
    Retrieves the size of the given screen.

    @param screen
    Pointer to the @c CTScreen object from which to retrieve size.

    @param[out] size
    Pointer to a @c CTSize object which will be initialized with the size
    of the given screen in pixels.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_renderScreen(CTScreen*,CTIterator**)">
    @brief
    Renders the given screen.

    @param screen
    Pointer to the @c CTScreen object to render.

    @param it
    Optional pointer to a @c CTIterator object if the render operation should be performed
    as an iterative sequence, otherwise it should be set to @c NULL.
    @ref caps_iterators "Iterative operations"

    @attention
    The selected color mode in the format member in @c CTScreen::image must be one of
    the valid (output) formats specified in: @ref supported_colorformats

    @return
    - @c CERR_OK if successful or a specific error code upon failure.
    - @c CERR_ILLEGAL_CALL  If an iterative render operation is currently
    active when calling this function.
    .

    @since 3.0

</member>
        <member name="M:caps_setScreenBuffer(CTScreen*,CTBuffer*)">
    @brief
    Changes the screen buffer address of the given screen.

    @param screen
    Pointer to a @c CTScreen object previously created with
    caps_createScreen().

    @param screenBuffer
    Pointer to a @c CTBuffer object which specifies the new external screen
    buffer into which all rendering will be performed. Ownership of the buffer
    will remain with the caller.

    @remarks
    If an external screen buffer was passed to caps_createScreen() for this
    screen object, the old screen buffer can be deallocated safely after a
    successful call to this function.

    If the provided screen buffer is smaller in size from the previous one, the
    function returns CERR_INVALID_PARAMETER.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_getScreenRotation(CTScreen*)">
    @brief
    Get the current screen rotation in 90 degrees steps.

    @param screen
    Handle to a valid @c CTScreen.

    @return
    @c ::CAPS_ROTATION enumeration. The angle into which the screen is
    rotated.

    @since 3.6

</member>
        <member name="M:caps_setScreenRotation(CTScreen*,CAPS_ROTATION)">
    @brief
    Rotates the current screen in 90 degrees steps.

    @param screen
    Handle to a valid @c CTScreen.

    @param rotation
    The angle into which the screen should be rotated. Can be any of the values
    from the @c ::CAPS_ROTATION enumeration.

    @note
    The effect will only be active on the screen image.
    If rotation is desired to be applied when rendering to file or memory,
    caps_beginRotate(), caps_setRotate() and caps_endRotate()
    must be used.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_applyScreenDithering(CTScreen*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Dithering filter to prevent gradient errors.

    @param screen
    Handle to a valid @c CTScreen.

    @param status
    A @c CTbool. Set status to true if dithering should be enabled. If set to
    false it is disabled.

    @note
    Currently only screens with colormode CM_RGB565 and CM_BGR565 are
    supported by this function. There will not be any effect with any other
    colormode.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_setScreenRgbAdjust(CTScreen*,System.Single,System.Single,System.Single)">
    @brief
    Adjust the RGB color appearance of the screen.

    @param screen
    A pointer to a screen object on which to adjust colors.

    @param r
    Red channel adjustment. Range (-1.0) - (1.0).
    
    @param g
    Green channel adjustment. Range (-1.0) - (1.0).
    
    @param b
    Blue channel adjustment. Range (-1.0) - (1.0).

    @note
    The effect will only affect the screen image. If RGB color adjustment is
    desired to be applied when rendering to file or memory, then
    caps_beginRGBColorAdjust(), caps_setRGBColorAdjust() and 
    caps_endRGBColorAdjust() must be used.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

</member>
        <member name="M:caps_setScreenSharpness(CTScreen*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Adds additional sharpness for the screen.

    @param screen
    A pointer to a screen object for which to set the sharpness factor.

    @param sharpness_level
    A CTint32 sharpness factor in the range 0 - 4, where 0 means off
    and 4 is the highest amount of sharpness.

    @note
    The effect will only be active on the screen image.
    If sharpness is desired to be applied when rendering to file or memory,
    caps_beginSharpness(), caps_setSharpness() and caps_endSharpness()
    must be used.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.5

</member>
        <member name="M:caps_destroyScreen(CTScreen*)">
    @brief
    Destroys a previously created screen. This function must be called before
    caps_destroySession().

    @param screen
    Pointer to the @c CTScreen object to destroy.

    @since 3.0

</member>
        <member name="M:caps_endRotate(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setRotate(cips*,CAPS_ROTATION)">
    @brief
    Rotates the current session image in 90 degrees steps.

    @param session
    Handle to a valid session.

    @param direction
    The angle into which the image should be roated. Can be any of the values
    from the @c ::CAPS_ROTATION enumeration.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginRotate(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endFlip(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setFlip(cips*,CAPS_FLIP_MODE)">
    @brief
    Flips the current session image horizontally or vertically.

    @param session
    Handle to a valid session.

    @param flip_mode
    The direction to flip the image.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginFlip(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_coordCanvasToCurrent(CTScreen*,CTVector*)">
    @brief
    Converts a coordinate from @a canvas to @a current coordinate system.

    @param screen
    A @c CTScreen pointer specifying a screen in which the canvas from which to
    convert the coordinate is located.

    @param coord
    Pointer to a @c CTPoint object with the coordinate to convert. The converted
    coordinate is stored back into the object.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_coordScreenToCurrent(CTScreen*,CTVector*)">
    @brief
    Converts a coordinate from @a screen to @a current coordinate system.

    @param screen
    A @c CTScreen pointer specifying the screen from which to convert the
    coordinate.

    @param coord
    Pointer to a @c CTPoint object with the coordinate to convert. The converted
    coordinate is stored back into the object.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_coordCurrentToScreen(CTScreen*,CTVector*)">
@}

@addtogroup caps_baseapi_screen
@{

@name Coordinate conversions
The coordinate conversion functions are useful in particular when using API
functions that require coordinate information, since all such functions
in CAPS interpret coordinates within the @a current coordinate system.

    @brief
    Converts a coordinate from @a current to @a screen coordinate system.

    @param screen
    A CTScreen pointer specifying the screen to which to convert the
    coordinate.

    @param coord
    Pointer to a CTPoint object with the coordinate to convert. The converted
    coordinate is stored back into the object.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_pixelBitSize(CTColormode)">
    @brief
    Returns the number of bits needed for storing a pixel of the given format.

    @param format
    The colormode format to calculate pixel size for.

    @return
    The required size in bits of one pixel or 0 if an unsupported color mode
    is provided.

    @code
    CTuint32 byteSize = 0;
    CTuint32 bitSize = 0;
    CTColormode colormode;

    colormode = CM_RGB888;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 3
    bitSize = caps_pixelBitSize(colormode);
    //Returns bitSize = 24

    colormode = CM_YUV422SP;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 2
    bitSize = caps_pixelBitSize(colormode);
    //Returns byteSize = 16
    @endcode

    @since 3.5

</member>
        <member name="M:caps_pixelByteSize(CTColormode)">
    @brief
    Returns the number of bytes needed for storing a pixel of the given
    format.

    @param format
    The colormode format to calculate pixel size for.

    @remarks
    Only color formats with a pixel bit size of a multiple of 8 bits
    are supported by this function.
    \n

    @return
    The required size in bytes of one pixel or 0 if an unsupported color mode
    is provided.

    @code
    CTuint32 byteSize = 0;
    CTuint32 bitSize = 0;
    CTColormode colormode;

    colormode = CM_RGB888;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 3
    bitSize = caps_pixelBitSize(colormode);
    //Returns bitSize = 24

    colormode = CM_YUV422SP;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 2
    bitSize = caps_pixelBitSize(colormode);
    //Returns byteSize = 16
    @endcode

    @since 3.2

</member>
        <member name="M:caps_calculateRawSize(CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@}

    @brief
    Calculates the required buffer byte size for corresponding dimensions and
    colormode.

    @param dims
    The dimensions of the raw image to calculate buffer size for.

    @param scanline
    Number of bytes per image row.

    @param format
    The color format of the raw image to calculate buffer size for. See remarks
    section for details.

    @param[out] pByteSize
    Pointer to an @c CTuint32 which will receive the calculated buffer size.

    @remarks
    The @c format argument must be one of the valid color formats specified in:
    @ref supported_colorformats

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @note
    Image size calculations are potentially complex so it is normally easiest
    to leave the scanline parameter at zero. When the scanline is not specified,
    the system may assume a scanline that is not optimally small, but instead
    (for instance) word aligned.

    @note
    This function will not necessarily return the smallest allowed size for an
    image of the specified format.
 
    @since 3.1

</member>
        <member name="M:caps_getBufferSize(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Retrieves the size of a buffer.

    @param buffer
    The @c CTBuffer object from which to retrieve the size.

    @param[out] size
    Pointer to a @c CTuint32 variable which will receive the size in bytes
    of the buffer data.

    @sa
    caps_getBufferData()

    @return
    @c CERR_OK if succesful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_createBufferCopy(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer**)">
    @brief
    Creates an exact copy of the provided buffer.

    @param original
    The @c CTBuffer object to copy.

    @param[out] copy
    Address to a @c CTBuffer pointer which will receive the copy.

    @remarks
    When no longer needed the buffer should be destroyed using
    caps_destroyBuffer().

    @sa
    caps_createBuffer()

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_destroyBuffer(CTBuffer*)">
    @brief
    Destroys a previously created buffer.

    @param buffer
    Pointer to a @c CTBuffer to destroy. This pointer is invalid after the call.

    @sa
    caps_createBuffer()\n
    caps_createBufferCopy()

    @since 3.0

</member>
        <member name="M:caps_createBuffer(System.UInt32!System.Runtime.CompilerServices.IsLong,CTBuffer**)">
@}

@addtogroup buffer_utility
@brief Helper functions for CTBuffer handling.
@{

    @brief
    Creates a new buffer.

    @param size
    The requested size of the new buffer in bytes.

    @param[out] buffer
    Address to a @c CTBuffer pointer which will receive the created buffer.

    @remarks
    When the buffer is no longer needed it should be destroyed using
    caps_destroyBuffer().

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_setGifFrame(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@name Gif selection 
    @brief
    This function shall be used to select which gif image contained in a gif
    file to be displayed.

    @param session
    A valid session handle.

    @param index
    Index of the gif sub-image to be displayed.
    The numbering starts with index = 0.
    The number of gif images in a gif file can be obtained with
    caps_getSourceImageInfo(). See CTImageInfo.

    @param pDisplayTime
    The display time in resolution of 1/100 seconds for the image according to
    the information embedded in the gif file. Note that the display time is
    is coded individually for all sub-images. Infinite display time
    is indicated with zero.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7

</member>
        <member name="M:caps_addAppBlocksToJpegHeaderFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Adds one, or more, Jpeg APPn segment(s) to a session.

    The added data will written to the header when the session is
    rendered to a Jpeg-file.

    @note Only valid when rendering to Jpeg-files.

    @param session
    A valid CAPS CTSession.

    @param auxData
    A buffer containing the APP block data. The buffer may hold several APP blocks.
    If @c NULL is passed, any previously set data will be deleted from the session.
	Note that no sanity check is made on this buffer. The caller must make sure
	that the APP block identifier(s) and associated size(s) are correct. Incorrect identifiers
	and sizes may result in failure to decode the jpeg image.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.
    
    @since 3.11

</member>
        <member name="M:caps_addXmpDataFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
@name Jpeg header (Application segment) management 
    @brief
    Adds XMP meta data to a session.

    The added data will written to the header when the session is
    rendered to a Jpeg-file.

    @note Only valid when rendering to Jpeg-files.

    @param session
    A valid CAPS CTSession.

    @param xmpData
    A buffer containing the XMP meta data.
    If @c NULL is passed, any previously set data will be deleted from the session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.
    
    @since 3.11

</member>
        <member name="M:caps_imageInfoHasField(CTImageInfo*,IIF,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Determines whether a field within the given image information object is 
    available or not.

    @param pInfo
    Pointer to a CTImageInfo object which has been previously retrieved from
    a session.

    @param field
    The field ID to query.

    @param pHasField
    Pointer to a CTbool variable which will receive @c true if the given field
    exists or 2c false otherwise.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_getSourceImageInfo()\n
    caps_imageInfoHasField()\n

    @since 3.4

</member>
        <member name="M:caps_getImageInfoField(CTImageInfo*,IIF,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Retrieves a field of information from a CTImageInfo object.

    @param pInfo
    Pointer to a CTImageInfo object which has been previously retrieved from
    a session.

    @param field
    ID of the field to retrieve data from. Can be one of the values from the
    ::IIF enumeration. If the given field is unavailable the function returns
    CERR_ITEM_NOT_FOUND.

    @param pData
    Pointer to a CTint32 variable which will receive the field data. The
    returned contents of the field is different depending on which field is
    being requested. Please refer to the documentation of each member of the
    ::IIF enumeration for information on how to handle the @a data argument
    for each field ID.

    @remarks
    caps_imageInfoHasField() can be used to determin in advance if a certain
    information field exists in the given info object.

    @return
    - @c CERR_OK if successful or a specific error code upon failure.
    - @c CERR_ITEM_NOT_FOUND is returned if the field is unavailable.
    .

    @sa
    caps_getSourceImageInfo()\n
    caps_imageInfoHasField()\n

    @since 3.4

</member>
        <member name="M:caps_destroyImageInfo(CTImageInfo*)">
    @brief
    Destroys a CTImageInfo object.

    @param imageInfo
    Pointer to a previously created CTImageInfo object.

    @sa
    caps_getSourceImageInfo()\n

    @since 3.4

</member>
        <member name="T:CTImageInfo">
@}

@addtogroup types_n_defs
@{

    @brief
    Image information object type used when acquiring information about images.

    For information on how to retrieve image information using the @c CTImageInfo object,
    study the documentation for the following functions, and enum:

    - enum @ref IIF
    - caps_getSourceImageInfo()
    - caps_getImageInfoField()
    - caps_imageInfoHasField()

    @since 3.4

</member>
        <member name="M:caps_undoAll(cips*)">
    @brief
    Reverts all undoable operations performed on the session.

    @param session
    A valid session handle.

    @remarks

    This function basically invokes caps_undo() until caps_canUndo() returns
    false.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_blendBackgroundColor(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Tell CAPS whether to blend in the background color when rendering
    from a png or gif source containing alfa data. The default setting for
    this in CAPS is TRUE, i.e. CAPS will blend in the background color.

    @param session
    A valid session handle.

    @param blendInBackground
    A @c if true, use source alpha channel to blend in background color to
    the source color channels. If false, the color channels remains untouched.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_getCurrentImageSize(cips*,CTSize*)">
    @brief
    Retrieves the dimensions of the current session image.

    @param session
    A valid session handle.

    @param[out] size
    Pointer to a @c CTSize object which will receive the size.

    @remarks

    The "current" image is the result of the source image with all currently
    added effects applied to it. For example if a source image is 640x480
    in size and a cropping effect is applied which crops a rectangle of 100x100
    pixels, the current session image size will equal 100x100 pixels.

    Note that the output image size may differ from the current image size.
    It is not allowed to call this function during a rendering process.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_getSourceImageSize()

    @since 3.0

</member>
        <member name="M:caps_getSourceImageSize(cips*,CTSize*)">
    @brief
    Retrieves the source image dimensions.

    @param session
    A valid session handle.

    @param[out] size
    Pointer to a @c CTSize object which will receive the size.

    @remarks

    The source image dimensions are available directly after constructing the
    session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_getCurrentImageSize()

    @since 3.0

</member>
        <member name="M:caps_signalSessionEvent(cips*,CTSessionEvent)">
    @brief
    Signals the given session about certain events.

    @param session
    Handle to a session.

    @param event
    The event signal. Can be any of the @c ::CTSessionEvent values. Refer to
    documentation of this enumeration for details.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setSourceImageRaw()

    @since 3.1

</member>
        <member name="M:caps_destroySession(cips*)">
    @brief
    Destroys a previously constructed session object.

    @param session
    Handle to a session.

    @remarks

    The session handle along with all its associated data is invalid after
    calling this function. I.e all CTImage(s) and CTBuffer(s) added to the
    session with OWNERSHIP_POLICY = OWNERSHIP_CAPS.

    @since 3.0

</member>
        <member name="M:caps_setSourceColor(cips*,CTColor,CTSize)">
    @brief
    Changes the source of the session to a color surface of the specified size.

    @param session
    Handle to a session.

    @param color
    A @c CTColor object specifying the the surface color. The alpha channel of
    the specified color is ignored.

    @param size
    The requested size in pixels of the color surface.

    @attention
    This function is not intended to be used iteratively in
    performance critical realtime scenarios. It is intended to make the task
    of changing source while preserving current settings and effects easier.

    See documentation of caps_newSessionWithColor() for more information.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:caps_setSourceImageBitmap(cips*,CTBitmap*)">
    @brief
    Changes the source image of the given session to the specified raw image
    buffer.

    @param session
    Handle to a session.

    @param pBitmap
    A pointer to a @c CTBitmap object containing the raw image data with
    associated information. The raw image data is not copied by the
    session and must stay alive while using it as source.

    caps_signalSessionEvent() with CTSessionEvent = EVENT_SOURCEDATA_CHANGE
    should be called after this function to notify that the source data have changed.

    See documentation of caps_newSessionWithRaw() for more information.

    @return
    @c CERR_OK if successful or a specific error code upon failure

    @sa
    caps_signalSessionEvent()

    @since 5.3

</member>
        <member name="M:caps_newSessionWithBitmap(CTBitmap*,cips**)">
    @brief
    Initiates a new session using raw image data.

    @param pBitmap
    A pointer to a @c CTBitmap object containing the raw image data with
    associated information. The raw image data is not copied by the
    session and must stay alive while using it as source.

    @param[out] session
    Pointer to a @c CTSession handle wich will receive the constructed
    session. If construction fails this argument is NULL.

    @attention
    The raw image data must be in one of the valid (input) color formats,
    specified in: @ref supported_colorformats

    @remarks
    When the session is no longer needed it should be destroyed using
    caps_destroySession().

    @return
    @c CERR_OK if successful or a specific error code upon failure, in which
    case both the @c session and @c pBitmap arguments are left unmodified.

    @sa
    caps_newSessionWithFile()\n
    caps_newSessionWithFileHandle()\n
    caps_newSessionWithBuffer()\n
    caps_newSessionWithColor()

    @since 5.3

</member>
        <member name="M:caps_setSourceImageBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Changes the source image of the given session to the specified image
    buffer.

    @param session
    Handle to a session.

    @param buffer
    A @c CTBuffer pointer specifying a buffer containing image data. The buffer
    is not copied, and must stay alive while using it as source.

    @param format
    The format of the image data contained in @c buffer. This value can be one
    of the @c ::CTImageFormat values supported by CAPS internally.

    @remarks

    IMPORTANT: This function is not intended to be used iteratively in
    performance critical realtime scenarios. It is intended to make the task
    of changing source while preserving current settings and effects easier.
    \n\n

    caps_signalSessionEvent() with CTSessionEvent = EVENT_SOURCEDATA_CHANGE
    should be called after this function to notify that the source data have changed.

    See documentation of caps_newSessionWithBuffer() for more information.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_newSessionWithBuffer()\n
    caps_signalSessionEvent()

    @since 3.1

</member>
        <member name="M:caps_setSourceImageIndex(cips*,CTStream*)">
    @brief 
    Speed up the first time a CTSession is rendered, using speedtags index.

    @param session
    Handle to a session.

    @param pIndexStream
    A pointer to a stream containing a speedtags image index.
    This stream object cannot be used or freed by anyone until the session has
    been destroyed, or until the source used by the session has been changed 
    ( using caps_setSourceImage ).

    @remarks
    The currently supported image formats are:
    @li JPEG 

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.2

</member>
        <member name="M:caps_setSourceImage(cips*,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Changes the source image of the given session to the specified image
    stream.

    @param session
    Handle to a session.

    @param pStream
    A pointer to a stream containing an image. This stream object cannot be
    used or freed by anyone until the session has been destroyed, or
    until the source used by the session has been changed
    ( using caps_setSourceImage ).

    @param format
    The image format of the stream.

    The following image formats are supported:
    @b JPEG, @b PNG, @b GIF, @b BMP, @b WBMP, @b TIFF

    @attention
    This function is not intended to be used iteratively in performance
    critical realtime scenarios. It is intended to make the task of changing
    source easier, while preserving current settings and effects.

    @note
    Calling this function will reset the @c enablePrefetch flag to
    @c true (default); see: caps_uthSetPrefetchFlag()
    If this is not desired, @c caps_uthSetPrefetchFlag must be called
    with the appropriate parameters after each call
    to @c caps_setSourceImage.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_createSession()
    - caps_uthSetPrefetchFlag()
    - caps_getImageTypeFromExt()
    - caps_getImageType()
    - caps_setSourceImage()
    .

    @since 3.8

</member>
        <member name="M:caps_setSourceDecoder(cips*,CTDecoder*)">
    @brief
    Changes the source image of the given session to the specified decoder.

    @param session
    Handle to a session.

    @param pDecoder
    A pointer to a CTDecoder object containing an image. This decoder object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed.

    @attention
    This function is not intended to be used iteratively in performance
    critical realtime scenarios. It is intended to make the task of changing
    source easier, while preserving current settings and effects.

    @note
    Calling this function will reset the @c enablePrefetch flag to
    @c true (default); see: caps_uthSetPrefetchFlag()
    If this is not desired, @c caps_uthSetPrefetchFlag must be called
    with the appropriate parameters after each call
    to @c caps_setSourceImage.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_createSessionFromDecoder()
    - caps_setSourceImage()
    .

    @since 3.8.2 R01

</member>
        <member name="M:caps_createSessionFromDecoder(CTDecoder*,cips**)">
    @brief
    Initiates a new session using a CTDecoder as input.

    @param pDecoder
    A pointer to a CTDecoder object containing an image. This decoder object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed.

    @param[out] session
    Pointer to a handle which will receive the constructed session. If
    construction fails this argument is NULL.

    @note
    When the session is no longer needed it should be destroyed using
    caps_destroySession().

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_createDecoderFromFormat()
    - caps_getImageType()
    - caps_newSessionWithRaw()
    - caps_newSessionWithColor()
    .

    @since 3.8.2 R01

</member>
        <member name="M:caps_createSession(CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)">
    @brief
    Initiates a new session using an image from the stream as input.

    @param pStream
    A pointer to a CTStream object containing an image. This stream object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed
    using: caps_setSourceImage().

    @param format
    The image format of the stream.

    @param[out] session
    Pointer to a handle which will receive the constructed session. If
    construction fails this argument is NULL.

    The following image formats are supported:
    @b JPEG, @b PNG, @b GIF, @b BMP, @b WBMP, @b TIFF

    @note
    When the session is no longer needed it should be destroyed using
    caps_destroySession().

    For creation of streams see:
    - @ref scb_ctstream_buffer
    - @ref scb_ctstream_file
    - @ref scb_ctstream_interface
    .

    @remark
    By default, when @c caps_newSession is called, the entire Jpeg image is
    read into memory. This is usually desired since it provides best (speed)
    performance, but is not always neccessary. In particular, if
    a @c CTSession is created from a buffer stream, this would duplicate the
    memory buffer. To disable the caching in this case, the function:
    caps_uthSetPrefetchFlag() should be called with the @c enablePrefetch
    parameter set to @c false.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_uthSetPrefetchFlag()
    - caps_createSessionFromDecoder()
    - caps_newSessionWithRaw()
    - caps_newSessionWithColor()
    - caps_getImageType()

    @since 3.8

</member>
        <member name="M:caps_createEncoderFromFormat(CTStream*,CTImageFormat,CTEncoder**)">
    @brief
    Create a CTEncoder from a given CTImageFormat

    @param pStream 
    A pointer to a stream opened with write access.
    If this function is successful, the stream must be alive, and must not be
    manipulated with, during the lifetime of the CTEncoder.

    @param format
    The desired image format that the encoder should output to.
    The following formats are supported:
    @b JPEG

    @param[out] ppEncoder The created encoder.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8.2 R01


</member>
        <member name="M:caps_createDecoderFromFormat(CTStream*,CTImageFormat,CTDecoder**)">
    @brief
    Create a CTDecoder from a given image format

    @param pStream 
    A pointer to a CTStream object containing an image, opened with read access.
    If this function is successful, the stream must be alive, and must not be
    manipulated with, during the lifetime of the CTDecoder.

    @param format
    The image format of the stream.
    The following formats are supported:
    @b JPEG, @b PNG, @b GIF, @b BMP, @b WBMP, @b TIFF

    @param[out] ppDecoder The created decoder.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_getImageType()
    .

    @since 3.8.2 R01


</member>
        <member name="M:caps_getImageTypeFromHdrMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pBuffer
    A pointer to a buffer containing the file.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n
    caps_getImageType()\n
    caps_getImageTypeFromHdrFile()\n
    caps_getImageTypeFromHdrFileHandle()\n

    @since 3.4

</member>
        <member name="M:caps_getImageTypeFromHdrFileHandle(CTFile*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pHandle
    A handle to a file with read permissions.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.
    NOTE: Currently only SRCIMG_FORMAT_UNDEFINED or SRCIMG_FORMAT_JPEG_BASELINE
    are returned.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n
    caps_getImageType() \n
    caps_getImageTypeFromHdrMem()\n
    caps_getImageTypeFromHdrFile()\n

    @since 3.4

</member>
        <member name="M:caps_getImageTypeFromHdrFile(System.Char!System.Runtime.CompilerServices.IsConst*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pFilename
    The filesystem path to the file.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n
    caps_getImageType()\n
    caps_getImageTypeFromHdrMem()\n
    caps_getImageTypeFromHdrFileHandle()\n

    @since 3.4

</member>
        <member name="M:caps_getImageType(CTStream*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pStream
    A pointer to a stream comtaining an image.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n

    @since 3.8

</member>
        <member name="M:caps_getImageTypeFromExt(System.Char!System.Runtime.CompilerServices.IsConst*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file extension.

    @param pFilename
    The filesystem path to the file.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @return
    - @c CERR_OK if function succeds and format is identified.
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageType()\n

    @since 3.2

</member>
        <member name="M:caps_getVersion">
@file caps_base.h
@brief This header defines the public interface of the CAPS Base API.
@ingroup caps_baseapi_basicops

    @addtogroup caps_baseapi
    @par Notable conventions
    All functions of the CAPS API return errorcodes, except for
    destruction interfaces which by design cannot fail.\n\n

    @par
    Due to the above convention, if a construction interface fails, it always
    uses the return value to propagate the error back to the caller and the
    constructed object is always passed back to the caller through an output
    argument.

    @par Design By Contract
    CAPS is implemented by the so called "Design by contract" principle.
    All API functions handle invalid user input by returning the error code
    @c CERR_INVALID_PARAMETER. This error is returned as an alternative to
    triggering an assert/breakpoint and should not be treated as "normal"
    errors which can be reported and recovered from. Since no implicit
    execution break is performed by CAPS in unrecoverable error cases it
    is essential that all error codes returned from the API are handled
    properly.

@addtogroup caps_baseapi_basicops
@brief Basic operations provided by the CAPS Imaging Engine module.
@{

    @brief
    Retrieves the release version of the API.

    @return
    The version as a static constant null-terminated string.

    @since 3.0

</member>
        <member name="M:ctdecoder_getImageSize(CTDecoder*,CTSize*)">
    @brief
    Retrieves the image size of the underlying image.

    @param pDecoder Decoder to use for this call.
    @param[out] pSize Pointer to a CTSize where the result is stored.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_interfaceContext(CTDecoder*,CTInterfaceID,System.Void**)">
    @brief
    Returns the interface context related to the interface id.

    The caller is responsible for knowing the exact type returned
    by a call to this function.

    @param pDecoder Decoder to use for this call.
    @param interfaceId Interface id to query for a context.
    @param[out] ppInterfaceContext Pointer to the returned context. The 
    caller does not own the reference, and so must not attempt to free
    it.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not implemented by the
    decoder implementation.
    @c CERR_INVALID_PARAMETER if the particular requested interface is not
    available.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_getRegionDec(CTDecoder*,CTRegionDec**)">
    @brief
    Returns a region decoder.

    This functions creates an instance of a region decoder and returns it to 
    the caller. The caller will be responsible of destroying this object.
    Before calling this function, the decoder must be parsed.
 
    @param pDecoder A pointer to a valid decoder instance.
    @param[out] ppRegionDec The created region decoder.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not supported.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.

    @sa ctregiondec.h

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_getSeqDecWithScanProc(CTDecoder*,CTScanProc*,CTSeqDec**)">
    @brief
    Returns a sequential decoder.
     
    This functions creates an instance of a sequential decoder and returns
    it to the caller. The caller will be responsible for destroying this object.
    Before calling this function, the decoder must be parsed.
     
    @param pDecoder A pointer to a valid decoder instance.
    @param pScanProc The scanline processor to be used with this decoder.
    @param[out] ppSeqDec A pointer to a valid sequential decoder instance.
     
    Currently only JPEG is supported for this operation

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not supported.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.

    @sa ctseqdec.h

    @since 5.1

</member>
        <member name="M:ctdecoder_getSeqDec(CTDecoder*,CTImage*,CTSeqDec**)">
    @brief
    Returns a sequential decoder.

    This functions creates an instance of a sequential decoder and returns
    it to the caller. The caller will be responsible for destroying this object.
    Before calling this function, the decoder must be parsed.

    Currently only JPEG is supported for this operation

    @param pDecoder A pointer to a valid decoder instance.
    @param pImage An image on which the image will be decoded.
    @param[out] ppSeqDec A pointer to a valid sequential decoder instance.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not supported.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.
    @c CERR_UNSUPPORTED_COLOR_MODE if the image has an unsupported color mode.

    @sa ctseqdec.h

    @since 5.2

</member>
        <member name="M:ctdecoder_parseHeader(CTDecoder*,CTIterator**)">
    @brief
    Parses the header. 
    
    The iterator returned by this function must be iterated until a 
    CRES_TASK_COMPLETE is returned before most other operations on the decoder
    object can be called.

    @param pDecoder
    A pointer to a valid decoder instance.

    @param[out] ppIterator
    Iterator created by the call to this function. If left as null, the 
    call will complete instantly.

    @return @c CERR_OK if successful or a specific error code upon failure.

    @remarks The iterator must be destroyed by the caller.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_destroy(CTDecoder*)">
    @brief
    Destroys an instance of a CTDecoder.

    @param pDecoder A pointer to a valid decoder instance or NULL.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_createDecoder(CTDecoderType,CTStream*,CTDecoder**)">
    @brief
    Creates an instance of a CTDecoder. The decoder types listed in CTDecoderType are supported.

    @param decoderType Type of decoder implementation
    @param pStream Stream containing the data to decode
    @param[out] Pointer to the created decoder instance

    @sa CTDecoderType

</member>
        <member name="T:CTDecoder">
    @file ctdecoder.h
    @brief This file defines the public interface of CTDecoder class.

    @ingroup ctdecoder

    @addtogroup ctdecoder
    @brief CTDecoder provides an abstraction of decoding image data and
    properties.

    The CTDecoder class itself is responsible only for decoding image metadata,
    such as the header, and creating a CTRegionDec or CTSeqDec which can decode
    pixel data from the image.

    @{

@brief
CTDecoder provides a generic image decoding interface. 

</member>
        <member name="M:ctseqdec_prepare(CTSeqDec*)">
    @brief
    Prepares the decoder

    @param pDecoder A decoder instance to prepare.

    @return CERR_OK or a proper error code.

    @since 5.4

</member>
        <member name="M:ctseqdec_decode(CTSeqDec*,CTIterator**)">
    @brief
    Starts the decoding process, and returns an iterator that can
    be used to perform the decoding.

    @param pDecoder A decoder instance to decode from.
    @param[out] ppIterator A pointer to an iterator to be used for performing
    the decoding.

    @return CERR_OK or a proper error code.

    @since 3.8.2 R01

</member>
        <member name="M:ctseqdec_destroy(CTSeqDec*)">
    @brief
    Destroys a sequential decoder instance.

    @param pDecoder A pointer to the decoder to be destroyed.

    @since 3.8.2 R01

</member>
        <member name="T:CTSeqDec">
@file ctseqdec.h
@brief This header file defines the interface needed to access a CTSeqDec
object.
@ingroup ctseqdecoder

    @addtogroup ctseqdecoder
    @brief The CTSeqDec class defines an interface to access sequantial decoding
    of pixel data.

    While this is normally aquired from a CTDecoder source using the specific
    interface for requesting pixel decoders, this is not necessarily the case.

    @{

</member>
        <member name="M:ctregiondec_getImageSize(CTRegionDec*,CTSize*)">
    @brief
    Retrieves the image size of the underlying image.

    @param pRegionDec Region decoder
    @param[out] pSize Pointer to a CTSize where the result is stored.

    @return 
    @c CERR_OK if successful, or an error code on failure.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_getDecodeResult(CTRegionDec*,CRESULT*)">
    @brief
    Retrieves the result of decoding the image.

    Typically, this call indicates whether the image was correctly decoded or 
    if the image could only be partially decoded.

    @param pRegionDec Region decoder to query.
    @param pDecodeResult Result of the decoding process

    @return CRESULT indicating whether the decoder could be queried for
    decoding state.

    @remarks
    This function is normally called after prepare has completed successfully.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_destroy(CTRegionDec*)">
    @brief
    Destroys the region decoder.
    The decoder used while retrieving the region decoder via ctdecoder_getRegionDec
    must be alive when calling this function.

    @param pRegionDec A pointer to a valid CTRegionDec instance, or NULL.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_decodeRegion(CTRegionDec*,CTRect*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
    @brief
    Decodes a region of the image specified by a rectangle.
    Note:
    If the image is scaled the rectangle is given in the scaled coordinates of
    the source image. Also, the rectangle must be within the scaled image.
    The image is scaled as follows: floor(image_dims/downScale)


    @param pRegionDec A pointer to a valid CTRegionDec instance.

    @param pRect A pointer to a valid rectangle object.
           Note: The rectangle should be given in the scaled source image.

    @param downScale A down scaling factor less or equal to 128.
                     It must be a power of two.
    @param pImageChs A pointer to a valid image object.

    @remarks
    Supported color modes: AYUV4444, ARGB8888, RGBA8888, BGRA8888 and RGB565.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_prepare(CTRegionDec*,CTIterator**)">
    @brief
    Prepares the region decoder to decode pixel data.

    @param pRegionDec
    Decoder to prepare for decoding.

    @param[out] ppIterator
    Iterator to use for preparing the decoder. If left as null, the operation 
    will complete instantly.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @remarks
    Even if the image is corrupt, this function should return CERR_OK, as long as
    the image can be decoded using ctregiondec_decodeRegion(). If the image is corrupt
    but can be decoded, an appropriate error specification should be given in
    ctregiondec_getDecodeResult().

    @since 3.8.2 R01

</member>
        <member name="T:CTRegionDec">
@file ctregiondec.h
@brief This file defines the interface to a CTRegionDec.
@ingroup ctregiondecoder

    @addtogroup ctregiondecoder
    @brief A region decoder object, CTRegionDec, is responsible for decoding
    pixel data from a generic pixel source.

    This pixel data can be any rectangular subset of the original image, so a
    decoder supporting this interface can be used to "random access" pixels of
    the image.
    
    Normally this pixel source comes from a decoder (and the CTRegionDec is 
    created by using the CTDecoder function for that purpose) but this is not 
    necessarily the case.

    @{

@brief The region decoder object.

</member>
        <member name="M:ctencoder_encodeBitmap(CTEncoder*,CTBitmap*)">
    @brief
    Encodes an image of pixel data.

    @param pEncoder A pointer to a valid encoder instance.
    @param pImage A CTBitmap object representing the image.

    @return CERR_OK, a proper error code.
    @since 5.4

</member>
        <member name="M:ctencoder_encodeImage(CTEncoder*,CTImage*)">
    @brief
    Encodes an image of pixel data.

    @param pEncoder A pointer to a valid encoder instance.
    @param pImage A CTImage object representing the image.

    @return CERR_OK, a proper error code.
    @since 5.3 

</member>
        <member name="M:ctencoder_negotiateTileSpec(CTEncoder*,CTSize,CTTileSpec*)">
    @brief
    Negotiates the tile specification with the encoder.

    @param pEncoder A pointer to a valid encoder instance.
    @param dims Dimensions of the image to be encoded.
    @param[in,out] pTileSpec A pointer to a tile specification to negotiate.

    @return CERR_OK if the encoder could negotiate the tile spec. In this 
    case, the pTileSpec variable with new constraints or accepted as is.
    CERR_NOT_IMPLEMENTED is returned if the negotiate function isn't 
    implemented.

    @remarks The encoder may chose to reject all incoming suggestions
    regardless of how reasonable they would be to fulfill (for instance
    lowering the range of allowed widths). If, however, the encoder returns
    CERR_OK, this tile spec can be expected to appear in beginEncoding, if
    that function is called directly after negotiations have finished.

    If this function is not called, the encoder may choose any tile spec
    in the call to beginEncode.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_interfaceContext(CTEncoder*,CTInterfaceID,System.Void**)">
    @brief
    Returns the interface context related to the interface id.

    This interface is implementation specific and in its simplest form, may
    return a pointer to the underlying context (ie. returns a reference to
    pContext). The caller is responsible for casting the returned pointer 
    to the correct type.

    This operation may be thought of as upcasting an interface.

    @param pEncoder Encoder to use for this call.
    @param interfaceId Interface id to query for a context.
    @param[out] ppInterfaceContext Pointer to the returned context. The 
    caller does not own the reference, and so must not attempt to free
    it.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not implemented by the
    encoder implementation.
    @c CERR_INVALID_PARAMETER if the particular requested interface is not
    available.

    @remarks This method is optional to implement. If not implemented, it 
    will return an appropriate error code.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_destroy(CTEncoder*)">
@brief
Destroys an instance of a CTEncoder.

@param pEncoder A pointer to a valid encoder instance or NULL.

@since 3.8.2 R01

</member>
        <member name="M:ctencoder_endEncoding(CTEncoder*)">
    @brief
    End encoding.
    
    Finalizes the encoding, freeing resources and writing a footer if
    needed.
    
    @param pEncoder A pointer to a valid encoder instance.
    
    @return CERR_OK, a proper error or status code. Since the
    encoder encodes to a stream, it could also delay.
    @c CERR_OPERATION_FAILED if the encoder has not begun to encode, or has
    already stopped.
    @c CERR_STREAM_DELAYED if the stream delayed the write operation.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_encodeTile(CTEncoder*,CTBitmap*)">
    @brief
    Encodes a tile of pixel data.
    
    The tiles must follow the tile specification returned in the begin
    function.
    
    @param pEncoder A pointer to a valid encoder instance.
    @param pTile A CTImageChannels object representing a tile of pixel data.
    
    @return CERR_OK, a proper error or status code. Since the
    encoder encodes to a stream, it could also delay.
    @c CERR_OPERATION_FAILED if the encoder is not ready to encode pixel data.
    @c CERR_STREAM_DELAYED if the stream delayed the write operation.

    @remarks The tile parameter expects to follow the pTileSpec returned
    by the encoder in ::ctencoder_beginEncoding except for a few cases.
    @li At the end of a scan line, the tiles may violate the minimum width
    specified by the tile specification. Similarly, if the encoder has reached
    the top or bottom of the image, the minimum height value may be ignored.
    This condition is true for height and width granularity as well.
    @li The encoder is free to ignore extra data passed to it, if that data 
    exceeds the image dimensions.
    @li If the encoder needs extra data past the image dimensions, it is free
    to invents its own pixel data for those regions.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_beginEncoding(CTEncoder*,CTSize,CTTileSpec*)">
    @brief
    Begins the encoding process, preparing the necessary structures.

    This function will also output the header if needed, and return
    a CTTileSpec object with the required specifications of the input
    pixel data.
    
    @param pEncoder A pointer to a valid encoder instance.
    @param dims Dimensions of the image to be encoded.
    @param[out] pTileSpec A pointer to a tile specification.
    
    @return CERR_OK, a proper error or status code. Since the
    encoder encodes to a stream, it could also delay.
    @c CERR_OPERATION_FAILED if the encoder is not ready to begin encoding
    pixel data, or has already started.
    @c CERR_STREAM_DELAYED if the stream delayed the write operation.

    @remarks
    The tile specification does not indicate suggested values for tiles, and
    must be strictly followed with a few exceptions (that are documented in
    ctencoder_encodeTiles).

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_createEncoder(CTEncoderType,CTStream*,CTEncoder**)">
    @brief
    Creates an instance of a CTEncoder. The encoder types listed in CTEncoderType are supported.

    @param encoderType Type of encoder implementation
    @param pStream Output stream that encoded data will be written to
    @param[out] Pointer to the created encoder instance

    @sa CTEncoderType

</member>
        <member name="F:gDefaultTileSpec">
    @brief
    Default tile specification.

    This variable is used to initialize a tile 
    specification prior to negotiations.

</member>
        <member name="T:CTEncoder">
@file ctencoder.h
@brief This header file defines the public interface for accessing a 
CTEncoder object.
@ingroup ctencoder

    @addtogroup ctencoder
    @brief A CTEncoder object handles encoding of pixel data sent to it as a 
    sequence of tiles.

    It also handles tile specification, in order to support optimal use of
    caching or other needed mechanisms of the underlying encoder implementation.

    @{

    @brief
    CTEncoder provides a generic image encoding interface. 


</member>
        <member name="M:ctimagechannels_getChannel(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTImageBase*)">
    @brief
    Get a channel from the CTImageChannels.
    
    @param pImageChs A valid pointer to a CTImageChannels.
    @param channelIndex The index of the channel to return. The index start at 0.
    @param[out] pImage A pointer to CTImageBase which will contain the channel 
                       image information.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_getNumChannels(CTBitmap*)">
    @brief
    Get number of channels the CTImageChannels consists of.
    
    @param pImageChs A valid pointer to a CTImageChannels.

    @return The number of channels.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_getDims(CTBitmap*,CTSize*)">
    @brief
    Get the image dimension of the CTImageChannels.
    
    @param pImageChs A valid pointer to a CTImageChannels.
    @param[out] pDims A pointer where the dimension will be stored.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_getColorMode(CTBitmap*,CTColormode*)">
    @brief
    Get the color mode of the CTImageChannels.
    
    @param pImageChs A valid pointer to a CTImageChannels.
    @param[out] pColorMode A pointer where the color mode will be stored.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_destroy(CTBitmap*)">
    @brief
    Destroys an image channels object.
    
    @param pImageChs Valid pointer to a CTImageChannels.

    @remarks
    If the CTImageChannels where created with ctimagechannels_createFromImages() 
    the pixel data is not destroyed, the ownership remains with the caller.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_createFromImages(CTSize,CTColormode,CTImageBase*,CTBitmap**)">
    @brief
    Create an image channels object from images.
    
    @param dims A CTSize which describes the image dimensions
    @param colorMode The image color mode.
    @param pImages An array of CTImageBase types which the image channels will be 
                   created from. Each CTImageBase represent a channel and 
                   the scanline has to be 32-bit aligned. The routine will only 
                   use as many CTImageBase as the color mode implies and 
                   @c CERR_INVALID_PARAMETER will be returned if there is too 
                   few CTImageBase.
    @param[out] ppImageChs The created image channels object.
 
    @remarks
    Only AYUV4444, ARGB8888 and YUV422P is supported.
    The ownership of the pixel data will remain with the caller.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_create(CTSize,CTColormode,CTBitmap**)">
    @brief
    Create an image channels object.
    
    @param dims A CTSize which describes the image dimensions.
    @param colorMode The image color mode.
    @param[out] ppImageChs The created image channels object.
 
    @remarks
    Only AYUV4444, ARGB8888 and YUV422P is supported.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="D:CTImageChannels">
@file ctimagechannels.h
@brief Defines the public interface of CTImageChannels
@ingroup imagechannels_utility

    @addtogroup imagechannels_utility
    @brief
    Utility functions for creating and managing image buffers, with the image
    data arranged in separate color buffers/channels.

    @{

    @brief
    The image channels type supports images with several channels. 
    
    For example CM_YUV422P is a planar format which consist of three channels;
    one for Y, one for U and one for V. However CM_ARGB8888 and CM_AYUV4444 
    are not planar formats and they consist of one channel which holds the 
    entire image.

    Type CTImageChannels is deprecated and is superseded by CTBitmap.

</member>
        <member name="M:ctbitmap_createCroppedBitmap(CTBitmap*,CTRect,CTBitmap**)">
    @brief Crops a rectangle from bitmap and creates a bitmap from that area.
           Data is still owned by source

    @param pSrc The source bitmap that will be croped.
    @param rect Cropped area
    @param ppBitmap[out] Cropped bitmap

    @return CRESULT indicating result of the operation.
 

</member>
        <member name="M:ctbitmap_convertBitmap(CTBitmap*,CTBitmap*)">
    @brief Converts a bitmap to a different color format.
    The destination bitmap must have the same dimensions as the source bitmap.
    The color format of pBitmapDest specifies the target color format.

    @param pBitmapSrc The source bitmap that will be converted.
    @param pBitmapDest Bitmap where the converted data is stored.

    @return CRESULT indicating result of the operation.
 
    @since 5.4

</member>
        <member name="M:ctbitmap_getPlaneOffset(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns a pointer to the plane pixel data
 
    @param pBitmap      Pointer to a valid bitmap
    @param imagePlane Index of a valid image plane
 
    @return Pointer to the beginning of the bitmap byte buffer for the specified
    plane.

    @since 5.3

</member>
        <member name="M:ctbitmap_getPlane(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Retrieves an image plane from the ctbitmap.

    @param pBitmap Pointer to a valid bitmap object.
    @param bitmapPlane Index of the bitmap plane to retrieve.
 
    @return zero in all fields if the call fails. Typically, because pBitmap is invalid or
    because imagePlane is larger than the number of available planes.

    @since 5.3

</member>
        <member name="M:ctbitmap_getPlaneCount(CTBitmap*)">
    @brief Returns the number of planes for the specified image.
    
    @param pBitmap Pointer to a valid bitmap object.
 
    @return 0 if pBitmap is invalid, or if the call fails.

    @since 5.3

</member>
        <member name="M:ctbitmap_getColorMode(CTBitmap*)">
    @brief Retrieves the ctbitmap color format.
    
    @param pBitmap Pointer to a valid bitmap object.
 
    @return CM_UNDEFINED if pBitmap is invalid.

    @since 5.3

</member>
        <member name="M:ctbitmap_getScanline(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Retrieves scanline of an image plane from the ctbitmap.

    @param pBitmap Pointer to a valid bitmap object.
    @param bitmapPlane Index of the bitmap plane to retrieve.
 
    @return Scanline of plane number plane.


</member>
        <member name="M:ctbitmap_getDims(CTBitmap*)">
    @brief Returns the width and height of a bitmap.
 
    @param pBitmap Pointer to a valid bitmap object.
 
    @return Dimensions of the bitmap or (0,0) if an error occured (typically bad
    input parameter, such as a null pointer).

    @since 5.3

</member>
        <member name="M:ctbitmap_createCopy(CTBitmap*,CTBitmap**)">
    @brief Creates a CTBitmap with the same dimensions and colormode as another bitmap
    and copies the pixel data to the new bitmap.

    @param pIn              Pointer to a valid bitmap.
    @param[out] ppBitmap    Output bitmap from the function.

    @return CRESULT indicating result of the operation.

    @remark Note that the scanlines and internal data layout of the created bitmap
    may differ from the input bitmap.

</member>
        <member name="M:ctbitmap_createFromDataPlanar(System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,CTSize,CTColormode,CTBitmap**)">
    @brief Creates a CTBitmap from the pointers given by ppData.

    @param ppData           Pointer to an array of data pointers. ppData[n] 
                            points to the nth plane's pixel data.
    @param pScanline        Pointer to an array of scanlines.
    @param dims             Dimensions of the bitmap representation
    @param format           Color mode of the pixels described by pData
    @param[out] ppBitmap    Output bitmap from the function.

    @return CRESULT indicating result of the operation.

    @since 5.3

</member>
        <member name="M:ctbitmap_createFromData(System.Byte*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBitmap**)">
    @brief Creates an image from the pointer given by pData.

    For planar color formats ctbitmap_createFromDataPlanar() should be used 
    instead.
 
    @param pData        Pointer to a byte buffer of pixel data.
    @param dims         Dimensions of the bitmap representation
    @param scanline Scanline of the bitmap representation. If set to zero, a
    suitable scanline will be assigned.    
    @param format       Color mode of the pixels described by pData
    @param[out] ppBitmap    Output bitmap from the function.

    @return CRESULT indicating result of the operation.

    @since 5.3

</member>
        <member name="M:ctbitmap_createFromImage(CTImage*,CTBitmap**)">
    @brief Creates a ctbitmap from an existing ctimage. Memory is shared between the
    two structures.
    
    @param pImage       Existing image. This image must be kept alive at least as long
                        as the created bitmap.
    @param[out] ppBitmap    Output from the function
 
    @return CRESULT indicating success. Only when CERR_OK is true will ppBitmap be
    written to.

    @deprecated This functionality is deprecated. Use ctbitmap_createFromData()
    or ctbitmap_createFromDataPlanar() instead.

    @since 5.3

</member>
        <member name="M:ctbitmap_destroy(CTBitmap*)">
    @brief Destroy a ctbitmap
    @param pBitmap A bitmap

    @since 5.3

</member>
        <member name="M:ctbitmap_create(CTSize,CTColormode,CTBitmap**)">
    @brief Creates a new ctbitmap with the given dimensions and format.
 
    @param dims Desired dimensions of the bitmap
    @param format Desired color mode of the bitmap
    @param[out] ppBitmap Variable where the bitmap is stored
 
    @return CRESULT indicating result of the operation.

    @since 5.3

</member>
        <member name="T:CTBitmap">
@ingroup ctbitmap
@file ctbitmap.h
@brief Defines a raw bitmap buffer CTBitmap

    @addtogroup ctbitmap
    @brief Raw bitmap buffer

    @{

    @brief Type representing a raw bitmap buffer

    @since 5.3

</member>
        <member name="T:CTImageBase">
@brief
A CTImageBase describes basic information of an image.

</member>
        <member name="M:ctinterfaceid_equals(CTInterfaceID,CTInterfaceID)">
    @brief
    Test two CTInterfaceID objects for equality.

    @param id1
    An interface id.

    @param id2
    Another interface id.

    @return true iff the two interface ids are equal.

    @since 3.8.2 R01

</member>
        <member name="T:CTInterfaceID">
@brief
Id of an interface, used in interface based designs.

</member>
        <member name="M:ctstream_write(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Writes data to the stream.
 
    @param pStream Stream to write to.
    @param bytes Number of bytes to write. Writing zero bytes is a no-op (returning
    no error code).
    @param pData Pointer to data to write to the stream. May be null only when bytes
    is also 0.
    @param pWrittenBytes Number of bytes actually written to the stream.
 
    @return
    @li CERR_OK if all bytes were written to the stream, even if the stream is now
    completely full.
    @li CERR_STREAM_FULL if the stream can no longer accept any more bytes. Written
    bytes is now less than bytes.
    @li CERR_NOT_IMPLEMENTED if the stream does not support writing.
 
    @note The stream pointer is advanced *pWrittenBytes after writing.
 
    @note Writing to a stream may invalidate internal read cache in the stream.
 
    @note Writing zero bytes from a null pointer is a valid operation which returns
    zero written bytes and a CERR_OK return code.
 
    @since 5.4

</member>
        <member name="M:ctstream_peek(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Peeks at data in the stream without advancing the file pointer. This 
    operation does not transfer ownership of the data to the caller.
 
    @param pStream Stream to peek at.
    @param bytes Number of bytes to peek. Zero bytes is valid input.
    @param ppData A pointer to the peeked data will be returned on this variable
    upon successful completion. Set to null if zero bytes are requested.
    @param pReadBytes Number of bytes in *ppData which are valid. Set even if
    the function fails.
 
    @return
    @li CERR_OK if the full request was satsified.
    @li CERR_STREAM_END_OF_DATA if the stream could not deliver enough bytes to
    satisfy the request. In this case, *pReadBytes != bytes.
    @li CERR_NOT_IMPLEMENTED if the stream does not support peek or read.

    @note The stream pointer is not advanced by reading from the stream. Advance 
    the stream pointer by calling @ref ctstream_skip.

    @note Large requests may consume lots of memory depending on the stream
    implementation.
 
    @note The returned pointer ppData is not owned by the caller, and must not
    be written to. It is made invalid when another call to a stream function is
    made.

    @since 5.4

</member>
        <member name="M:ctstream_read(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Reads data from the stream. The stream pointer is advanced as expected when
    reading.
 
    @param pStream Stream to read from.
    @param bytes Number of bytes to read. Must be larger than zero.
    @param pData Buffer where the data is stored. Must be able to hold the entire
    request, ie. be at least bytes large, even if the stream would not be able
    to provide that many bytes.
    @param pReadBytes Number of bytes actually read from the stream. Set even if
    the function fails.
 
    @return 
    @li CERR_OK if the full request was satsified.
    @li CERR_STREAM_END_OF_DATA if the stream could not deliver enough bytes to
    satisfy the request. In this case, *pReadBytes != bytes.
    @li CERR_NOT_IMPLEMENTED if the stream does not support peek or read.

    @since 5.4

</member>
        <member name="M:ctstream_copy(CTStream*,CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Copy data from a read enabled source stream to a write enabled destination
    stream.

    @param pSrcStream read enabled stream where the data is going to be copied from.
    @param pDstStream write enabled stream where the data is going to be copied to.

    @param numBytes Number of bytes to copy. Special value 0, can be used
    for copying all of the data in pSrcStream from the current position
    to the end of the stream.

    @param copyChunkSize A performance parameter. This will specify the
    size in bytes of the chunks used to make the copy operation. A large value
    can increase performance but also increase the memory consumption, while a 
    small value can decrease performance.
    
    If this parameter is set to zero, the function will estimate chunk size 
    based on the internal characteristics of the stream, which will give a good
    trade-off between performance and memory consumption.

    @return @c CRESULT
    
    @li @c CERR_OK if no error occurred.
 
    Other proper error codes that depends on the underlying stream or
    memory subsystem.

    @since 3.8

</member>
        <member name="M:ctstream_abort(CTStream*)">
    @brief
    Aborts the current stream operation.

    This function shall be used if all ongoing operations are going to 
    be aborted. An example of use is in the case a reading stream has started
    a request, but a subsequent lock is not necessary. 
    
    It will also clear possible old error states.

    Calling abort will let the stream in a usable state.

    @param pStream A valid instance of a stream object.
 
    @deprecated Function deprecated since 5.4. This function has no replacement
    and should be used with care. Using read/peek/write eliminates the need for
    this function, because those functions do not have state.

    @since 3.8

</member>
        <member name="M:ctstream_tell(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    returns the current stream position ( if available ).

    canSeek must be used to determine if the function can return 
    the current position.

    @param pStream A valid instance of a stream object.
    @param[out] pOffset current global offset position.

    @return @c CRESULT with proper error code.

    @since 3.8

</member>
        <member name="M:ctstream_seek(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Seeks into the stream to offset position.
    
    The seek is absolute, but it should not be assumed that
    a just created stream is positioned at offset 0. 
    The tell function should be used to determine the initial 
    stream position.

    @param pStream A valid instance of a stream object.
    @param offset Absolute offset where to seek.

    @since 3.8

</member>
        <member name="M:ctstream_canSeek(CTStream*)">
    @brief
    This function returns true if the underlaying stream supports
    seeking to absolute positions.
    
    If this function returns true,
    it also means that the stream can return the current position
    with the tell function.

    @param pStream A valid instance of a stream object.
    @return @c true if the stream can seek, @c false otherwise.

    @since 3.8

</member>
        <member name="M:ctstream_skip(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Skips @c numBytes from the stream.

    @param pStream A valid instance of a stream object.
    @param numBytes Amount of bytes to skip.

    @since 3.8

</member>
        <member name="M:ctstream_writeFlush(CTStream*)">
    @brief
    Flush all internal buffers to the underlying stream.
    This function shall be used to guarantee that the data is 
    actually written.

    @param pStream A valid instance of a stream object.

    @return @c CRESULT

    Other proper error codes that depends on the underlying stream or
    memory subsystem.
 
    @deprecated Function deprecated since 5.4.
 
    @note Not all streams can flush properly. The safest way to flush a stream
    after writing is to destroy it, which must force the underlying
    implementation to commit data. Using this function is probably a mistake.

    @since 3.8

</member>
        <member name="M:ctstream_writeRelease(CTStream*)">
    @brief
    Release previous locked buffer. This function can delay.

    @param pStream A valid instance of a stream object.

    @return @c CRESULT
    
    @li @c CERR_OK if no error occurred.
 
    Other proper error codes that depends on the underlying stream or
    memory subsystem.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_write
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_writeRespond(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Tells the underlying stream, how many bytes are actually written to
    the locked buffer, and can start an synchronous operation if the
    underlying stream supports it.

    @param[in] pStream 
    A valid instance of a stream object.

    @param[in] writtenBytes 
    Amount of bytes written to the locked buffer. This value must be lower than
    or equal to the number of bytes previously locked.

    @deprecated Function deprecated since 5.4. Please use @ref ctstream_write
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_writeLock(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Returns a locked buffer for writing of numBytes in size. 

    @param pStream A valid instance of a stream object.
    @param numBytes Number of bytes to lock.
    @param[out] ppBuffer Pointer to locked buffer.
    @param[out] pLockedBytes Number of bytes actually locked. With some streams 
    with constrained capacity, this value may be less than the actually requested. 

    @return @c CRESULT with proper error code. This function does not block 
    and does not delay. But it can return CERR_STREAM_END_OF_DATA, and in that
    case, pLockedBytes will be less than the required amount.

    @deprecated Function deprecated since 5.4. Please use @ref ctstream_write
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_readRelease(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Releases latest locked block of data.

    All locked blocks must be released with this function in order to 
    avoid resource leaks.

    For optimal performance, the user of this API should not keep 
    locked buffers for future use. If it is required to store the locked data
    for future use, it is recommended to copy this buffer to a 
    local buffer.

    @param pStream A valid instance of a stream object.
    @param usedBytes Amount of bytes read from the locked buffer.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_peek
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_readLock(CTStream*,System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Locks an internal stream buffer, that holds the requested data ( if available )
    or an error code.

    This function can block if the requested data has not yet been received
    by the underlaying stream.

    @param pStream A valid instance of a stream object.
    @param[out] ppData A buffer with the data requested. This buffer can 
    only be freed using ctstream_readRelase.
    @param[out] pReadBytes Number of bytes returned in the locked buffer.

    @return  @c CRESULT
    
    @li @c CERR_STREAM_END_OF_DATA if there is not enough data in the stream
    to fulfill the request ( typical case when the stream maps to a file, and
    there is no more data left to read from the file ). pReadBytes will 
    return the amount of data read.

    @li @c CERR_OK if the whole request could be fulfilled. pReadBytes will be
    equal to the amount of bytes requested in the request function.

    Other proper error codes that depends on the underlying stream or
    memory subsystem.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_peek
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_readRequest(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Request a read data buffer.

    Requests a buffer with given amount of bytes from the stream,
    without blocking the caller.

    The requested buffer can be received in the readLock function
    at a later time.

    @param pStream A valid instance of a stream object.
    @param numBytes Amount of requested bytes.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_peek
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_getContext(CTStream*)">
    @brief
    Returns the user data from the underlying stream.

    @param pStream a valid pointer to a stream object.

    @return pointer to the underlying stream user data.

    @since 3.8

</member>
        <member name="M:ctstream_destroy(CTStream*)">
    @brief
    Destroys a stream.

    @param pStream a valid pointer to a stream object, or NULL.

    @since 3.8

</member>
        <member name="T:CTStream">
@ingroup scb_ctstream
@file ctstream.h
@brief Public interface for the stream subsystem.

    @addtogroup scb_ctstream
    @brief Stream handling.

    CTStream provides a generic interface for stream operations. The interface
    can be implemented in different ways, and operate on different underlying
    media (e.g. memory, file, network stream).

    @par Note about usage
    Most functions that take a CTStream object as an input parameter and
    (temporarily) take ownership of a stream, will modify the stream state
    during their execution (e.g. reading from, and writing to, the stream).
    This means that streams can't normally be reused between calls, or objects.
    For instance, when a CAPS session is finished with a stream, that stream
    will not be automatically reset to the beginning.  A reason for this is that
    the streams may not represent a data source where it's possible to do a seek
    operation, such as a network connection. Also, there may be interesting data
    at the end of a stream. Thus resetting the stream would lead to inconsistent
    behavior, and complicate application development.

    @par
    The recommended way to get the same data again, is to recreate the stream
    from the same source. For some applications, where a stream is known to be a
    file, buffer, or some other medium where seek is supported, the stream can,
    alternatively, be reset to the beginnning by calling ctstream_seek() with 
    @c offset=0.

    @par Customizing CTStream
    For implementation of support for other stream types, see: @ref scb_ctstream_interface

    @{
        @defgroup scb_ctstream_buffer Buffer streams
        @defgroup scb_ctstream_file   File streams

    @ingroup types_n_defs
    @brief
    Public object to represent generic streams.

    @sa CIStream.

    @since 3.8

</member>
        <member name="M:caps_destroyIterator(CTIterator*)">
    @brief 
    Destroys an iterator.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @remarks

    This function ignores whether or not the iterator is idle or currently
    associated with an operation.

    @since 3.0

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_abortIterator(CTIterator*)">
    @brief 
    Unconditionally aborts an iterative operation.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @remarks

    Calling this function on an iterator which already is "finished", or has 
    been aborted before, will be ignored without indication of an error.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_getIterationData(CTIterator*,System.UInt32*)">
    @brief 
    Retrieves auxillary data associated with the most recent iteration.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @param out_data
    Pointer to a @c CTuint32 variable which will receive the iteration
    data.

    @remarks

    This is an auxillary function provided for iterators to be used when 
    information of any kind needs to be communicated from the iterator back to 
    the user after performing an iteration. If a particular kind of operation
    will make use of this service, it is always noted in the documentation of
    the function initiating the operation and creating the iterator object.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_getCurIterationCount(CTIterator!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief 
    Retrieves the number of iterations performed on an iterator so far.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @param count
    Address of @c CTuint32 variable which will receive the number of iterations 
    which, up to the point of this call, has been performed on the iterator.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="F:OWNERSHIP_EXTERNAL">
Signals that ownership is NOT transferred to CAPS. Responsibility to 
destroy the object or deallocate heap memory stays with the caller. The
safest place to make such cleanup tasks is directly after destroying the
corresponding session. Before that point the object or memory buffer may
still be in use.

</member>
        <member name="F:OWNERSHIP_CAPS">
Causes CAPS to take ownership over the object or memory buffer in question.
When the item is no longer needed it is destroyed, which may occur anytime
during the life cycle of a session. 
The method used to destroy an object and/or deallocate heap memory is
further described where the option is available. 
IMPORTANT: When heap memory is involved either directly or indirectly 
(indirectly for instance when being part of an object like CTBuffer) it 
will be deallocated using oslmem_free(), which is part of the OS 
integration layer (OSIL). This should be carefully considered when 
transferring ownership to CAPS since there's a risk that memory can be 
allocated with a different API than the one being used in OSIL. Such a 
risk may lead to errors in diagnostic tool reports or leak detectors.

</member>
        <member name="F:EVENT_PLUGINSTATE_CHANGE">
Signals the session that the state of an external plugin has changed and
will need a full rendering process in order to synchronize its behaviour.

</member>
        <member name="F:EVENT_SOURCEDATA_CHANGE">
Signals the session that the source data contents has changed, which
will cause any internal cache or state related to the source data to be
invalidated. This is for instance useful when creating a session with 
caps_newSessionWithRaw(), and then continously updating the contents of the 
source buffer.

</member>
        <member name="F:CAPS_OUTPUT_STRETCH">
Stretches the image data to fit the specified output dimensions. This
option allows the image to be distorted.

</member>
        <member name="F:CAPS_OUTPUT_PRESERVE_AR">
Fits the image data within the output dimensions as well as possible,
preserving aspect ratio. If the image is fit smaller than the bounding
box formed by the output dimensions, the remaining borders will be
padded with the currently set background color.
See caps_setBackgroundColor() for details.

</member>
        <member name="D:IMAGE_FORMAT_SPEC">
    @brief
    Image format specification type. 

    This type can be used in favor of @ref CTImageFormat in order to allow 
    specifications of image formats not included in CAPS' internal codec 
    support.

    @since 3.0

</member>
        <member name="D:CAPS_IMAGE_FORMAT">
    @brief
    Defines the image formats which CAPS internally support. 
    @c IMAGE_FORMAT_RANGE_MIN and @c IMAGE_FORMAT_RANGE_MAX should never be
    used, they are control points for internal formats.

    @deprecated CAPS_IMAGE_FORMAT is deprecated, use CTImageFormat instead.

    @since 3.0

</member>
        <member name="T:CTScreen">
    @brief
    The screen type used for output during rendering sessions.

    One or more screens can be created within the same session and thus have
    to be destroyed before destroying the session.

    @since 3.0

</member>
        <member name="T:cips">
@file caps_types.h
@brief This header defines the public types of the CAPS Base API.
@ingroup types_n_defs

@addtogroup types_n_defs
@{

    @brief
    The central handle type used for all editing sessions.

    A session is the environment surrounding the task of decoding-encoding and
    optionally manipulating a source image with a number of effects.

    @since 3.0

</member>
        <member name="M:oslfile_clone(CTFile*,CTFile**)">
    Opens a file from the local file system.

    @param pFile        CTFile pointer specifying an open file.

    @param[out] ppFile  CTFile pointer to the clone

    @return CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:oslfile_remove(System.Char!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Removes a file from the file system.

    @param pFilename    Name of the file to be removed.

    @return CERR_OK if successful, otherwise an error code.

</member>
        <member name="M:oslfile_size(CTFile*)">
    @brief
    Determines the size of a file.

    @param pFile        CTFile pointer specifying an open file.

    @return The size of the file in bytes. 

</member>
        <member name="M:oslfile_pos(CTFile*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Retrieves the current read/write file position.

    @param pFile        CTFile pointer specifying an open file.

    @param pOutPos      CTuint32 pointer which will receive the position.
        
    @return CERR_OK if successful, otherwise a specific error code.

</member>
        <member name="M:oslfile_seek(CTFile*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Changes the current read/write position.

    @param pFile        CTFile pointer specifying an open file.

    @param offset       Offset to seek from the position specified by \em mode.

    @param mode         The seek mode, see remarks section for details.

    @remarks
    The @c mode argument can be one of the following values:
    - OSLFILE_SEEK_CUR - The @c offset is from the current position.
    - OSLFILE_SEEK_SET - The @c offset is from the beginning of the file.
    .

    @return CERR_OK if successful, otherwise an error code.

</member>
        <member name="M:oslfile_eof(CTFile!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Checks whether an end-of-file indicator has been set for a file.

    @param pFile        CTFile pointer specifying an open file.

    @return
    - @c true, if end-of-file indicator is set.
    - @c false, otherwise.
    .

</member>
        <member name="M:oslfile_flush(CTFile*)">
    @brief
    Forces any pending buffered output to be written to a file.

    @param pFile        CTFile pointer specifying an open file.

    @return @c CERR_OK if successful, otherwise an error code.

</member>
        <member name="M:oslfile_write(CTFile*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Writes a specified amount of data to a file.

    @param pFile        CTFile pointer specifying an open file.

    @param pBuffer      Buffer with data to be written. Cannot be zero and must
                        be of at least \p count size in bytes.
    @param count        Number of bytes to be written.

    @return Number of bytes actually written to the file. Zero is returned if 
    no data can be written or if an error occurred.

</member>
        <member name="M:oslfile_read(CTFile*,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Reads the specified number of bytes from a file.

    @param pFile        A CTFile pointer specifying an open file.

    @param pBuffer      Buffer to which data will be read. Cannot be zero and
                        must be of at least \p count size in bytes.
    @param count        Number of bytes to read from the file.

    @return Number of bytes actually read from the file. Zero is returned if 
    no data can be read or if an error occurred.

</member>
        <member name="M:oslfile_close(CTFile*)">
    @brief
    Closes a file previously opened with oslfile_open().

    @param pFile        A CTFile pointer specifying an open file.

</member>
        <member name="M:oslfile_open(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,CTFile**)">
    @brief
    Opens a file from the local file system.

    @param pFilename    File system path to the requested file.

    @param flags        The access rights, mode and share policy to use when
                        opening the file. See FILE_OPEN_FLAGS for details.

    @param ppOutFile    Address of a CTFile pointer which will receive the 
                        opened file.

    @remarks
    The file handle returned in pOutFile should be closed with oslfile_close()
    when no longer needed. This file will not create subdirectories when opening
    a file for writing. CERR_FILE_NOT_FOUND is returned if a file can not be
    created because sub directories are missing.
    @n@n
    The file pointer is always positioned at the beginning of the file, even
    when FOF_ACCESS_READWRITE is used.

    @return CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="F:FOF_BEHAVE_NO_REPLACE">
@brief
File system implementation may ignore this.
This flag can only be used together with read and write access. When 
this flag is enabled, files will not be truncated when opened with write
access.

</member>
        <member name="F:FOF_SHARE_FULL">
        @deprecated

        Optional support. If the file system does not support this,
        ignore. The file may be shared by other processes for both reading and
        writing (default).

</member>
        <member name="F:FOF_SHARE_READONLY">
        @deprecated

        Optional support. If the file system does not support this,
        ignore. The file may only be opened by other processes for reading.

</member>
        <member name="F:FOF_SHARE_EXCLUSIVE">
        @deprecated

        Optional support. If the file system does not support this,
        ignore. The file may not be opened by other processes.

</member>
        <member name="F:FOF_MODE_TEXT">
@brief Optional support. If the file system does not support this,
open as binary.

</member>
        <member name="F:FOF_MODE_BINARY">
        @deprecated

        This behaviour is default. The file is opened in binary
        mode (default). This is the only behavior guaranteed to work

</member>
        <member name="F:FOF_ACCESS_READWRITE">
@brief The file is opened with read and write access. 
</member>
        <member name="F:FOF_ACCESS_WRITE">
@brief The file is opened with write access. 
</member>
        <member name="F:FOF_ACCESS_READ">
@brief The file is opened with read-only access (default). 
</member>
        <member name="T:CTFile">
    @file oslfile.h
    @brief Declares the virtual interface (used internally in CAPS), providing
    support for file management.

    It is strongly recommended that an underlying implementation of this
    virtual file interface is based on a buffered file API in order to get the
    best performance from CAPS and other software based on CAPS.

    @addtogroup os_file
    @brief Mapping of basic OS file functionality.

    These function declarations are found in the header file: oslfile.h
    
    @{

@brief The generic file handle type.

</member>
        <member name="F:_static_assert">
@} 
</member>
        <member name="M:scberror_cresultToString(CRESULT)">
    @brief Returns the string representation of an error code.

    @param result Code to convert to a string
    
    @return A pointer to constant memory indicating the desired string
    representation.

    @remarks If the error code is not defined, or internal to Scalado,
    a "CERR_UNKNOWN_ERROR" is returned.

</member>
        <member name="F:SCB_MODULE_STORAGE_BASE">
@brief <b>Error codes related to CTStorage</b></member>
        <member name="F:SCB_MODULE_SPMO_BASE">
@brief  <b>Speedview related error codes:</b></member>
        <member name="F:CERR_HARDWARE_NOT_AVAILABLE">
@brief
Error code when hardware is busy or for some reason not available on the 
current platform. This may be a permanent or temporary condition depending
on the capabilities of the running environment.

</member>
        <member name="F:SCB_MODULE_OSLJPEG_BASE">
@brief  <b>Hardware related error codes:</b></member>
        <member name="F:SCB_MODULE_OSLFILE_BASE">
@brief  <b>OS file system related error codes:</b></member>
        <member name="F:SCB_MODULE_JPEGTOOLS_BASE">
@brief  <b>JpegTools related error codes:</b></member>
        <member name="F:SCB_MODULE_PANORAMA_BASE">
@brief  <b>Autorama related error codes:</b></member>
        <member name="F:CERR_STREAM_REQUEST_MISMATCH">
@brief
This error code is returned when readRequest already have been 
called with a different amount of requested bytes.

</member>
        <member name="F:CERR_STREAM_FULL">
@brief
This error code is returned when a stream is full and it is not
possible to write more data to it.

</member>
        <member name="F:CERR_STREAM_MISSING_REQUEST">
@brief
An operation such as readLock or readRelease has been performed
without making a readRequest.

</member>
        <member name="F:CERR_STREAM_OP_REQUIRE_SEEK">
@brief
This error is returned when some operation needs to seek into the
stream, but the seek function is not available (for example if the stream
is mapped to a network device, it is not always possible to perform seek ).

</member>
        <member name="F:CERR_STREAM_DELAYED">
@brief
This result code tells that the underlying stream has been delayed.

Either than there is no data available currently, or it is not possible
to write to the stream right now ). When a stream delays, it is assumed
that it will be possible to read or write to the stream in a later moment,
this depends on the particular implementation or resource associated to
the stream.

</member>
        <member name="F:SCB_MODULE_CTSTREAM_BASE">
@brief  <b>I/O Stream related error codes module:</b></member>
        <member name="F:SCB_MODULE_CTCACHE_BASE">
@brief  <b>Cache related error codes:</b></member>
        <member name="F:SCB_MODULE_EXIF_BASE">
@brief  <b>Exif related error codes:</b></member>
        <member name="F:SCB_MODULE_IPL_BASE">
@brief  <b>Internal error codes:</b></member>
        <member name="F:SCB_MODULE_GENERAL_BASE">
@brief  <b>General error codes:</b></member>
        <member name="F:SCB_STATUS_CODES_BASE">
@brief  <b>General status codes:</b></member>
        <member name="T:CTIterator">
@endcond 
    @ingroup types_n_defs
    @brief Defines an iterator type.

    Defines an iterator object which is used to handle operations distributed
    as a sequence of iterations rather than a complete, blocking process.

    @since 3.0

    @deprecated The use of iterators is deprecated since 5.3.

</member>
        <member name="D:SCB_RENDER_OPT">
@brief
Directions on how to render an image

</member>
        <member name="T:CTBlendFunction">
@brief 
Blend function

</member>
        <member name="T:CTImageFormat">
@brief 
Image format

</member>
        <member name="F:CTImage.scanline">
        The width in bytes of one scanline within the image. Cannot be zero.
     
        For a planar pixel format, the scanline specifies the number of bytes needed
        for the pixel buffer for a single row of pixels. That is, the total needed
        size for the image is scanline * height bytes.
     
        For an interleaved image the above holds true, but in this special case, the
        scanline also means the number of bytes for each row of pixels.

</member>
        <member name="T:CTImage">
@endcond 
    @brief 
    Defines an uncompressed raw image through a pixel buffer and associated 
    information.


</member>
        <member name="T:CTBufferFloat">
@endcond 
@cond scb_internal_doc

</member>
        <member name="T:CTBuffer32">
@cond scb_internal_doc

</member>
        <member name="T:CTBuffer">
@brief Defines a buffer with accompaning size.

</member>
        <member name="T:CTColor">
@brief
Defines the color of a single pixel by the channels @a alpha, @a red, @a green
and @a blue. Each channel is in the range 0-255.

</member>
        <member name="T:CTSize">
@endcond 
@brief Defines a two-dimensional size.

</member>
        <member name="D:CTPoint">
@brief Deprecated definition of a point. Equivalent to CTVector.

</member>
        <member name="T:CTVector">
@brief Defines a two-dimensional vector.

</member>
        <member name="T:CTRect">
@brief Defines a rectangle.

</member>
        <member name="T:CTClass">
    @brief
    Returns the class's Id, given its name.

    eg: SCC_CLASS_ID(CTObject) would be replaced by CTObjectId

    @brief
    Returns the interface's Id, given its name.

    eg: SCC_INTERFACE_ID(CTSerializable) would be replaced by CTSerializableId

    @brief
    Returns the variable name of the class, given its name.

    eg: SCC_CLASS_NAME(CTObject) would be replaced by CTObjectClass


    @brief
    This macro declares the necessary parts of a class in order to use it in
    code.

    Currently that is an external declaration of the class id, and a
    typedef for the class structure (which is private in this context).


    @brief
    Declares an interface for public use.

    This is necessary to invoke in the public header file, as it declares the
    interface id and interface structure.


    @brief
    Holds information about the class Id, parent/super
    class, and virtual function table etc.

    Although, the function table may not always be complete, and it does not
    represent the function table of a live object of that class (necessarily).

    The members of this struct are not intended to be accessed directly.


</member>
        <member name="T:CTSRational">
@brief Signed rational representation.

</member>
        <member name="T:CTRational">
@brief Unsigned rational representation.

</member>
        <member name="D:CTuint128">
@brief 128 bit unsigned integer representation.

</member>
        <member name="D:CTuint64">
@brief 64 bit unsigned integer representation.

</member>
        <member name="D:CTint8">
@ingroup types_n_defs
@file scbdefs.h
@brief Defines public symbols, macros and types.

    @addtogroup types_n_defs
    @brief Defines public symbols, macros and types.

    @par Naming conventions
    Type names are always prefixed with @c CT. Following the @c CT prefix is
    always the specifier of the type. If the first letter of the type
    specifier is lower case it signifies that it's primitive (e.g @c CTint) and
    upper case that it's complex (e.g @c CTRect).

    @par Visibility
    Complex types are always public within this header as it by definition
    doesn't require linkage.

    @{

@name Primitive data types

</member>
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctbitmaputil_initImageWithPlane(CTPlane,CTImage*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginClipartFromRaw(cips*,CTImage*,OWNERSHIP_POLICY,CTVector,System.Single,System.Single,caps_clipart**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setRotationAndTranslate(cips*,System.Single,CAPS_ROTATION_SCALE_MODE,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSpotlightOrientation(caps_spotlight*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSpotlightOrientation(caps_spotlight*,CTVector*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Single*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setVignetting(cips*,CTRect,System.Single,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginClipartFromRaw(cips*,CTImage*,OWNERSHIP_POLICY,CTVector,System.Single,System.Single,caps_clipart**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setRotationAndTranslate(cips*,System.Single,CAPS_ROTATION_SCALE_MODE,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSpotlightOrientation(caps_spotlight*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSpotlightOrientation(caps_spotlight*,CTVector*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Single*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setVignetting(cips*,CTRect,System.Single,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_uthSetRenderBlockSize(cips*,CTSize)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setLocalBoost(cips*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getAutoEnhance(cips*,AutoEnhanceParameters*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctbitmaputil_initImageWithPlane(CTPlane,CTImage*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setLocalBoost(cips*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getAutoEnhance(cips*,AutoEnhanceParameters*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginClipartFromRaw(cips*,CTImage*,OWNERSHIP_POLICY,CTVector,System.Single,System.Single,caps_clipart**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setRotationAndTranslate(cips*,System.Single,CAPS_ROTATION_SCALE_MODE,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSpotlightOrientation(caps_spotlight*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSpotlightOrientation(caps_spotlight*,CTVector*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Single*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setVignetting(cips*,CTRect,System.Single,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctbitmaputil_initImageWithPlane(CTPlane,CTImage*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_undo(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong,CTIterator**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreen(cips*,CTSize,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_createScreenEx(cips*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBuffer*,CTScreen**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setZoomRect(CTScreen*,CTRect*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setPan(CTScreen*,System.Single,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctbitmaputil_initImageWithPlane(CTPlane,CTImage*)'. -->
    </members>
</doc>